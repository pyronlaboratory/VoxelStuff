package com.ch;

import java.util.List;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;

import org.lwjgl.BufferUtils;

/**
 * is a utility class that provides various methods for manipulating arrays and
 * matrices in a 2D graphics library. The class offers methods to create and manipulate
 * arrays of different data types, such as `FloatBuffer`, `Integer`, and `Matrix4f`.
 * Additionally, it provides methods to remove empty strings from an array and convert
 * between integer, float, and string arrays.
 */
public class Util {
	
	/**
	 * creates a new float buffer instance using the `BufferUtils` class. The size parameter
	 * is used to determine the capacity of the buffer. The returned buffer can be used
	 * for storing and manipulating floating-point numbers.
	 * 
	 * @param size number of floating-point values to be stored in the resulting `FloatBuffer`.
	 * 
	 * @returns a FloatBuffer object representing a contiguous block of memory capable
	 * of storing floating-point data.
	 * 
	 * 	- The `createFloatBuffer` function returns an object of type `FloatBuffer`. This
	 * means that it is a buffer that stores floating-point numbers.
	 * 	- The `size` parameter passed to the function determines the capacity of the buffer.
	 * 	- The buffer is created using the `BufferUtils` class, which provides utility
	 * methods for creating and manipulating buffers.
	 */
	public static FloatBuffer createFloatBuffer(int size) {
		return BufferUtils.createFloatBuffer(size);
	}

	/**
	 * creates an `IntBuffer` instance of a specified size, leveraging `BufferUtils`
	 * utility class.
	 * 
	 * @param size amount of memory required to store an IntBuffer.
	 * 
	 * @returns an `IntBuffer` object that can be used to store and manipulate integer values.
	 * 
	 * The `IntBuffer` object created is an instance of BufferUtils' `createIntBuffer`
	 * method, which takes in the size of the buffer as its parameter.
	 * 
	 * The buffer is a direct view of the underlying memory, meaning it provides a fast
	 * and efficient way to access the data stored within it.
	 * 
	 * The buffer is also backed by a valid region of memory, ensuring that the data it
	 * contains is properly allocated and accessible.
	 */
	public static IntBuffer createIntBuffer(int size) {
		return BufferUtils.createIntBuffer(size);
	}

	/**
	 * creates a new byte buffer instance with the specified size.
	 * 
	 * @param size desired capacity of the ByteBuffer to be created, which determines the
	 * amount of memory allocated for storing data.
	 * 
	 * @returns a non-null `ByteBuffer` object with the specified size.
	 * 
	 * 	- The `ByteBuffer` object represents a contiguous block of memory that can be
	 * accessed and manipulated as a sequence of bytes.
	 * 	- The size of the buffer is determined by the parameter `size`, which must be a
	 * positive integer.
	 * 	- The buffer is created using the `BufferUtils.createByteBuffer()` method, which
	 * allocates memory for the buffer and returns a pointer to the first byte in the buffer.
	 */
	public static ByteBuffer createByteBuffer(int size) {
		return BufferUtils.createByteBuffer(size);
	}

	/**
	 * creates an `IntBuffer` object from a collection of integers and flips it to create
	 * a view of the buffer that can be used for efficient random access operations.
	 * 
	 * @returns an `IntBuffer` object that contains the provided values flipped from a
	 * non-flip to a flip state.
	 * 
	 * 	- The `IntBuffer` object is generated by putting the input `values` array into
	 * an IntBuffer using the `put()` method.
	 * 	- The `flip()` method is called on the buffer to flip it, making its data accessible
	 * for reading from the end of the buffer towards the beginning.
	 * 	- The returned buffer is a flipped IntBuffer, which means that the data can be
	 * read from the end of the buffer towards the beginning.
	 */
	public static IntBuffer createFlippedBuffer(int... values) {
		IntBuffer buffer = createIntBuffer(values.length);
		buffer.put(values);
		buffer.flip();

		return buffer;
	}
	
	/**
	 * creates a new FloatBuffer by copying the provided array of floats, then flips the
	 * buffer to enable random access. It returns the newly created buffer.
	 * 
	 * @returns a flipped `FloatBuffer` containing the input `float` values.
	 * 
	 * The `FloatBuffer` object returned by the function is flipped, meaning that its
	 * position points to the last element stored in the buffer.
	 * 
	 * The buffer's capacity is equal to the number of `float` values passed as arguments
	 * to the function.
	 * 
	 * The buffer's status is set to `flipped`, indicating that it contains a subset of
	 * the input data that has been rearranged for efficient access.
	 */
	public static FloatBuffer createFlippedBuffer(float... values) {
		FloatBuffer buffer = createFloatBuffer(values.length);
		buffer.put(values);
		buffer.flip();

		return buffer;
	}

	/*
	public static FloatBuffer createFlippedBuffer(Vertex[] vertices) {
		FloatBuffer buffer = createFloatBuffer(vertices.length * Vertex.SIZE);

		for (int i = 0; i < vertices.length; i++) {
			buffer.put(vertices[i].getPos().getX());
			buffer.put(vertices[i].getPos().getY());
			buffer.put(vertices[i].getPos().getZ());
			buffer.put(vertices[i].getTexCoord().getX());
			buffer.put(vertices[i].getTexCoord().getY());
			buffer.put(vertices[i].getNormal().getX());
			buffer.put(vertices[i].getNormal().getY());
			buffer.put(vertices[i].getNormal().getZ());
			buffer.put(vertices[i].getTangent().getX());
			buffer.put(vertices[i].getTangent().getY());
			buffer.put(vertices[i].getTangent().getZ());
		}

		buffer.flip();

		return buffer;
	}
	*/

	/*
	public static FloatBuffer createFlippedBuffer(Matrix4f value) {
		FloatBuffer buffer = createFloatBuffer(4 * 4);

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				buffer.put(value.get(i, j));

		buffer.flip();

		return buffer;
	}
	
	public static Matrix4f loatMat4(FloatBuffer vals) {
		
//		vals.flip();
		
		Matrix4f m = new Matrix4f();
		
		int index;
		for (index = 0; index < 16; index++)
			m.set(index % 4, index / 4, vals.get());
		
		return m;
	}
*/
	/**
	 * removes empty strings from an array of strings and returns a new array with only
	 * non-empty strings.
	 * 
	 * @param data array of strings that is to be filtered for empty strings and returned
	 * as an array of non-empty strings.
	 * 
	 * 	- Length: The method takes an array of strings as input, represented by the
	 * variable `data`.
	 * 	- Elements: Each element in the input array is a string object.
	 * 	- Empty strings: The function checks each element for emptiness using the `equals()`
	 * method and removes any empty strings from the array.
	 * 	- ArrayList: After removing empty strings, the function creates an ArrayList to
	 * store the non-empty elements.
	 * 	- Size: The size of the ArrayList is calculated after adding all non-empty elements.
	 * 	- Array creation: A new array is created to store the non-empty elements in the
	 * ArrayList.
	 * 
	 * @returns a new array of non-empty strings containing the elements from the original
	 * input array.
	 */
	public static String[] removeEmptyStrings(String[] data) {
		ArrayList<String> result = new ArrayList<String>();

		for (int i = 0; i < data.length; i++)
			if (!data[i].equals(""))
				result.add(data[i]);

		String[] res = new String[result.size()];
		result.toArray(res);

		return res;
	}

	/**
	 * transforms an array of integers into an integer array with the same length, by
	 * simply copying the elements from the original array to the new one.
	 * 
	 * @param data 0-based integer array that is converted to an integer array of the
	 * same length by copying each element.
	 * 
	 * 	- It is an array of integers, denoted by `[data.length]`.
	 * 	- It has a zero-based index, meaning that the first element in the array is at
	 * index 0.
	 * 	- Each element in the array is an integer value, represented as a primitive type
	 * `Integer`.
	 * 
	 * @returns an integer array with the same length as the input `data` array, containing
	 * the corresponding integer values.
	 */
	public static int[] toIntArray(Integer[] data) {
		int[] result = new int[data.length];

		for (int i = 0; i < data.length; i++)
			result[i] = data[i];

		return result;
	}
	
	/**
	 * converts a list of integers to an integer array with the same size as the list.
	 * It uses a loop to copy each element from the list to the corresponding position
	 * in the array.
	 * 
	 * @param data List of integers that will be converted to an integer array by the
	 * `toIntArray()` method.
	 * 
	 * 1/ The `List<Integer>` type indicates that `data` is a collection of integers.
	 * 2/ The size of `data` can be retrieved using the `size()` method.
	 * 3/ The `get()` method is used to access individual elements of `data`.
	 * 4/ The `int[]` type of the returned value indicates that the function will return
	 * an array of integers.
	 * 
	 * @returns an integer array containing the elements of the input list.
	 */
	public static int[] toIntArray(List<Integer> data) {
		int[] result = new int[data.size()];

		for (int i = 0; i < data.size(); i++)
			result[i] = data.get(i);

		return result;
	}
	
	/**
	 * converts a `Float` array to an equivalent `float[]` array, copying each element
	 * from the input array to the output array.
	 * 
	 * @param data Float array to be converted into a float array.
	 * 
	 * 	- `data` is an array of `Float`.
	 * 	- Its length is defined by an integer variable `data.length`.
	 * 	- Each element in the array is accessed using the index number `i` from 0 to
	 * `data.length - 1`.
	 * 
	 * The function then returns a new array of `float` with the same elements as `data`.
	 * 
	 * @returns a new float array with the same elements as the input `data` array.
	 */
	public static float[] toFloatArray(Float[] data) {
		float[] result = new float[data.length];

		for (int i = 0; i < data.length; i++)
			result[i] = data[i];

		return result;
	}
	
	/**
	 * takes a list of `Float` objects and returns an array of the same size containing
	 * the corresponding values.
	 * 
	 * @param data List of Float values that are to be converted into an array of float
	 * values.
	 * 
	 * 	- `List<Float>` represents an array-like data structure that stores floating-point
	 * numbers.
	 * 	- `size()` returns the number of elements in the list.
	 * 	- `get(i)` retrieves the `i`-th element from the list and assigns it to the
	 * corresponding index in the output array.
	 * 
	 * @returns a float array containing the values of the input list.
	 */
	public static float[] toFloatArray(List<Float> data) {
		float[] result = new float[data.size()];

		for (int i = 0; i < data.size(); i++)
			result[i] = data.get(i);

		return result;
	}
}
