{"name":"Texture.java","path":"res/shaders/Texture.java","content":{"structured":{"description":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"3b644d2c-fb7f-a09d-b04b-6e85fa906a96","ancestors":[],"type":"function","description":"provides functionality for loading and managing textures in a 3D graphics application. It allows for texture binding and manipulation through methods such as `bind()` and `getID()`. The class also includes a `loadTexture()` method for loading textures from files.","name":"Texture","code":"public class Texture {\n\t\n\tprivate String fileName;\n\tprivate int id;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = Texture.loadTexture(fileName);\n\t}\n\n\t@Override\n\tprotected void finalize() {\n\t}\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t\n}","location":{"start":30,"insert":30,"offset":" ","indent":0,"comment":null},"item_type":"class","length":80,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."},{"id":"794efdc2-0960-f180-a14f-9dfcc51476d5","ancestors":["3b644d2c-fb7f-a09d-b04b-6e85fa906a96"],"type":"function","description":"has no specific functionality as it is a protected method with no implementation or invoked code. It is intended for internal use and does not have any external effect.","params":[],"usage":{"language":"java","code":"@Override\n\tprotected void finalize() {\n\t\tsuper.finalize();\n\t}\n","description":"\nIn this example, the method finalize is being overridden from its superclass and then calling the superclass's finalize method with `super.finalize()`. This is necessary because finalize is a method that is designed to be overridden by subclasses. The reason for this is that objects are not always automatically garbage collected and may need to be manually freed of resources when they are no longer needed. By calling the superclass's finalize method, we ensure that any necessary cleanup actions are taken care of before the object is destroyed."},"name":"finalize","code":"@Override\n\tprotected void finalize() {\n\t}","location":{"start":40,"insert":40,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."},{"id":"2efc67ed-036b-b598-b142-6f337861de75","ancestors":["3b644d2c-fb7f-a09d-b04b-6e85fa906a96"],"type":"function","description":"binds a widget with the specified index to the underlying data source.","params":[],"usage":{"language":"java","code":"public void bind() {\n\tbind(0);\n}\n","description":""},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":44,"insert":44,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."},{"id":"13234e88-91cf-aa9d-4f4b-296ec1aca831","ancestors":["3b644d2c-fb7f-a09d-b04b-6e85fa906a96"],"type":"function","description":"sets the active texture slot in OpenGL using the `glActiveTexture` function and binds a texture using the `glBindTexture` function. The texture is identified by an integer value ranging from 0 to 31, inclusive.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot to bind to the current rendering context, with valid values ranging from 0 to 31.","complex_type":false}],"usage":{"language":"java","code":"Texture texture = new Texture(\"myFile.png\");\ntexture.bind(0);\n","description":"\nIn the above example, we first create a new instance of the Texture class and pass in the file name of the image we want to load as a String. We then use the bind method to bind the texture to slot 0 (GL_TEXTURE0 + samplerSlot) using glBindTexture() and pass in the id of the texture loaded earlier, which is stored in the id variable."},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":48,"insert":48,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."},{"id":"9e3991dd-3d0b-2282-e34a-97485ec616c8","ancestors":["3b644d2c-fb7f-a09d-b04b-6e85fa906a96"],"type":"function","description":"returns the value of the `id` field.","params":[],"returns":{"type_name":"int","description":"the value of the `id` variable, which is an integer.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tTexture texture = new Texture(\"path/to/file\");\n\tint id = texture.getID();\n}\n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":54,"insert":54,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."},{"id":"b360a2f7-7a01-ba9d-8e48-15c20d02b48f","ancestors":["3b644d2c-fb7f-a09d-b04b-6e85fa906a96"],"type":"function","description":"loads a 2D image from a file and generates a texture for it, using the GL_TEXTURE_2D format. It sets up the texture parameters and uploads the image data to the GPU.","params":[{"name":"fileName","type_name":"String","description":"filename of the image to be loaded and read as an array of pixels.","complex_type":false}],"returns":{"type_name":"int","description":"an integer identifier of a textured OpenGL buffer.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":58,"insert":58,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":49,"docLength":null,"doc":"A `Texture` class that loads and manages textures in an OpenGL context. It uses the `GL11` and `GL30` packages to load and manipulate textures. The `loadTexture()` method loads a texture from a file and returns its ID, which is then used to bind the texture using the `bind()` and `bind(int samplerSlot)` methods. The `getID()` method returns the ID of the texture."}]}}}