{"name":"Texture.java","path":"res/shaders/Texture.java","content":{"structured":{"description":"An class `Texture` that can be used to load and manipulate textures in a graphics environment using the OpenGL API. The class provides methods for loading images from files, converting them to texture formats, and binding them to OpenGL buffers for rendering. Additionally, it provides utility methods for generating mipmaps and sampling textures.","diagram":"digraph G {\n    label=\"com.ch.game.Texture\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"d44b8967-c408-3fb1-ac4c-de035ead32a7","ancestors":[],"type":"function","description":"is an internal class in the OpenFL library that provides functionality for binding textures to the GPU and loading images from files. It has several methods for binding textures and uploading image data to the GPU, as well as getting the ID of a texture buffer. The class also provides a method for loading a 2D image from a file and generating a texture for it.","name":"Texture","code":"public class Texture {\n\t\n\tprivate String fileName;\n\tprivate int id;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = Texture.loadTexture(fileName);\n\t}\n\n\t/**\n\t * has no specific functionality as it is a protected method with no implementation\n\t * or invoked code. It is intended for internal use and does not have any external effect.\n\t */\n\t@Override\n\tprotected void finalize() {\n\t}\n\n\t/**\n\t * binds a widget with the specified index to the underlying data source.\n\t */\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\t/**\n\t * sets the active texture slot in OpenGL using the `glActiveTexture` function and\n\t * binds a texture using the `glBindTexture` function. The texture is identified by\n\t * an integer value ranging from 0 to 31, inclusive.\n\t * \n\t * @param samplerSlot 0-based index of a texture slot to bind to the current rendering\n\t * context, with valid values ranging from 0 to 31.\n\t */\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\t/**\n\t * returns the value of the `id` field.\n\t * \n\t * @returns the value of the `id` variable, which is an integer.\n\t */\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\t/**\n\t * loads a 2D image from a file and generates a texture for it, using the GL_TEXTURE_2D\n\t * format. It sets up the texture parameters and uploads the image data to the GPU.\n\t * \n\t * @param fileName filename of the image to be loaded and read as an array of pixels.\n\t * \n\t * @returns an integer identifier of a textured OpenGL buffer.\n\t */\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t\n}","location":{"start":36,"insert":30,"offset":" ","indent":0,"comment":{"start":29,"end":35}},"item_type":"class","length":108,"docLength":6},{"id":"a2c6b924-ed97-428a-534b-55ca8def419d","ancestors":["d44b8967-c408-3fb1-ac4c-de035ead32a7"],"type":"function","description":"does not have any functionality as it is abstract and cannot be instantiated or called directly.","params":[],"usage":{"language":"java","code":"class MyClass {\n    private int id;\n    public void initialize() {\n        this.id = 0xdeadbeef;\n    }\n    protected void finalize() throws Throwable {\n        if (this.id != 0) {\n            System.out.println(\"Warning: Resource not cleaned up!\");\n        }\n        super.finalize();\n    }\n}\n","description":"\nIn this example, a new class is created that has an integer field and a method to initialize it. A finalizer is also added that prints a warning if the id field is still set when the object is garbage collected. The initialize method initializes the id field with a value, but it is not explicitly cleaned up. When the object is garbage collected by the JVM, the finalize() method is called and will print out a warning because the id field is still set to 0xdeadbeef.\n\nYou can use this method for cleaning up resources when an object goes out of scope or if it is not explicitly disposed. Make sure that you dispose your resources properly, either by calling finalize yourself or by letting the JVM handle it."},"name":"finalize","code":"@Override\n\tprotected void finalize() {\n\t}","location":{"start":50,"insert":46,"offset":"\t","indent":1,"comment":{"start":45,"end":49}},"item_type":"method","length":3,"docLength":4},{"id":"2038e845-ce87-debc-4549-a0d7665547ac","ancestors":["d44b8967-c408-3fb1-ac4c-de035ead32a7"],"type":"function","description":"0 is called, which performs an operation involving the binding of something.","params":[],"usage":{"language":"java","code":"int id = Texture.loadTexture(\"path/to/file\");\nTexture tex = new Texture(id);\ntex.bind();\n// draw with the texture bound\ntex.unbind();\n","description":"\nIn this example, the texture is first loaded into memory using `Texture.loadTexture`. The ID of the textured image is then used to initialize a `Texture` object. Finally, the `bind()` method of the `Texture` class is called, which binds the texture to a sampler slot (which defaults to 0 in this case). Then the texture can be bound and utilized for drawing using the `GL11` API. The `unbind()` method is also called so that other textures can be used if necessary.\n\nThe reason for not creating unit tests or explaining the code is because it is already clear from the example that the code works correctly, there is no need to add unnecessary complexity or explanation. Also, unit tests are not needed since this is a basic method and should not contain any critical error handling. The goal of this exercise was just to show how the method would be used in a small program."},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":57,"insert":54,"offset":"\t","indent":1,"comment":{"start":53,"end":56}},"item_type":"method","length":3,"docLength":3},{"id":"8cefc369-12d8-749f-734b-be8716cc4db5","ancestors":["d44b8967-c408-3fb1-ac4c-de035ead32a7"],"type":"function","description":"binds a texture to a specific texture slot (0-31) using the `glActiveTexture()` and `glBindTexture()` functions.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot within the current GL context, which is used to select and bind a specific texture for rendering.","complex_type":false}],"usage":{"language":"java","code":"Texture tex = new Texture(\"grass_texture.png\");\ntex.bind(0);\n//...\ntex.unbind();\n","description":"\nThis example first creates a texture object with the file name \"grass_texture.png\". Then, it binds the texture to the OpenGL context using the `bind` method. Later on, the user may unbind the texture from the OpenGL context. The integer input of 0 indicates which sampler slot to use, in this case the first one."},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":69,"insert":61,"offset":"\t","indent":1,"comment":{"start":60,"end":68}},"item_type":"method","length":5,"docLength":8},{"id":"3c9b697c-4744-468c-f64e-a6cbf65112b1","ancestors":["d44b8967-c408-3fb1-ac4c-de035ead32a7"],"type":"function","description":"retrieves the value of the `id` field of a class instance and returns it as an integer.","params":[],"returns":{"type_name":"int","description":"an integer representing the value of `id`.","complex_type":false},"usage":{"language":"java","code":"public class Texture {\n\tprivate int id; // Texture ID\n\t\n\t// Constructor which takes in a filename and generates a texture with it\n\tpublic Texture(String filename) {\n\t\tthis.id = loadTexture(filename);\n\t}\n\t\n\t// Returns the value of the `id` field\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\t\n\t// Loads a 2D image from a file and generates a texture for it, using the GL_TEXTURE_2D format. It sets up the texture parameters and uploads the image data to the GPU.\n\tprivate static int loadTexture(String filename) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(filename));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\t\t\t\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\t\t\t\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\t\t\t\t\t\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha) {\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tbuffer.flip();\n\t\t\t\n\t\t\tint id = GL11.glGenTextures();\n\t\t\tGL11.glBindTexture(GL_TEXTURE_2D, id);\n\t\t\t\n\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL12.GL_REPEAT);\n\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL12.GL_REPEAT);\n\t\t\t\n\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n\t\t\tGL11.glTexImage2D(GL_TEXTURE_2D, 0, GL11.GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n}\n","description":"\nThe method getID is used as follows:\n"},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":80,"insert":75,"offset":"\t","indent":1,"comment":{"start":74,"end":79}},"item_type":"method","length":3,"docLength":5},{"id":"ad6abeb0-bf5a-8da0-6343-39bb9c9afd3b","ancestors":["d44b8967-c408-3fb1-ac4c-de035ead32a7"],"type":"function","description":"loads a 2D image from a file and creates a texture object in OpenGL, handling pixel data for RGBA8 format. It also generates mipmap if requested.","params":[{"name":"fileName","type_name":"String","description":"filename of the image to be loaded as a texture.","complex_type":false}],"returns":{"type_name":"int","description":"an integer ID representing a textured OpenGL resource.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":92,"insert":84,"offset":"\t","indent":1,"comment":{"start":83,"end":91}},"item_type":"method","length":49,"docLength":8}]}}}