{"name":"Util.java","path":"src/com/ch/Util.java","content":{"structured":{"description":"three methods for performing various data transformations:\n\n1. `removeEmptyStrings()` removes empty strings from a 2D array of strings, returning a new 1D array with non-empty strings.\n2. `toIntArray()` converts an `Integer[]` array to an `int[]` array, retaining the original values.\n3. `toFloatArray()` and `toIntArray()` convert lists of integers or floating-point numbers, respectively, into equivalent arrays of the same size, copying each value from the input list to the output array.","diagram":"digraph G {\n    label=\"com.ch.Util\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"0ce56027-afaa-8eaa-2747-4d2262d256a7","ancestors":[],"type":"function","description":"is a utility class that provides various methods for manipulating arrays and matrices in a 2D graphics library. The class offers methods to create and manipulate arrays of different data types, such as `FloatBuffer`, `Integer`, and `Matrix4f`. Additionally, it provides methods to remove empty strings from an array and convert between integer, float, and string arrays.","name":"Util","code":"public class Util {\n\t\n /**\n  * generates a `FloatBuffer` object of specified size, using the `BufferUtils` class.\n  * \n  * @param size capacity of the `FloatBuffer` to be created, which determines the\n  * number of elements that can be stored in the buffer.\n  * \n  * @returns a `FloatBuffer` object of the specified size, which can be used to store\n  * and manipulate floating-point data.\n  * \n  * \t- The returned buffer is of type `FloatBuffer`.\n  * \t- The size of the buffer is specified by the `size` parameter passed to the function.\n  * \t- The buffer contains a contiguous block of floating-point values with a specific\n  * size.\n  */\n\tpublic static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}\n\n /**\n  * creates an integer buffer with the specified size using `BufferUtils`. The returned\n  * buffer can be used for storing and manipulating integer values.\n  * \n  * @param size integer capacity of the IntBuffer created by the `createIntBuffer()`\n  * method.\n  * \n  * @returns an `IntBuffer` object of the specified size.\n  * \n  * \t- The IntBuffer object is created using the `BufferUtils` class.\n  * \t- The size parameter passed to the function determines the capacity of the buffer.\n  * \t- The returned IntBuffer has a fixed capacity and cannot be resized or modified\n  * once it is created.\n  * \t- The buffer can be accessed and manipulated using the standard methods provided\n  * by the `IntBuffer` interface.\n  */\n\tpublic static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}\n\n /**\n  * creates a new instance of `java.nio.Buffer` with the specified size.\n  * \n  * @param size buffer size, which is used to create a new ByteBuffer object with the\n  * specified capacity.\n  * \n  * @returns a non-null `ByteBuffer` instance with the specified size.\n  * \n  * \t- The function returns a `ByteBuffer` instance that represents a contiguous block\n  * of memory capable of holding binary data.\n  * \t- The size parameter specifies the capacity of the buffer, which determines how\n  * much data can be stored in it.\n  * \t- The buffer is created using `BufferUtils`, a utility class provided by the Java\n  * platform for working with buffers and other memory-related primitives.\n  */\n\tpublic static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}\n\n /**\n  * creates an `IntBuffer` from a list of integers, stores them in the buffer, and\n  * flips the buffer to create a new buffer with the values in the original order.\n  * \n  * @returns an IntBuffer containing the flipped values.\n  * \n  * \t- The function creates an `IntBuffer` object named `buffer`.\n  * \t- The `buffer` object is filled with the input array `values`.\n  * \t- The `buffer` object is flipped using the `flip()` method.\n  * \n  * The resulting `IntBuffer` object has the following properties:\n  * \n  * \t- It contains the same sequence of integers as the input array `values`.\n  * \t- It is in a flipped state, meaning that the order of the integers in the buffer\n  * is reversed compared to the original input array.\n  */\n\tpublic static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n /**\n  * creates a new FloatBuffer by copying the given array of floats into it, and then\n  * flipping the buffer for efficient access.\n  * \n  * @returns a flipped FloatBuffer containing the provided values.\n  * \n  * The function creates a new `FloatBuffer` object by calling the `createFloatBuffer`\n  * method and passing in the length of the input array as an argument.\n  * \n  * The `buffer.put(values)` statement copies the elements of the input array into the\n  * buffer, starting at the beginning of the buffer.\n  * \n  * The `buffer.flip()` statement flips the buffer, making its position pointer point\n  * to the end of the buffer instead of the beginning. This allows for efficient reading\n  * of the buffer's contents in a particular order.\n  * \n  * Overall, the `createFlippedBuffer` function creates a new `FloatBuffer` object\n  * that is initialized with the input array values and is flipped for efficient access.\n  */\n\tpublic static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Vertex[] vertices) {\n\t\tFloatBuffer buffer = createFloatBuffer(vertices.length * Vertex.SIZE);\n\n\t\tfor (int i = 0; i < vertices.length; i++) {\n\t\t\tbuffer.put(vertices[i].getPos().getX());\n\t\t\tbuffer.put(vertices[i].getPos().getY());\n\t\t\tbuffer.put(vertices[i].getPos().getZ());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getX());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getX());\n\t\t\tbuffer.put(vertices[i].getNormal().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getZ());\n\t\t\tbuffer.put(vertices[i].getTangent().getX());\n\t\t\tbuffer.put(vertices[i].getTangent().getY());\n\t\t\tbuffer.put(vertices[i].getTangent().getZ());\n\t\t}\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t*/\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Matrix4f value) {\n\t\tFloatBuffer buffer = createFloatBuffer(4 * 4);\n\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\tbuffer.put(value.get(i, j));\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n\tpublic static Matrix4f loatMat4(FloatBuffer vals) {\n\t\t\n//\t\tvals.flip();\n\t\t\n\t\tMatrix4f m = new Matrix4f();\n\t\t\n\t\tint index;\n\t\tfor (index = 0; index < 16; index++)\n\t\t\tm.set(index % 4, index / 4, vals.get());\n\t\t\n\t\treturn m;\n\t}\n*/\n /**\n  * filters a string array by removing any empty strings, resulting in a new array\n  * with non-empty strings.\n  * \n  * @param data 2D array of strings that needs to be processed and transformed into a\n  * new 1D array without empty strings.\n  * \n  * The method takes an array of `String`s as input, denoted by `data`.\n  * \n  * The type of `data` is not explicitly specified; however, considering the context\n  * of the code snippet, it can be inferred to be of type `String[]`.\n  * \n  * Within the function, `data` undergoes processing and its elements are filtered\n  * based on a predetermined condition - if the element is not an empty string.\n  * \n  * The filtered elements are then collected in an instance of `ArrayList`, denoted\n  * by `result`. The `ArrayList` is created with no arguments, indicating that it\n  * should be initialized with a default capacity.\n  * \n  * Subsequently, the elements of `result` are copied into an array of `String`s,\n  * denoted by `res`, using the `toArray()` method.\n  * \n  * The `res` array is returned as output from the function.\n  * \n  * @returns an array of non-empty strings.\n  */\n\tpublic static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}\n\n /**\n  * converts an `Integer[]` array to an `int[]` array, retaining the original values.\n  * \n  * @param data array of integers that is converted into an integer array by the function.\n  * \n  * \t- `Integer[] data`: This is an array of integers that represents the original\n  * data to be converted into an integer array.\n  * \t- `int[] result`: The resulting integer array that stores the converted values\n  * from `data`.\n  * \n  * @returns an integer array with the same length as the input `data` array, containing\n  * the original values of the elements.\n  */\n\tpublic static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n /**\n  * converts a list of integers to an integer array, creating a new array with the\n  * same size as the list and containing the corresponding integers from the list.\n  * \n  * @param data List of integers that are converted into an integer array by the\n  * `toIntArray()` method.\n  * \n  * 1/ `data` is a `List<Integer>` containing a collection of integers.\n  * 2/ The size of the list, denoted by `data.size()`, can be used to determine the\n  * number of elements in the list.\n  * 3/ Each element in the list can be accessed and retrieved using its index or\n  * position in the list, as denoted by `data.get(i)`.\n  * \n  * @returns an integer array of size equal to the number of elements in the input list.\n  */\n\tpublic static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n\t\n /**\n  * converts a `Float[]` array to an equivalent `float[]` array with the same length,\n  * copying each value from the input array to the output array.\n  * \n  * @param data Float array that is to be converted into a float array.\n  * \n  * \t- The type of `data` is `Float[]`, indicating that it is an array of floating-point\n  * numbers.\n  * \t- The length of `data` is specified by its `length` attribute, which is a valid\n  * integer value.\n  * \t- Each element in the array is represented by a separate `Float` object, which\n  * can be accessed and manipulated individually through the array's indices (zero-based).\n  * \n  * @returns an array of floating-point values equivalent to the input `data`.\n  */\n\tpublic static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n /**\n  * converts a list of floating-point numbers to an array of the same size, copying\n  * each number from the input list to the output array.\n  * \n  * @param data list of Float values that will be converted into an array of Floats\n  * by the function.\n  * \n  * \t- The input `data` is of type `List<Float>`, indicating that it is an array-like\n  * data structure containing floating-point numbers.\n  * \t- The size of `data` can be retrieved using its `size()` method, which returns\n  * the number of elements in the list.\n  * \t- Each element of `data` is accessed using its index, represented by the variable\n  * `i`, which ranges from 0 to `data.size() - 1`.\n  * \n  * @returns an array of `float` values containing the elements of the input `List<Float>`.\n  */\n\tpublic static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n}","location":{"start":18,"insert":11,"offset":" ","indent":0,"comment":{"start":10,"end":17}},"item_type":"class","length":294,"docLength":7},{"id":"1db2f530-8dfd-56a6-9047-e6b706766b40","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"creates a new float buffer instance using the `BufferUtils` class. The size parameter is used to determine the capacity of the buffer. The returned buffer can be used for storing and manipulating floating-point numbers.","params":[{"name":"size","type_name":"int","description":"number of floating-point values to be stored in the resulting `FloatBuffer`.","complex_type":false}],"returns":{"type_name":"FloatBuffer","description":"a FloatBuffer object representing a contiguous block of memory capable of storing floating-point data.\n\n* The `createFloatBuffer` function returns an object of type `FloatBuffer`. This means that it is a buffer that stores floating-point numbers.\n* The `size` parameter passed to the function determines the capacity of the buffer.\n* The buffer is created using the `BufferUtils` class, which provides utility methods for creating and manipulating buffers.","complex_type":true},"name":"createFloatBuffer","code":"public static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}","location":{"start":34,"insert":20,"offset":"\t","indent":1,"comment":{"start":19,"end":33}},"item_type":"method","length":3,"docLength":14},{"id":"f1a9b1a8-6f54-4896-9644-b120613e4e0a","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"creates an `IntBuffer` instance of a specified size, leveraging `BufferUtils` utility class.","params":[{"name":"size","type_name":"int","description":"amount of memory required to store an IntBuffer.","complex_type":false}],"returns":{"type_name":"IntBuffer","description":"an `IntBuffer` object that can be used to store and manipulate integer values.\n\nThe `IntBuffer` object created is an instance of BufferUtils' `createIntBuffer` method, which takes in the size of the buffer as its parameter.\n\nThe buffer is a direct view of the underlying memory, meaning it provides a fast and efficient way to access the data stored within it.\n\nThe buffer is also backed by a valid region of memory, ensuring that the data it contains is properly allocated and accessible.","complex_type":true},"name":"createIntBuffer","code":"public static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}","location":{"start":54,"insert":38,"offset":"\t","indent":1,"comment":{"start":37,"end":53}},"item_type":"method","length":3,"docLength":16},{"id":"321aaa63-439f-2898-5441-1d5293178941","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"creates a new byte buffer instance with the specified size.","params":[{"name":"size","type_name":"int","description":"desired capacity of the ByteBuffer to be created, which determines the amount of memory allocated for storing data.","complex_type":false}],"returns":{"type_name":"ByteBuffer","description":"a non-null `ByteBuffer` object with the specified size.\n\n* The `ByteBuffer` object represents a contiguous block of memory that can be accessed and manipulated as a sequence of bytes.\n* The size of the buffer is determined by the parameter `size`, which must be a positive integer.\n* The buffer is created using the `BufferUtils.createByteBuffer()` method, which allocates memory for the buffer and returns a pointer to the first byte in the buffer.","complex_type":true},"name":"createByteBuffer","code":"public static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}","location":{"start":73,"insert":58,"offset":"\t","indent":1,"comment":{"start":57,"end":72}},"item_type":"method","length":3,"docLength":15},{"id":"c27d4119-be02-b399-c74d-e1871969c8dd","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"creates an `IntBuffer` object from a collection of integers and flips it to create a view of the buffer that can be used for efficient random access operations.","params":[],"returns":{"type_name":"IntBuffer","description":"an `IntBuffer` object that contains the provided values flipped from a non-flip to a flip state.\n\n* The `IntBuffer` object is generated by putting the input `values` array into an IntBuffer using the `put()` method.\n* The `flip()` method is called on the buffer to flip it, making its data accessible for reading from the end of the buffer towards the beginning.\n* The returned buffer is a flipped IntBuffer, which means that the data can be read from the end of the buffer towards the beginning.","complex_type":true},"name":"createFlippedBuffer","code":"public static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":93,"insert":77,"offset":"\t","indent":1,"comment":{"start":76,"end":92}},"item_type":"method","length":7,"docLength":16},{"id":"50e8acf1-f506-9ea3-d74a-4ca2f4413863","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"creates a new FloatBuffer by copying the provided array of floats, then flips the buffer to enable random access. It returns the newly created buffer.","params":[],"returns":{"type_name":"FloatBuffer","description":"a flipped `FloatBuffer` containing the input `float` values.\n\nThe `FloatBuffer` object returned by the function is flipped, meaning that its position points to the last element stored in the buffer.\n\nThe buffer's capacity is equal to the number of `float` values passed as arguments to the function.\n\nThe buffer's status is set to `flipped`, indicating that it contains a subset of the input data that has been rearranged for efficient access.","complex_type":true},"name":"createFlippedBuffer","code":"public static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":120,"insert":101,"offset":"\t","indent":1,"comment":{"start":100,"end":119}},"item_type":"method","length":7,"docLength":19},{"id":"82310e33-8bb1-009f-1944-431c307f3de9","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"removes empty strings from an array of strings and returns a new array with only non-empty strings.","params":[{"name":"data","type_name":"String[]","description":"array of strings that is to be filtered for empty strings and returned as an array of non-empty strings.\n\n* Length: The method takes an array of strings as input, represented by the variable `data`.\n* Elements: Each element in the input array is a string object.\n* Empty strings: The function checks each element for emptiness using the `equals()` method and removes any empty strings from the array.\n* ArrayList: After removing empty strings, the function creates an ArrayList to store the non-empty elements.\n* Size: The size of the ArrayList is calculated after adding all non-empty elements.\n* Array creation: A new array is created to store the non-empty elements in the ArrayList.","complex_type":true}],"returns":{"type_name":"String","description":"a new array of non-empty strings containing the elements from the original input array.","complex_type":false},"name":"removeEmptyStrings","code":"public static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}","location":{"start":204,"insert":178,"offset":"\t","indent":1,"comment":{"start":177,"end":203}},"item_type":"method","length":12,"docLength":26},{"id":"5dc3600a-08eb-5baf-2646-72c784b467fc","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"transforms an array of integers into an integer array with the same length, by simply copying the elements from the original array to the new one.","params":[{"name":"data","type_name":"Integer[]","description":"0-based integer array that is converted to an integer array of the same length by copying each element.\n\n* It is an array of integers, denoted by `[data.length]`.\n* It has a zero-based index, meaning that the first element in the array is at index 0.\n* Each element in the array is an integer value, represented as a primitive type `Integer`.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array with the same length as the input `data` array, containing the corresponding integer values.","complex_type":false},"name":"toIntArray","code":"public static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":230,"insert":217,"offset":"\t","indent":1,"comment":{"start":216,"end":229}},"item_type":"method","length":8,"docLength":13},{"id":"7c125b70-347d-85ab-0945-3a211f4134dd","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"converts a list of integers to an integer array with the same size as the list. It uses a loop to copy each element from the list to the corresponding position in the array.","params":[{"name":"data","type_name":"List<Integer>","description":"List of integers that will be converted to an integer array by the `toIntArray()` method.\n\n1. The `List<Integer>` type indicates that `data` is a collection of integers.\n2. The size of `data` can be retrieved using the `size()` method.\n3. The `get()` method is used to access individual elements of `data`.\n4. The `int[]` type of the returned value indicates that the function will return an array of integers.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array containing the elements of the input list.","complex_type":false},"name":"toIntArray","code":"public static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":254,"insert":239,"offset":"\t","indent":1,"comment":{"start":238,"end":253}},"item_type":"method","length":8,"docLength":15},{"id":"4f9e5892-1a39-0195-3a4a-74fcf651af0a","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"converts a `Float` array to an equivalent `float[]` array, copying each element from the input array to the output array.","params":[{"name":"data","type_name":"Float[]","description":"Float array to be converted into a float array.\n\n* `data` is an array of `Float`.\n* Its length is defined by an integer variable `data.length`.\n* Each element in the array is accessed using the index number `i` from 0 to `data.length - 1`.\n\nThe function then returns a new array of `float` with the same elements as `data`.","complex_type":true}],"returns":{"type_name":"float","description":"a new float array with the same elements as the input `data` array.","complex_type":false},"name":"toFloatArray","code":"public static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":278,"insert":263,"offset":"\t","indent":1,"comment":{"start":262,"end":277}},"item_type":"method","length":8,"docLength":15},{"id":"242b39a5-82f0-af90-0b44-1c2257540073","ancestors":["0ce56027-afaa-8eaa-2747-4d2262d256a7"],"type":"function","description":"takes a list of `Float` objects and returns an array of the same size containing the corresponding values.","params":[{"name":"data","type_name":"List<Float>","description":"List of Float values that are to be converted into an array of float values.\n\n* `List<Float>` represents an array-like data structure that stores floating-point numbers.\n* `size()` returns the number of elements in the list.\n* `get(i)` retrieves the `i`-th element from the list and assigns it to the corresponding index in the output array.","complex_type":true}],"returns":{"type_name":"float","description":"a float array containing the values of the input list.","complex_type":false},"name":"toFloatArray","code":"public static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":303,"insert":287,"offset":"\t","indent":1,"comment":{"start":286,"end":302}},"item_type":"method","length":8,"docLength":16}]}}}