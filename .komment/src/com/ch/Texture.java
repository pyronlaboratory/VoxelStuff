{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A `Texture` class that manages textures for an OpenGL application. It provides a constructor to load a texture from a file and bind it to a specific texture slot using the `glBindTexture()` method. The `bind()` method is used to bind the texture to the current active texture, while the `getID()` method returns the ID of the bound texture. The code also includes a `loadTexture()` method that loads a texture from a file and returns its ID for binding.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n","items":[{"id":"13d4862a-daf5-3785-f244-90deef813fb1","ancestors":[],"type":"function","description":"is a Java class for managing textures in OpenGL. It provides a simple way to load and bind textures, as well as getting the ID of the texture after loading it. The loadTexture method takes a file path as an argument and returns the ID of the loaded texture.","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":29,"insert":29,"offset":" ","indent":0,"comment":null},"item_type":"class","length":75,"docLength":null},{"id":"7a2c5585-33fb-5cb0-8d48-180b47afbe5d","ancestors":["13d4862a-daf5-3785-f244-90deef813fb1"],"type":"function","description":"0 invokes the binding operation at index 0 of a data structure.","params":[],"usage":{"language":"java","code":"public void bind() {\n\t\tbind(0);\n\t}\n","description":"\nIn this example, the method bind is being called with no arguments. This means that it will use a default sampler slot of 0. The method will then bind the texture to that slot using glActiveTexture and glBindTexture."},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":40,"insert":40,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"f239bb8c-0260-51a5-a846-02d83908e503","ancestors":["13d4862a-daf5-3785-f244-90deef813fb1"],"type":"function","description":"sets the active texture slot to a specified index (samplerSlot) and binds a texture to that slot using the `glBindTexture()` method. The function checks that the input samplerSlot is within the valid range of 0 to 31 before executing the binding operation.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot in the current active texture unit, with values ranging from 0 to 31.","complex_type":false}],"usage":{"language":"java","code":"public void draw(){\n\t//...\n\ttexture.bind(0);\n\t//...\n}\n","description":""},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":44,"insert":44,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"7d02f7a4-23b8-59a3-2a41-54fb40658a85","ancestors":["13d4862a-daf5-3785-f244-90deef813fb1"],"type":"function","description":"returns the `id` field's value.","params":[],"returns":{"type_name":"int","description":"an integer value representing the ID.","complex_type":false},"usage":{"language":"java","code":"Texture myTexture = new Texture(\"some_image.png\");\nint texId = myTexture.getID();\n","description":"\nThis example creates a new texture object with the file \"some_image.png\" and gets the ID of that texture. The ID can then be used to bind the texture in OpenGL."},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":50,"insert":50,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"fdf187fc-afcb-94a1-284b-6cb835bbd0a4","ancestors":["13d4862a-daf5-3785-f244-90deef813fb1"],"type":"function","description":"loads a texture image from a file, converts it to an OpenGL texture, and returns the ID of the created texture.","params":[{"name":"fileName","type_name":"String","description":"name of the texture file to be loaded and read.","complex_type":false}],"returns":{"type_name":"int","description":"an integer ID representing a loaded texture.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":54,"insert":54,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":48,"docLength":null}]}}}