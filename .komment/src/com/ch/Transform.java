{"name":"Transform.java","path":"src/com/ch/Transform.java","content":{"structured":{"description":"A `GameObject` class that represents a 3D game object with position, rotation, and scale properties. The class provides methods for setting and getting these properties, as well as performing basic arithmetic operations on them. Additionally, it includes an `toString()` method for converting the object to a string representation. Overall, the code defines a basic framework for creating and manipulating 3D game objects in a Java environment.","diagram":"digraph G {\n    label=\"com.ch.Transform\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"math\"\n        color=\"#33363A\"\n        Quaternion\n        Matrix4f\n        Vector3f\n    }\n    Camera\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Transform [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    Vector3f -> Transform \n    Transform -> Transform \n    Camera -> Transform \n    Quaternion -> Transform \n    Transform -> Quaternion \n    Transform -> Matrix4f \n}\n","items":[{"id":"dc8476c6-b0b9-79b9-3a4c-bb8907417455","ancestors":[],"type":"function","description":"is a Java class that represents a 3D transformable game object. It has several fields and methods to manage the object's position, rotation, and scale. The class provides getters and setters for each of these properties, as well as additional methods for adding vectors to the position, rotating the object around a specified axis, and scaling the object by a specified factor.","name":"Transform","code":"public class Transform {\n\n\tprivate Transform parent;\n\tprivate Matrix4f parentMatrix;\n\n\tprivate Vector3f pos;\n\tprivate Quaternion rot;\n\tprivate Vector3f scale;\n\n\tprivate Vector3f oldPos;\n\tprivate Quaternion oldRot;\n\tprivate Vector3f oldScale;\n\n\tpublic Transform() {\n\t\tpos = new Vector3f(0, 0, 0);\n\t\trot = new Quaternion(1, 0, 0, 0);\n\t\tscale = new Vector3f(1, 1, 1);\n\t\t\n\t\toldPos = new Vector3f(0, 0, 0);\n\t\toldRot = new Quaternion(1, 0, 0, 0);\n\t\toldScale = new Vector3f(1, 1, 1);\n\n\t\tparentMatrix = new Matrix4f().initIdentity();\n\t}\n\n\t/**\n\t * updates an object's position, rotation, and scale based on the current values and\n\t * stores the previous values for future use.\n\t */\n\tpublic void update() {\n\t\tif (oldPos != null) {\n\t\t\tif (!oldPos.equals(pos))\n\t\t\t\toldPos.set(pos);\n\t\t\tif (!oldRot.equals(rot))\n\t\t\t\toldRot.set(rot);\n\t\t\tif (!oldScale.equals(scale))\n\t\t\t\toldScale.set(scale);\n\t\t} else {\n\t\t\toldPos = new Vector3f().set(pos);\n\t\t\toldRot = new Quaternion().set(rot);\n\t\t\toldScale = new Vector3f().set(scale);\n\t\t}\n\t}\n\n\t/**\n\t * rotates a vector representing a 3D object by an angle around a specified axis,\n\t * resulting in a new rotated vector.\n\t * \n\t * @param axis 3D rotational axis around which the rotation will occur.\n\t * \n\t * \t- `axis` is a `Vector3f` representing a 3D vector.\n\t * \t- It has three components: x, y, and z, which correspond to the axis of rotation.\n\t * \t- The value of each component can range from -1 to 1, indicating the magnitude\n\t * of the rotation around that axis.\n\t * \t- The orientation of the axis is unchanged during the rotation process.\n\t * \n\t * @param angle 3D rotation angle around the specified `axis`.\n\t */\n\tpublic void rotate(Vector3f axis, float angle) {\n\t\trot = new Quaternion(axis, angle).mul(rot).normalized();\n\t}\n\n\t/**\n\t * computes and returns a rotation matrix that aligns a provided `point` vector with\n\t * a `up` vector, relative to a reference frame.\n\t * \n\t * @param point 3D position that the entity should look at.\n\t * \n\t * \t- `point`: A `Vector3f` object representing a 3D point in space. It has three\n\t * attributes: `x`, `y`, and `z`, which represent the coordinates of the point in the\n\t * x, y, and z axes, respectively.\n\t * \n\t * @param up 3D direction towards which the camera should look when rotating its\n\t * orientation to face the specified `point`.\n\t * \n\t * \t- `up` is a `Vector3f` object representing an upward direction.\n\t * \t- It has three components: `x`, `y`, and `z`, which represent the coordinates of\n\t * the upward direction in the 3D space.\n\t */\n\tpublic void lookAt(Vector3f point, Vector3f up) {\n\t\trot = getLookAtRotation(point, up);\n\t}\n\n\t/**\n\t * computes a quaternion representing the rotation needed to look at a given point\n\t * from a specified up direction.\n\t * \n\t * @param point 3D position that the look-at rotation is based on.\n\t * \n\t * \t- `point`: A 3D vector representing a point in space, with x, y, and z components.\n\t * \t- `up`: A 3D vector representing a direction perpendicular to the plane of the\n\t * point, with x, y, and z components.\n\t * \n\t * @param up 3D direction of the look-at axis, which is used to compute the rotation\n\t * quaternion that looks at the specified point from the current position.\n\t * \n\t * \t- `point`: A Vector3f object representing the point in 3D space where the camera\n\t * is looking.\n\t * \t- `up`: A Vector3f object representing the up direction in 3D space, which is\n\t * used to determine the rotation of the camera.\n\t * \n\t * @returns a quaternion representing the rotation required to look at a given point\n\t * from a specified up direction.\n\t * \n\t * \t- The return value is a `Quaternion` object that represents the rotation from the\n\t * camera's current position to look at a point in 3D space.\n\t * \t- The quaternion is generated using the rotation matrix computed by multiplying\n\t * the `Matrix4f` class's `initRotation` method with the input vectors representing\n\t * the point and up direction.\n\t * \t- The resulting quaternion represents the rotation around the camera's center,\n\t * with the look-at point as the origin of the rotation.\n\t */\n\tpublic Quaternion getLookAtRotation(Vector3f point, Vector3f up) {\n\t\treturn new Quaternion(new Matrix4f().initRotation(point.sub(pos).normalized(), up));\n\t}\n\n\t/**\n\t * checks if any of the object's properties have changed. It compares the current\n\t * values of `parent`, `pos`, `rot`, and `scale` to their previous values, returning\n\t * `true` if any have changed and `false` otherwise.\n\t * \n\t * @returns a boolean value indicating whether any of the object's properties have changed.\n\t */\n\tpublic boolean hasChanged() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\treturn true;\n\n\t\tif (!pos.equals(oldPos))\n\t\t\treturn true;\n\n\t\tif (!rot.equals(oldRot))\n\t\t\treturn true;\n\n\t\tif (!scale.equals(oldScale))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * computes a transformation matrix by combining a translation, rotation, and scaling\n\t * matrix, and then multiplies it with the parent matrix.\n\t * \n\t * @returns a transformation matrix that combines a translation, rotation, and scaling\n\t * operation.\n\t * \n\t * The output is a `Matrix4f` object, representing a 4x4 homogeneous transformation\n\t * matrix.\n\t * The matrix is created by multiplying the parent matrix (representing the overall\n\t * transformation), with the translation, rotation, and scale matrices in that order.\n\t * The translation matrix represents the offset of the object in 3D space, while the\n\t * rotation matrix represents the orientation of the object around its center. The\n\t * scale matrix represents the size and shape of the object in 3D space.\n\t * By multiplying these matrices together, the `getTransformation` function generates\n\t * a transformation matrix that can be used to transform 3D points, vectors, or other\n\t * objects in the scene.\n\t */\n\tpublic Matrix4f getTransformation() {\n\t\tMatrix4f translationMatrix = new Matrix4f().initTranslation(pos.getX(), pos.getY(), pos.getZ());\n\t\tMatrix4f rotationMatrix = rot.toRotationMatrix();\n\t\tMatrix4f scaleMatrix = new Matrix4f().initScale(scale.getX(), scale.getY(), scale.getZ());\n\n\t\treturn getParentMatrix().mul(translationMatrix.mul(rotationMatrix.mul(scaleMatrix)));\n\t}\n\n\t/**\n\t * returns the transformation matrix of its parent node in a hierarchical tree\n\t * structure, based on the `parent` field and the `hasChanged()` method.\n\t * \n\t * @returns a Matrix4f object representing the parent transformation matrix.\n\t * \n\t * \t- `parentMatrix`: A Matrix4f object representing the parent transformation matrix.\n\t * This matrix contains the transformation from the parent's local coordinate system\n\t * to the world coordinate system.\n\t * \t- `hasChanged()`: A boolean method that checks if the parent's transformation has\n\t * changed since the last call to this function. If `hasChanged()` returns true, then\n\t * the `parentMatrix` is updated with the latest transformation.\n\t */\n\tprivate Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}\n\n\t/**\n\t * sets the parent transform of an object, allowing for hierarchical manipulation of\n\t * transformations.\n\t * \n\t * @param parent transformation to which the current transformation will be added as\n\t * a child transformation.\n\t * \n\t * \t- `parent`: It is a transform object that represents the parent object for this\n\t * object.\n\t * \n\t * Note: The response is limited to 4 sentences and does not include any personal\n\t * statements or first-person language, as requested.\n\t */\n\tpublic void setParent(Transform parent) {\n\t\tthis.parent = parent;\n\t}\n\n\t/**\n\t * transforms a `Vector3f` object using the matrix provided by the `getParentMatrix`\n\t * function, returning the transformed position.\n\t * \n\t * @returns a transformed position vector.\n\t * \n\t * The Vector3f object returned by this method represents the transformed position\n\t * of an object in a 3D space, taking into account the transformation matrix provided\n\t * by the parent matrix.\n\t * \n\t * The vector's components represent the x, y, and z positions of the transformed\n\t * position in the local coordinate system of the parent matrix.\n\t */\n\tpublic Vector3f getTransformedPos() {\n\t\treturn getParentMatrix().transform(pos);\n\t}\n\n\t/**\n\t * takes a `Quaternion` object `parentRotation` and multiplies it by another `Quaternion`\n\t * object `rot`, returning the transformed rotation.\n\t * \n\t * @returns a transformed quaternion representing the composition of the rotation\n\t * represented by `rot` and the rotation of the parent object.\n\t * \n\t * 1/ The `Quaternion` object represents the transformed rotation from the parent\n\t * rotation to the current rotation.\n\t * 2/ The first component of the Quaternion represents the angle of rotation around\n\t * the x-axis, while the second and third components represent the angle of rotation\n\t * around the y- and z-axes, respectively.\n\t * 3/ The fourth component is set to 0, indicating that the rotation is around the\n\t * origin (0, 0, 0).\n\t * 4/ The Quaternion object is created by multiplying the parent rotation with the\n\t * current rotation, as denoted by the `mul` method. This operation combines the\n\t * rotations element-wise, resulting in a new rotation matrix.\n\t */\n\tpublic Quaternion getTransformedRot() {\n\t\tQuaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n\t\tif (parent != null)\n\t\t\tparentRotation = parent.getTransformedRot();\n\n\t\treturn parentRotation.mul(rot);\n\t}\n\n\t/**\n\t * returns a reference to a `Vector3f` object representing the position of an entity.\n\t * \n\t * @returns a reference to a `Vector3f` object containing the position of the entity.\n\t * \n\t * \t- `pos`: A `Vector3f` object that represents the position of the entity in 3D\n\t * space. It has three components: x, y, and z, which correspond to the position of\n\t * the entity along the x, y, and z axes, respectively.\n\t */\n\tpublic Vector3f getPos() {\n\t\treturn pos;\n\t}\n\n\t/**\n\t * sets the position of an object to a specified value, where the position is represented\n\t * as a Vector3f object.\n\t * \n\t * @param pos 3D position of an object or entity that the function is called on, and\n\t * it assigns that position to the `pos` field of the function's caller.\n\t * \n\t * \t- `this.pos`: The current position of the object is assigned to the member variable\n\t * `pos`.\n\t * \t- `Vector3f`: The data type of the `pos` field.\n\t */\n\tpublic void setPos(Vector3f pos) {\n\t\tthis.pos = pos;\n\t}\n\n\t/**\n\t * adds a vector to the position of an object, updating its new position based on the\n\t * addition.\n\t * \n\t * @param addVec 3D vector to be added to the current position of the object.\n\t * \n\t * \t- `Vector3f`: Represents a 3D vector in homogeneous coordinates.\n\t * \t- `setPos`: A setter method that modifies the position component of the current\n\t * object instance.\n\t * \t- `getPos`: An getter method that returns the current position component of the\n\t * object instance.\n\t * \t- `add`: The `add` method takes another vector as input and adds its components\n\t * to the existing components of the current vector, resulting in a new vector with\n\t * the updated components.\n\t */\n\tpublic void addToPos(Vector3f addVec) { this.setPos(this.getPos().add(addVec)); }\n\n\t/**\n\t * returns a `Quaternion` object representing the rotation of an entity.\n\t * \n\t * @returns a `Quaternion` object representing the rotation of the game object.\n\t * \n\t * \t- The `rot` field is a Quaternion object that represents the rotation of the game\n\t * object.\n\t * \t- It contains the rotation values in a specific format that can be used to apply\n\t * the rotation to an object in a 3D space.\n\t * \t- The Quaternion class has several properties, such as `x`, `y`, `z`, and `w`,\n\t * which represent the real and imaginary parts of the quaternion.\n\t * \t- These properties can be accessed and modified through the use of method calls,\n\t * allowing for precise control over the rotation values.\n\t */\n\tpublic Quaternion getRot() {\n\t\treturn rot;\n\t}\n\n\t/**\n\t * sets the rotation of an object represented by the `rotation` parameter to the\n\t * object itself.\n\t * \n\t * @param rotation 4D quaternion value that updates the rotation of the object.\n\t * \n\t * \t- `Quaternion rotation`: This is an object of type `Quaternion`, which represents\n\t * a 4D vector that can be used to represent rotations in 3D space. It has several\n\t * attributes, including `x`, `y`, `z`, and `w`, which correspond to the four components\n\t * of the quaternion.\n\t * \t- `this.rot`: This refers to the current value of the `rot` field within the\n\t * context of the function. The field is a `Quaternion` object that represents the\n\t * rotation of the object being manipulated by the function.\n\t */\n\tpublic void setRot(Quaternion rotation) {\n\t\tthis.rot = rotation;\n\t}\n\n\t/**\n\t * returns the current value of the `scale` field, which represents a vector of three\n\t * floating-point numbers that represent the object's size in the x, y, and z directions.\n\t * \n\t * @returns a `Vector3f` object containing the scale value.\n\t * \n\t * \t- `scale`: A `Vector3f` object representing the scale of the game object.\n\t * \t+ It has three components: x, y, and z, which represent the scale along the x,\n\t * y, and z axes, respectively.\n\t */\n\tpublic Vector3f getScale() {\n\t\treturn scale;\n\t}\n\n\t/**\n\t * sets the scaling factor for an object, updating its `scale` field with the provided\n\t * value.\n\t * \n\t * @param scale 3D scaling factor for the object, which is applied to its position,\n\t * size, and orientation.\n\t * \n\t * \t- `this.scale = scale;` sets the scale factor for this object.\n\t * \t- `scale` is a `Vector3f` instance that holds the scale values for each dimension\n\t * (x, y, and z).\n\t */\n\tpublic void setScale(Vector3f scale) {\n\t\tthis.scale = scale;\n\t}\n\t\n\t/**\n\t * returns an empty string.\n\t * \n\t * @returns an empty string.\n\t * \n\t * \t- The function returns a string value empty of any content.\n\t * \t- The return type is specified as String, indicating that the function will always\n\t * return a string value.\n\t * \t- The function name 'toString' suggests that it is designed to provide a concise\n\t * representation of its input, typically for debugging or serialization purposes.\n\t */\n\t@Override\n\tpublic String toString() { return \"\";\n\t}\n\n}","location":{"start":14,"insert":7,"offset":" ","indent":0,"comment":{"start":6,"end":13}},"item_type":"class","length":372,"docLength":7},{"id":"e69feb59-fecc-1d82-a843-e17338fbbac3","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"updates the values of the `pos`, `rot`, and `scale` fields of an object based on the current values of those fields and any changes made to them since the last update.","params":[],"usage":{"language":"java","code":"public void update() {\n    if (oldPos != null) {\n        if (!oldPos.equals(pos))\n            oldPos.set(pos);\n        if (!oldRot.equals(rot))\n            oldRot.set(rot);\n        if (!oldScale.equals(scale))\n            oldScale.set(scale);\n    } else {\n        oldPos = new Vector3f().set(pos);\n        oldRot = new Quaternion().set(rot);\n        oldScale = new Vector3f().set(scale);\n    }\n}\n","description":"\nThis code would be used to update the position, rotation and scale of an object in a game. The update method will keep track of the last position, rotation and scale of the object so that it can be updated accordingly."},"name":"update","code":"public void update() {\n\t\tif (oldPos != null) {\n\t\t\tif (!oldPos.equals(pos))\n\t\t\t\toldPos.set(pos);\n\t\t\tif (!oldRot.equals(rot))\n\t\t\t\toldRot.set(rot);\n\t\t\tif (!oldScale.equals(scale))\n\t\t\t\toldScale.set(scale);\n\t\t} else {\n\t\t\toldPos = new Vector3f().set(pos);\n\t\t\toldRot = new Quaternion().set(rot);\n\t\t\toldScale = new Vector3f().set(scale);\n\t\t}\n\t}","location":{"start":43,"insert":39,"offset":"\t","indent":1,"comment":{"start":38,"end":42}},"item_type":"method","length":14,"docLength":4},{"id":"a0f4c66d-eaff-ada0-8e4d-72e6153e146a","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"rotates a vector by an angle around a specified axis, resulting in a normalized quaternion representation of the rotation.","params":[{"name":"axis","type_name":"Vector3f","description":"3D vector that defines the rotation axis for the transformation.\n\n* `axis`: A `Vector3f` object representing the rotation axis. It has three components: x, y, and z, which represent the coordinates of the rotation axis in 3D space.\n* `angle`: An `float` value representing the angle of rotation around the `axis`.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle about the specified `axis` direction.","complex_type":false}],"usage":{"language":"java","code":"Vector3f axis = new Vector3f(1, 0, 0);\nGameObject gameObject = new GameObject();\ngameObject.rotate(axis, 45f);\n","description":"\nThis code creates a new object with default values for the position and rotation fields, sets its rotation to be a 90-degree rotation around the x-axis (given by the `Vector3f` axis), and then uses the rotate method on that object to apply this rotation. The result of this operation is that the object will have rotated by 45 degrees about the x-axis, leaving its position unchanged.\n\nIt's worth noting that in order for the rotate method to be useful for a game, it would need to take into account the previous rotation as well as the new axis and angle, in order to build upon the current state of the object."},"name":"rotate","code":"public void rotate(Vector3f axis, float angle) {\n\t\trot = new Quaternion(axis, angle).mul(rot).normalized();\n\t}","location":{"start":72,"insert":58,"offset":"\t","indent":1,"comment":{"start":57,"end":71}},"item_type":"method","length":3,"docLength":14},{"id":"8231bdc2-bf4f-e2b1-d94b-1f06f418adb1","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"computes the rotation required to face a given point while maintaining a fixed orientation with respect to the up vector.","params":[{"name":"point","type_name":"Vector3f","description":"3D position that the object should look at.\n\n* `point`: A 3D vector representing the point to look at.\n* `up`: A 3D vector representing the direction of the \"up\" axis in the local coordinate system.","complex_type":true},{"name":"up","type_name":"Vector3f","description":"3D direction that the look-at rotation should be applied to, relative to the current orientation of the entity.\n\n* `up` is a vector with three elements representing the direction of the upward vector in 3D space.","complex_type":true}],"usage":{"language":"java","code":"// Set the camera to look at the position (x, y, z) with up vector (u1, u2, u3).\ncamera.lookAt(new Vector3f(x, y, z), new Vector3f(u1, u2, u3));\n","description":"\nThis will set the camera's rotation to face the position (x, y, z) with up vector (u1, u2, u3)."},"name":"lookAt","code":"public void lookAt(Vector3f point, Vector3f up) {\n\t\trot = getLookAtRotation(point, up);\n\t}","location":{"start":93,"insert":76,"offset":"\t","indent":1,"comment":{"start":75,"end":92}},"item_type":"method","length":3,"docLength":17},{"id":"41958f7b-1210-9880-db4b-962d832470ac","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"computes a quaternion representation of the rotation from the point of interest (`point`) to the camera's position (`pos`) and then rotates it by the upward vector (`up`).","params":[{"name":"point","type_name":"Vector3f","description":"3D position from which to compute the look-at rotation.\n\n* `point`: A `Vector3f` object representing the position in 3D space.\n* `up`: A `Vector3f` object representing the up direction in 3D space.","complex_type":true},{"name":"up","type_name":"Vector3f","description":"3D vector that defines the direction of the look-at rotation, which is used to calculate the rotation quaternion.\n\n* `up` is a `Vector3f` object representing an arbitrary vector in 3D space.\n* `up` has three components (x, y, z) that define its direction in 3D space.","complex_type":true}],"returns":{"type_name":"Quaternion","description":"a Quaternion representation of the rotation required to face the provided point while looking along the specified up direction.\n\n* The `Quaternion` object represents a rotation that is applied to a vector, which in this case is the input point minus the position vector.\n* The `Matrix4f` object used for initialization contains the rotation matrix that corresponds to the angle and axis of the look-at rotation.\n* The `up` parameter provides the direction of the up vector in the world frame, which is used as a reference for the look-at rotation.","complex_type":true},"usage":{"language":"java","code":"// Example input values for point and up variables\nVector3f point = new Vector3f(1, 2, 3);\nVector3f up = new Vector3f(0, 1, 0);\n\n// Creating a new Quaternion object using the getLookAtRotation method with the point and up inputs.\nQuaternion rotation = this.getLookAtRotation(point, up);\n","description":"\nThe example input values for point and up are set to (1, 2, 3) and (0, 1, 0) respectively. These values would be used as the input parameters for the getLookAtRotation method, which creates a new Quaternion object using the initRotation method of the Matrix4f class and returns it.\n\nThe getLookAtRotation method is called on an entity that has already been initialized with position (x, y, z), this.getPos(). The method then calculates the rotation needed to look at a point in 3D space from its current position using the initRotation method of the Matrix4f class and returns it as a Quaternion object."},"name":"getLookAtRotation","code":"public Quaternion getLookAtRotation(Vector3f point, Vector3f up) {\n\t\treturn new Quaternion(new Matrix4f().initRotation(point.sub(pos).normalized(), up));\n\t}","location":{"start":126,"insert":97,"offset":"\t","indent":1,"comment":{"start":96,"end":125}},"item_type":"method","length":3,"docLength":29},{"id":"d2ea35bf-db3d-b1a8-6c4f-674ef0d19d47","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"evaluates whether an object's properties have changed by comparing them to their previous values. If any property has changed, the function returns `true`. Otherwise, it returns `false`.","params":[],"returns":{"type_name":"boolean","description":"a boolean value indicating whether any of the object's properties have changed.","complex_type":false},"usage":{"language":"java","code":"public boolean hasChanged() {\n    if (parent != null && parent.hasChanged()) return true;\n\n    if (!pos.equals(oldPos)) return true;\n\n    if (!rot.equals(oldRot)) return true;\n\n    if (!scale.equals(oldScale)) return true;\n\n    return false;\n}\n","description":"\nExplanation:\n\n1. The method first checks if the parent entity has changed (using recursion). If it has, the current entity is also considered to have changed and the function returns `true`.\n2. Next, the method checks if any of the position (`pos`), rotation (`rot`), or scale (`scale`) components are not equal to their previous values (`oldPos`, `oldRot`, and `oldScale`). If they are different, it means that the current entity has been changed and the function returns `true`.\n3. Finally, the method checks if there is no change in any of the position, rotation, or scale components. In this case, the function returns `false`, indicating that the entity has not been changed.\n\nNote: The old values of the position (`oldPos`), rotation (`oldRot`), and scale (`oldScale`) are set using the appropriate setter methods (e.g., `setPos()`, `setRot()`, and `setScale()`) before calling the `hasChanged()` method."},"name":"hasChanged","code":"public boolean hasChanged() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\treturn true;\n\n\t\tif (!pos.equals(oldPos))\n\t\t\treturn true;\n\n\t\tif (!rot.equals(oldRot))\n\t\t\treturn true;\n\n\t\tif (!scale.equals(oldScale))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}","location":{"start":137,"insert":130,"offset":"\t","indent":1,"comment":{"start":129,"end":136}},"item_type":"method","length":15,"docLength":7},{"id":"db308fb0-465d-f3a6-cf4f-ee83a135f16f","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"computes a transformation matrix based on the position, rotation, and scale of an object, and returns it as a `Matrix4f` instance.","params":[],"returns":{"type_name":"Matrix4f","description":"a transformed matrix representing a combination of translation, rotation, and scaling.\n\nThe return value is a `Matrix4f` object representing a transformation matrix.\nIt is obtained by multiplying the parent matrix (representing the overall transformation), with the translation, rotation, and scaling matrices in the correct order.\nThe translation matrix represents the offset of the object from its initial position, while the rotation matrix represents the angle and axis of rotation around which the object is rotated.\nThe scaling matrix represents the size and orientation of the object in the x, y, and z directions.","complex_type":true},"usage":{"language":"java","code":"Entity entity = new Entity();\nentity.setPos(new Vector3f(1, 2, 3));\nentity.setRot(new Quaternion());\nentity.setScale(new Vector3f(4, 5, 6));\n\nMatrix4f transformationMatrix = entity.getTransformation();\n","description":"\nIn this example, the method is called on an object of type Entity, which has fields for position, rotation, and scale. The method returns a 4x4 transformation matrix that can be used to apply the transformations to an object in a 3D space. In this case, the transformation matrix is applied to an empty object, resulting in no change in its position or orientation.\n\nIt is important to note that this example uses the default values for the position, rotation, and scale fields of the Entity class. If these fields are initialized with specific values, the transformation matrix will represent a different transformation. Additionally, this example does not take into account any parent transformations that may be applied to the entity's transformation matrix.\n\nIt is also worth noting that this example does not demonstrate the use of a parent matrix in the context of an Entity object. The parent matrix is a component of the transformation matrix that represents the combined transformation of all ancestor objects in the scene graph, which may include other entities, groups, and transformations. If an entity has a parent matrix applied to its transformation, it will be represented by the product of its parent matrix and its own transformation matrix."},"name":"getTransformation","code":"public Matrix4f getTransformation() {\n\t\tMatrix4f translationMatrix = new Matrix4f().initTranslation(pos.getX(), pos.getY(), pos.getZ());\n\t\tMatrix4f rotationMatrix = rot.toRotationMatrix();\n\t\tMatrix4f scaleMatrix = new Matrix4f().initScale(scale.getX(), scale.getY(), scale.getZ());\n\n\t\treturn getParentMatrix().mul(translationMatrix.mul(rotationMatrix.mul(scaleMatrix)));\n\t}","location":{"start":171,"insert":153,"offset":"\t","indent":1,"comment":{"start":152,"end":170}},"item_type":"method","length":7,"docLength":18},{"id":"f0f4257b-3c75-80b3-aa4f-31c15da1a1d8","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"retrieves the transformation matrix of its parent node if it has changed, otherwise returns the current matrix unchanged.","params":[],"returns":{"type_name":"Matrix4f","description":"a matrix representation of the parent transformation.\n\n* `parentMatrix`: A `Matrix4f` object representing the transformation matrix of the parent node in the tree. If `parent` is null, the matrix will be `null`.\n* `hasChanged()`: A boolean method that indicates whether the matrix has changed since it was last used. This information can be used to optimize the calculation of the matrix.","complex_type":true},"usage":{"language":"java","code":"private Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}\n","description":"\nIn the example above, we first check if parent is not null and has changed, then assign it to the parentMatrix variable. This is done because in the getTransformation method, we only want to update the transformation matrix if the parent entity has changed its own transformation.\nThis method can be used in the following way:\n"},"name":"getParentMatrix","code":"private Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}","location":{"start":192,"insert":179,"offset":"\t","indent":1,"comment":{"start":178,"end":191}},"item_type":"method","length":6,"docLength":13},{"id":"865b6f6e-88fd-1db2-b640-9a6ef15c822d","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"sets the parent transformation object for the current instance, storing the reference in the `parent` field.","params":[{"name":"parent","type_name":"Transform","description":"Transform to which the current object's position and rotation will be set.\n\n* `parent`: A reference to a transformed object, which serves as the parent for this transformed object.\n* Type: `Transform`","complex_type":true}],"usage":{"language":"java","code":"Transform t = new Transform();\nTransform parent = new Transform();\nt.setParent(parent);\n","description":"\nThis is because the method takes a Transform object as its argument, and it assigns that parent to the object's current parent.\n\nPlease let me know if this makes sense!"},"name":"setParent","code":"public void setParent(Transform parent) {\n\t\tthis.parent = parent;\n\t}","location":{"start":212,"insert":199,"offset":"\t","indent":1,"comment":{"start":198,"end":211}},"item_type":"method","length":3,"docLength":13},{"id":"505b7444-4e6f-1a91-8342-de140b692cfa","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"transforms a `Vector3f` object `pos` using the transformation matrix of its parent component, and returns the transformed position.","params":[],"returns":{"type_name":"Vector3f","description":"a transformed position vector in the parent matrix's coordinate system.\n\nThe `Vector3f` object that is returned represents the transformed position of the game object. This transformation is applied by multiplying the original position vector with the matrix represented by the `getParentMatrix` method. Therefore, the transformed position reflects the changes made to the object's position due to its parenting relationship and any additional transformations applied through the matrix.\nThe returned vector has three components: x, y, and z, which represent the transformed position in each dimension. Each component can take on any real number value within the range of the floating-point representation used by Java.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        Entity entity = new Entity();\n\n        // ...\n\n        Vector3f transformedPosition = entity.getTransformedPos();\n\n        System.out.println(\"The transformed position of the entity is: \" + transformedPosition);\n    }\n}\n","description":""},"name":"getTransformedPos","code":"public Vector3f getTransformedPos() {\n\t\treturn getParentMatrix().transform(pos);\n\t}","location":{"start":229,"insert":216,"offset":"\t","indent":1,"comment":{"start":215,"end":228}},"item_type":"method","length":3,"docLength":13},{"id":"355e8ec8-b6db-5f88-9243-814d8e09cdf0","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"computes the transformed rotation of a parent object based on its own rotation and the given `rot` parameter, using the quaternion multiplication operator.","params":[],"returns":{"type_name":"Quaternion","description":"a transformed rotation quaternion.\n\n* `Quaternion parentRotation`: This is the rotational transformation applied to the parent object, represented as a Quaternion.\n* `rot`: The rotational transformation applied to the parent object, also represented as a Quaternion.\n* `mul`: The multiplication operation performed on the `parentRotation` and `rot` Quaternions, resulting in the transformed rotation.","complex_type":true},"usage":{"language":"java","code":"public class GameObject {\n    private Vector3f pos;\n    private Quaternion rot;\n    private Vector3f scale;\n    private GameObject parent;\n\n    public Quaternion getTransformedRot() {\n        Quaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n        if (parent != null)\n            parentRotation = parent.getTransformedRot();\n\n        return parentRotation.mul(rot);\n    }\n\n    public Vector3f getPos() {\n        return pos;\n    }\n\n    public void setPos(Vector3f pos) {\n        this.pos = pos;\n    }\n\n    public void addToPos(Vector3f addVec) {\n        this.setPos(this.getPos().add(addVec));\n    }\n}\n","description":"\nIn the example above, we define a class called GameObject that has three attributes: pos, rot, and scale. The parent attribute represents the parent object of the current instance.\n\nThe method getTransformedRot returns a quaternion value which represents the rotation of the object, taking into account the parent's rotation if it has one. It does this by first creating an initial quaternion value that represents the identity rotation (1, 0, 0, 0). If the object has a parent, its rotation is added to this value using the multiplication operator mul of the quaternion class.\n\nThe other methods are used to access and set the position, rotation, and scale values of the object. The addToPos method adds a vector to the current position value, updating its new position based on the addition."},"name":"getTransformedRot","code":"public Quaternion getTransformedRot() {\n\t\tQuaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n\t\tif (parent != null)\n\t\t\tparentRotation = parent.getTransformedRot();\n\n\t\treturn parentRotation.mul(rot);\n\t}","location":{"start":251,"insert":233,"offset":"\t","indent":1,"comment":{"start":232,"end":250}},"item_type":"method","length":8,"docLength":18},{"id":"42593f5f-5db8-c18a-d84b-5edce3c26c56","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"returns the position of an object in a three-dimensional space as a `Vector3f` object.","params":[],"returns":{"type_name":"Vector3f","description":"a `Vector3f` object representing the position of the game object.\n\n* `pos`: A Vector3f object that contains the position of the entity in 3D space.\n\t+ It has three components: x, y, and z, which represent the entity's position in the x, y, and z axes, respectively.\n\t+ The values of these components are stored as floating-point numbers.\n* The Vector3f object is immutable, meaning that its properties cannot be changed once it is created.","complex_type":true},"usage":{"language":"java","code":"public class Entity {\n\tprivate Vector3f pos;\n\t\n\tpublic Vector3f getPos() {\n\t\treturn pos;\n\t}\n}\n\n// usage example of the getPos() function:\nEntity e = new Entity(); // create an object of class Entity\ne.pos = new Vector3f(1, 2, 3); // set the position component of the entity to a vector\nVector3f pos = e.getPos(); // retrieve the position component of the entity as a Vector3f object\nSystem.out.println(\"position: \" + pos); // print the retrieved position value\n","description":"\nIn this example, the `Entity` class has a member variable called `pos` of type `Vector3f`. This is a field that represents the position of an entity in 3D space. The `getPos()` method returns a reference to this field. The `Vector3f` class contains three components: x, y, and z, which represent the position along the x, y, and z axes respectively.\nThe usage example shows how the `getPos()` function is used to retrieve the position of an entity in 3D space and print it out as a string using the `System.out.println()` function."},"name":"getPos","code":"public Vector3f getPos() {\n\t\treturn pos;\n\t}","location":{"start":269,"insert":260,"offset":"\t","indent":1,"comment":{"start":259,"end":268}},"item_type":"method","length":3,"docLength":9},{"id":"77d2fd30-6c1c-dc92-c842-d0c9e23ed02d","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"sets the position of an object to a specified value.","params":[{"name":"pos","type_name":"Vector3f","description":"3D position of an object or entity, which is assigned to the `pos` field of the current instance.\n\n* `this.pos`: This is a field in the current object instance that stores the position value. It has a type of `Vector3f`, which represents a 3D coordinate system.\n* `Vector3f`: This class represents a 3D vector and contains three properties: `x`, `y`, and `z`, each representing the component of the vector in the corresponding dimension.","complex_type":true}],"usage":{"language":"java","code":"Entity e = new Entity();\ne.setPos(new Vector3f(1, 2, 3)); // sets the position of the entity to (1, 2, 3)\n","description":"\nIn this example, the vector (1, 2, 3) is used as the input for setPos, which updates the position of the entity to the new value. The values of x, y, and z are updated respectively.\n\nFor more information on the Vector3f class and its methods, please refer to the Java documentation: https://docs.oracle.com/javase/7/docs/api/java/awt/geom/Vector3f.html\n\nNote that in this example, the function setPos is not being used as a constructor of an object, but rather as a method on an existing entity instance."},"name":"setPos","code":"public void setPos(Vector3f pos) {\n\t\tthis.pos = pos;\n\t}","location":{"start":284,"insert":273,"offset":"\t","indent":1,"comment":{"start":272,"end":283}},"item_type":"method","length":3,"docLength":11},{"id":"f91c63e9-02d8-1183-bb47-184e0bccf037","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"updates the position of an object by adding a vector to its current position.","params":[{"name":"addVec","type_name":"Vector3f","description":"3D vector to be added to the current position of the object.\n\n* `Vector3f`: This is the class representing a 3D vector in Java. It has three components - x, y, and z - which represent the position of the vector in the 3D space.","complex_type":true}],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Entity entity = new Entity();\n        Vector3f addVec = new Vector3f(1, 2, 3);\n        entity.addToPos(addVec);\n    }\n}\n","description":"\nIn this example, a new `Entity` object is created and an instance of the `Vector3f` class with values 1, 2, and 3 for its x, y, and z components is passed to the `addToPos()` method. The `addToPos()` method modifies the position vector of the `entity` object by adding the specified values to its current position values. Therefore, after this line is executed, the `entity`'s position will be updated to `(4, 6, 9)`."},"name":"addToPos","code":"public void addToPos(Vector3f addVec) { this.setPos(this.getPos().add(addVec)); }","location":{"start":303,"insert":288,"offset":"\t","indent":1,"comment":{"start":287,"end":302}},"item_type":"method","length":1,"docLength":15},{"id":"66ee6641-2aef-d6b8-c640-8104b0b9acae","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"returns a `Quaternion` object representing the rotation of an entity.","params":[],"returns":{"type_name":"Quaternion","description":"a Quaternion object containing the rotation matrix.\n\nThe function returns a Quaternion object representing the rotation of the object. The Quaternion class in Java is used to represent 3D rotations as a combination of real and imaginary parts. The return value has four components: x, y, z, and w, which correspond to the real and imaginary parts of the quaternion.\n\nThe Quaternion object has several methods for manipulating and transforming 3D rotations, such as multiply, conjugate, and normalize. These methods are useful for creating complex rotations by combining multiple simple rotations.","complex_type":true},"usage":{"language":"java","code":"// Example usage of the `getRot` method\nQuaternion objectRotation = myObject.getRot();\n","description":"\nThis code declares and initializes a variable named `objectRotation`, which refers to the quaternion representing the rotation of the game object `myObject`. The variable is then used to store the rotation value returned by the method `getRot` called on `myObject`."},"name":"getRot","code":"public Quaternion getRot() {\n\t\treturn rot;\n\t}","location":{"start":319,"insert":305,"offset":"\t","indent":1,"comment":{"start":304,"end":318}},"item_type":"method","length":3,"docLength":14},{"id":"7bc07498-7d61-f283-ad45-a66e37dbf2bf","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"sets the Rotation value of the class instance variable \"rot\" to the provided Quaternion argument.","params":[{"name":"rotation","type_name":"Quaternion","description":"4D quaternion that represents the rotation of an object in 3D space, which is assigned to the `rot` field of the `java.lang.Object` class.\n\n* `Quaternion`: The type of the rotation parameter, which represents a quaternion value representing a 3D rotation.\n* `this.rot`: The field being assigned to, which stores the rotation value for this object.","complex_type":true}],"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        Quaternion rotation = new Quaternion();\n        MyObject myObj = new MyObject();\n        \n        // Setting the object's rotation to a quaternion\n        myObj.setRot(rotation);\n    }\n}\n","description":"\nIn this example, the main method creates a new instance of the class Quaternion called 'rotation', which represents the orientation of an object in 3D space using a Quaternion data structure. The main method then creates a new instance of MyObject called 'myObj' and uses the setRot method to assign the quaternion 'rotation' as the rotation value of the object.\n\nIt is important to note that the method setRot requires the input parameter 'rotation' to be of type Quaternion, which means the user must provide a valid instance of the class Quaternion in order for the function to work correctly. The example shows how the method can be used correctly by creating an instance of Quaternion and passing it as a parameter to the setRot method."},"name":"setRot","code":"public void setRot(Quaternion rotation) {\n\t\tthis.rot = rotation;\n\t}","location":{"start":337,"insert":323,"offset":"\t","indent":1,"comment":{"start":322,"end":336}},"item_type":"method","length":3,"docLength":14},{"id":"83350279-6100-4faa-c247-def3526b0b60","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"returns the current scale value of the `Vector3f` object.","params":[],"returns":{"type_name":"Vector3f","description":"a `Vector3f` object representing the scaling factor of the game object.\n\nThe `scale` variable returns a `Vector3f` object representing the scale factor for this GameObject. This vector includes three elements that represent the scaling values for the X, Y, and Z axes, respectively. The elements of the vector are floating-point numbers that range from 0 to 1, indicating the degree to which each axis should be scaled relative to its original value.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\t\tVector3f scale = new Vector3f();\n\t\tscale.setX(1);\n\t\tscale.setY(2);\n\t\tscale.setZ(3);\n\n\t\tEntity entity = new Entity();\n\t\tentity.setScale(scale);\n\n\t\tSystem.out.println(\"Scale X: \" + entity.getScale().getX());\n\t\tSystem.out.println(\"Scale Y: \" + entity.getScale().getY());\n\t\tSystem.out.println(\"Scale Z: \" + entity.getScale().getZ());\n\t}\n","description":""},"name":"getScale","code":"public Vector3f getScale() {\n\t\treturn scale;\n\t}","location":{"start":351,"insert":341,"offset":"\t","indent":1,"comment":{"start":340,"end":350}},"item_type":"method","length":3,"docLength":10},{"id":"b37c9eb7-c684-629c-8349-c888e4026a53","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"sets the `scale` field of its class instance, which represents a transformation matrix used in rendering 3D graphics. The provided vector `scale` is used to update the corresponding element of the transformation matrix.","params":[{"name":"scale","type_name":"Vector3f","description":"3D vector that defines the scaling factor for the object, which is then assigned to the `scale` field of the function's caller.\n\n* The `scale` field is a `Vector3f` object, which represents a 3D vector in the game engine.\n* It contains the x, y, and z components of the vector, which can be accessed through the get methods `x`, `y`, and `z()`.\n* The `Vector3f` class provides various methods for manipulating the components of the vector, such as `add()`, `sub()`, `mul()`, and `div()`.","complex_type":true}],"usage":{"language":"java","code":"GameObject obj = new GameObject();\nobj.setScale(new Vector3f(1, 2, 3));\n","description":"\nIn this case, the object's scale factor will be updated to represent a scaling of 1 in the x, 2 in the y, and 3 in the z directions."},"name":"setScale","code":"public void setScale(Vector3f scale) {\n\t\tthis.scale = scale;\n\t}","location":{"start":366,"insert":355,"offset":"\t","indent":1,"comment":{"start":354,"end":365}},"item_type":"method","length":3,"docLength":11},{"id":"4b91a7c8-47d1-9da7-4f4e-486370063a88","ancestors":["dc8476c6-b0b9-79b9-3a4c-bb8907417455"],"type":"function","description":"returns an empty string, indicating that the object it is called on has no meaningful representation as a string.","params":[],"returns":{"type_name":"empty","description":"an empty string.\n\n1. The output is an empty string, indicating that the method does not return any meaningful information about the object it is called on.\n2. The use of the empty string as the output suggests that the method may be intended for internal implementation purposes only, rather than providing a useful representation of the object.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Entity entity = new Entity();\n    System.out.println(entity);\n}\n\n@Override\npublic String toString() { return \"Entity\"; }\n","description":"\nThis example will print out the string `Entity` to the console because we are overriding the method toString in our Entity class and returning a String containing the word `Entity`.  Because it is an empty string, this will not provide any additional information about what Entity represents."},"name":"toString","code":"@Override\n\tpublic String toString() { return \"\";\n\t}","location":{"start":381,"insert":370,"offset":"\t","indent":1,"comment":{"start":369,"end":380}},"item_type":"method","length":3,"docLength":11}]}}}