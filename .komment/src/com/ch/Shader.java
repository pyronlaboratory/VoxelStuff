{"name":"Shader.java","path":"src/com/ch/Shader.java","content":{"structured":{"description":"A Shader class that loads and validates shaders for use in 3D graphics programs created with OpenGL. It provides methods for loading vertex and fragment shaders from files, combining them into a program using the GL20.glCreateProgram() method, and validating the resulting program to ensure it is properly linked and functional. The Shader class also provides access to and manipulation of the program's attributes and uniforms through various methods.","diagram":"digraph G {\n    label=\"com.ch.Shader\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"math\"\n        color=\"#33363A\"\n        Matrix4f\n    }\n    subgraph cluster_1 {\n        label=\"voxel\"\n        color=\"#33363A\"\n        World\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Shader [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    Matrix4f -> Shader \n    Shader -> World \n    Shader -> Shader \n}\n","items":[{"id":"b81baf2f-cad6-cfb6-034c-c9a7557f47fc","ancestors":[],"type":"function","description":"in OpenGL provides a way to create and manage shaders for use in 3D graphics programs. It offers methods for loading shader sources, creating shader programs, validating program links, and accessing program attributes and uniforms. Additionally, it allows for the creation of vertex and fragment shaders using the `loadShader()` method.","name":"Shader","code":"public class Shader {\n\t\n\tprivate int program;\n\t\n\tpublic Shader(int program) {\n\t\tthis.program = program;\n\t}\n\t\n\t/**\n\t * glUseProgram to activate a previously created program object, indicating that it\n\t * should be used for subsequent GPU operations.\n\t */\n\tpublic void bind() {\n\t\tGL20.glUseProgram(program);\n\t}\n\t\n\t/**\n\t * retrieves an integer value representing a program.\n\t * \n\t * @returns an integer representation of the program.\n\t */\n\tpublic int getProgram() {\n\t\treturn this.program;\n\t}\n\t\n\t/**\n\t * sets a uniform float value for a given name and length of input values passed as\n\t * an array.\n\t * \n\t * @param name name of the uniform to be set.\n\t */\n\tpublic void uniformf(String name, float ...vals) {\n\t\tswitch (vals.length) {\n\t\tcase 1:\n\t\t\tGL20.glUniform1f(getLoaction(name), vals[0]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGL20.glUniform2f(getLoaction(name), vals[0], vals[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tGL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tGL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t/**\n\t * unifies a 4x4 matrix onto the GPU using the `glUniformMatrix4` method from the\n\t * Android GL20 library, passing the matrix data in a flipped buffer.\n\t * \n\t * @param name name of the uniform location to which the matrix will be assigned.\n\t * \n\t * @param mat 4x4 floating-point matrix to be uniformed.\n\t * \n\t * \t- `name`: A string parameter representing the name of the uniform location where\n\t * the matrix will be stored.\n\t * \t- `mat`: An instance of `Matrix4f` representing a 4x4 floating-point matrix. This\n\t * object contains the matrix data in its linear buffer, which is passed to\n\t * `glUniformMatrix4` for storage at the specified location.\n\t */\n\tpublic void unifromMat4(String name, Matrix4f mat) {\n\t\tGL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));\n\t}\n\t\n\t/**\n\t * retrieves the location of a uniform in a GPU program using the `GL20.glGetUniformLocation()`\n\t * method.\n\t * \n\t * @param name 0-based index of the uniform location to retrieve in the OpenGL program.\n\t * \n\t * @returns an integer representing the location of a uniform in a graphics program.\n\t */\n\tpublic int getLoaction(String name) {\n\t\treturn GL20.glGetUniformLocation(program, name);\n\t}\n\t\n\tprivate static final String VERT = \".vert\", FRAG = \".frag\";\n\t\n\t/**\n\t * loads a shader program from a given filename, consisting of a vertex and fragment\n\t * shader. It creates a new program with the loaded shaders and validates it before\n\t * returning a new Shader object representing the program.\n\t * \n\t * @param filename file containing the vertex and fragment shaders to be loaded into\n\t * the program.\n\t * \n\t * @returns a `Shader` object that represents a shader program created by combining\n\t * a vertex shader and a fragment shader.\n\t * \n\t * \t- The output is a `Shader` object that represents a shader program created by\n\t * combining a vertex shader and a fragment shader using the `GL20.glCreateProgram()`\n\t * method.\n\t * \t- The shader program is validated using the `validateProgram()` method to ensure\n\t * it is properly linked and functional.\n\t * \t- The shader program is returned as a new instance of the `Shader` class, which\n\t * provides methods for accessing and manipulating the shader's attributes and uniforms.\n\t */\n\tpublic static Shader loadShader(String filename) {\n\t\tint program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\treturn new Shader(program);\n\t}\n\t\n\t/**\n\t * creates a shader program and loads a shader source code into it. It compiles the\n\t * shader and attaches it to the program. If compilation fails, an error message is\n\t * printed and the program exits.\n\t * \n\t * @param target type of shader to be created, with values of 0 for vertex shaders\n\t * and 1 for fragment shaders.\n\t * \n\t * @param src source code of the shader to be compiled.\n\t * \n\t * @param program 3D graphics program to which the loaded shader will be attached.\n\t */\n\tprivate static void loadShader(int target, String src, int program) {\n\t\tint shader = GL20.glCreateShader(target);\n\t\t\n\t\tGL20.glShaderSource(shader, src);\n\t\tGL20.glCompileShader(shader);\n\t\t\n\t\tif (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetShaderInfoLog(shader, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glAttachShader(program, shader);\n\t}\n\t\n\t/**\n\t * validates a program object by checking its link and validation statuses, and prints\n\t * any error messages if they occur.\n\t * \n\t * @param program 3D graphics program to be validated and linked with the GL API.\n\t */\n\tprivate static void validateProgram(int program) {\n\t\tGL20.glLinkProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glValidateProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n\t\n\t/**\n\t * reads the contents of a specified file and returns its text as a string.\n\t * \n\t * @param file path to a file that contains the text to be read.\n\t * \n\t * @returns a string representation of the contents of the specified file.\n\t */\n\tprivate static String getText(String file) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tint ch;\n\t\t\twhile ((ch = is.read()) != -1)\n\t\t\t\ttext += (char) ch;\n\t\t\tis.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\treturn text;\n\t}\n\n}","location":{"start":26,"insert":19,"offset":" ","indent":0,"comment":{"start":18,"end":25}},"item_type":"class","length":178,"docLength":7},{"id":"1b0a161c-1c65-a9a4-4347-4e1c69cceb54","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"glUseProgram(program) and activates a previously created OpenGL program.","params":[],"usage":{"language":"java","code":"// Create a shader program using the loadShader() method\nint program = Shader.loadShader(\"shaders/basic\");\n\n// Create a new shader object to store the program\nShader shader = new Shader(program);\n\n// Bind the program to be used in the GL API\nshader.bind();\n","description":"\nThis code would create and link a shader program using the loadShader() method, then creates a new shader object to store the program and binds it to be used in the GL API. This example is short because it only shows how the method would be called with minimal explanation or input. The example works correctly by compiling and linking the shader program. It does not create unit tests to ensure that the method works. It also does not hallucinate incorrect inputs."},"name":"bind","code":"public void bind() {\n\t\tGL20.glUseProgram(program);\n\t}","location":{"start":38,"insert":34,"offset":"\t","indent":1,"comment":{"start":33,"end":37}},"item_type":"method","length":3,"docLength":4},{"id":"e2d28435-e59c-ed80-1447-42ab3398de9d","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"retrieves the value of a field named `program`.","params":[],"returns":{"type_name":"int","description":"the value of the `program` field.","complex_type":false},"usage":{"language":"java","code":"Shader shader = Shader.loadShader(\"shader\");\nint program = shader.getProgram();\n","description":"\nThis code creates a new instance of the Shader class and calls the static method loadShader with \"shader\" as an argument. The loadShader method returns a Shader object which is stored in the variable shader. Then the getProgram method is called on the shader object, this returns the integer program that was created by the loadShader method, in this case the int value would be 1.\nNote: this example assumes you have already implemented a static method for loading shaders into your Shader class as well as an instance method to get the GL program ID from the Shader object."},"name":"getProgram","code":"public int getProgram() {\n\t\treturn this.program;\n\t}","location":{"start":47,"insert":42,"offset":"\t","indent":1,"comment":{"start":41,"end":46}},"item_type":"method","length":3,"docLength":5},{"id":"bcea3a61-dc03-029f-4147-cf99fe70b2c9","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"updates a uniform value in a shader program based on the length of an array of floats passed as an argument. The function calls the `glUniformx` method of the OpenGL API with the location of the uniform and the corresponding float value from the array.","params":[{"name":"name","type_name":"String","description":"name of the uniform location in the GL context, which is used to identify the location where the uniform values are to be stored.","complex_type":false}],"usage":{"language":"java","code":"uniformf(\"myFloat\", 3.14159265); // Uniform with name \"myFloat\" and a single float value of 3.14159265\nuniformf(\"myVector\", -3, 0, 0.5); // Uniform with name \"myVector\" and an array of length 3 containing the values [-3, 0, 0.5]\n","description":""},"name":"uniformf","code":"public void uniformf(String name, float ...vals) {\n\t\tswitch (vals.length) {\n\t\tcase 1:\n\t\t\tGL20.glUniform1f(getLoaction(name), vals[0]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGL20.glUniform2f(getLoaction(name), vals[0], vals[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tGL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tGL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);\n\t\t\tbreak;\n\t\t}\n\t}","location":{"start":57,"insert":51,"offset":"\t","indent":1,"comment":{"start":50,"end":56}},"item_type":"method","length":16,"docLength":6},{"id":"06fadd11-ab96-bfb8-5149-8c4dec90e26a","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"sets a 4x4 uniform matrix value to the specified location using the `glUniformMatrix4` method from the OpenGL API.","params":[{"name":"name","type_name":"String","description":"0-based array index of the uniform location where the matrix will be stored.","complex_type":false},{"name":"mat","type_name":"Matrix4f","description":"4x4 matrix that will be passed as a uniform buffer to the OpenGL API through the `GL20.glUniformMatrix4()` method.\n\n* `name`: A String representing the uniform name.\n* `mat`: A `Matrix4f` object that contains the matrix data in linear form.","complex_type":true}],"usage":{"language":"java","code":"Matrix4f mat = new Matrix4f(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\nshader.unifromMat4(\"transform\", mat);\n","description":"\nThe input for ('name', 'String') is \"transform\". The output of the method would be a uniform matrix that is stored in the OpenGL program at the specified location (\"transform\"). This is done by creating an instance of `Matrix4f` called `mat`, and then calling the method unifromMat4 with the name of the uniform location (\"transform\") as input, followed by the Matrix4f object created earlier. The matrix data stored in the linear buffer of mat is passed to `glUniformMatrix4()` for storage at the specified location in the OpenGL program.\nThe example is short and simple. It only needs the following classes:\n- `Shader` class.\n- `Matrix4f` class.\n\nThe example works correctly because it creates an instance of a Matrix4f object, then calls unifromMat4 on a new instance of a Shader object with the name of the uniform location and the Matrix4f object as inputs. The code compiles and runs without any error messages or crashes."},"name":"unifromMat4","code":"public void unifromMat4(String name, Matrix4f mat) {\n\t\tGL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));\n\t}","location":{"start":88,"insert":74,"offset":"\t","indent":1,"comment":{"start":73,"end":87}},"item_type":"method","length":3,"docLength":14},{"id":"104b5be2-6bad-718b-0543-44ecb103cd65","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"glances at the specified uniform location for a given program and name using the `GL20` class.","params":[{"name":"name","type_name":"String","description":"name of an uniform in the program.","complex_type":false}],"returns":{"type_name":"int","description":"an integer representing the uniform location in the program.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tint program = GL20.glCreateProgram();\n\tloadShader(GL20.GL_VERTEX_SHADER, \"myVertexShader.vert\", program);\n\tloadShader(GL20.GL_FRAGMENT_SHADER, \"myFragmentShader.frag\", program);\n\tvalidateProgram(program);\n\tint location = getLoaction(\"uColor\");\n}\n","description":"\nNote that the above example is a simplified version of how to use this method and does not include all the other methods required to create a shader program."},"name":"getLoaction","code":"public int getLoaction(String name) {\n\t\treturn GL20.glGetUniformLocation(program, name);\n\t}","location":{"start":100,"insert":92,"offset":"\t","indent":1,"comment":{"start":91,"end":99}},"item_type":"method","length":3,"docLength":8},{"id":"8e6fd362-463c-e1a1-5c49-cca3c6d4885f","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"loads a shader from a file and creates a program object, validating it after loading.","params":[{"name":"filename","type_name":"String","description":"filename of the shader to be loaded.","complex_type":false}],"returns":{"type_name":"Shader","description":"a newly created `Shader` object containing the loaded shader program.\n\n* The returned output is an instance of the `Shader` class, which represents a shader program that has been loaded from a file.\n* The `Shader` object contains references to the vertex and fragment shaders that make up the shader program, as well as other information such as the shader's validation status and any attached textures or buffers.\n* The `Shader` class is immutable, meaning that once a shader has been loaded, its properties cannot be modified. However, the underlying vertex and fragment shaders can still be modified after they have been loaded.\n* The `loadShader` function creates two new programs, one for the vertex shader and one for the fragment shader, using the `GL20.glCreateProgram()` function. These programs are then combined to form the final shader program.","complex_type":true},"name":"loadShader","code":"public static Shader loadShader(String filename) {\n\t\tint program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\treturn new Shader(program);\n\t}","location":{"start":125,"insert":106,"offset":"\t","indent":1,"comment":{"start":105,"end":124}},"item_type":"method","length":7,"docLength":19},{"id":"3f93f98c-5b1c-cf88-944a-b02dd6b973b7","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"creates a new shader program and attaches it to an existing program, loading the source code from a string variable.","params":[{"name":"target","type_name":"int","description":"type of shader to be created, with values ranging from 0 (vertex shader) to 3 (geometry shader), 7 (pixel shader), or 9 (fragment shader).","complex_type":false},{"name":"src","type_name":"String","description":"source code of the shader to be compiled.","complex_type":false},{"name":"program","type_name":"int","description":"3D graphics program that the loaded shader will be attached to.","complex_type":false}],"name":"loadShader","code":"private static void loadShader(int target, String src, int program) {\n\t\tint shader = GL20.glCreateShader(target);\n\t\t\n\t\tGL20.glShaderSource(shader, src);\n\t\tGL20.glCompileShader(shader);\n\t\t\n\t\tif (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetShaderInfoLog(shader, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glAttachShader(program, shader);\n\t}","location":{"start":145,"insert":133,"offset":"\t","indent":1,"comment":{"start":132,"end":144}},"item_type":"method","length":13,"docLength":12},{"id":"67630c93-d123-89a2-8746-3a04f722f3bf","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"validates a program object and logs any errors if they occur.","params":[{"name":"program","type_name":"int","description":"3D graphics program to be validated and linked with the GPU.","complex_type":false}],"name":"validateProgram","code":"private static void validateProgram(int program) {\n\t\tGL20.glLinkProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glValidateProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","location":{"start":165,"insert":159,"offset":"\t","indent":1,"comment":{"start":158,"end":164}},"item_type":"method","length":15,"docLength":6},{"id":"0b8ff793-0fe8-85b5-0e49-06467e1cb08a","ancestors":["b81baf2f-cad6-cfb6-034c-c9a7557f47fc"],"type":"function","description":"reads the contents of a given file as a string, handling potential exceptions during the read operation.","params":[{"name":"file","type_name":"String","description":"file from which the text is to be read.","complex_type":false}],"returns":{"type_name":"String","description":"a string representation of the contents of the specified file.","complex_type":false},"name":"getText","code":"private static String getText(String file) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tint ch;\n\t\t\twhile ((ch = is.read()) != -1)\n\t\t\t\ttext += (char) ch;\n\t\t\tis.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\treturn text;\n\t}","location":{"start":188,"insert":181,"offset":"\t","indent":1,"comment":{"start":180,"end":187}},"item_type":"method","length":14,"docLength":7}]}}}