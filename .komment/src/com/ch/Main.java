{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A simple 3D graphics program using the JMonkeyEngine library. It creates a camera, a scene graph, and a texture, and renders a 3D model using the scene graph and uniform colors. The program also provides input handling and updating the display title, clears the color and depth buffers, and renders the scene using the `render()` method. The program terminates with a specific exit status when the escape key is pressed or a close request is received.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.ch.Main\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"88436e62-b37f-838d-9d45-3bc8a62f331f","ancestors":[],"type":"function","description":"of this Java program is responsible for creating and rendering a 3D scene using the OpenGL API. It initializes the GLFW library to handle window management and keyboard input, loads a 3D model from a file, and sets up a camera and a shader program to render the scene. The program then enters an infinite loop where it updates the position of an object based on user input and renders the scene using the shader program. Finally, it provides a method for terminating the application with a specific exit status.","name":"Main","code":"public class Main {\n\t\n /**\n  * initializes display and graphics libraries, enters an infinite loop for rendering\n  * and event handling, and exits with a successful return value of 0.\n  * \n  * @param args program's command-line arguments passed to the `main` function by the\n  * operating system or user.\n  * \n  * \t- `args`: an array of `String` values representing command-line arguments passed\n  * to the program. The length of this array is provided by the `main` method caller.\n  * \t- Each element in `args`: a single `String` value representing a command-line\n  * argument. These values can be used as input for the program, or they can be ignored\n  * if appropriate.\n  */\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n /**\n  * sets up a display mode with resolution 1920x1080, creates a GL context with forward\n  * compatibility and core profile enabled, and enables vsync. It also prints the GL\n  * version string using `GL11.glGetString()`.\n  */\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n /**\n  * initializes OpenGL components such as clear color, grabbing mouse events, enabling\n  * depth test and cull face, loading shader, texture, and vertex data.\n  */\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n /**\n  * continuously loops while a close request is not received and the escape key is not\n  * pressed. It updates the display title, clears the color and depth buffers, and\n  * renders the scene using the `render()` method.\n  */\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n /**\n  * updates the position of an object `w` based on input provided by a `c` object and\n  * a time interval `dt`.\n  * \n  * @param dt time step or simulation speedup used to update the game objects' positions\n  * and states during the rendering process.\n  */\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n /**\n  * renders a 3D model using a scene graph and uniform colors. It enables and disables\n  * attributess, binds the scene graph, and draws the model using the Model's draw()\n  * method.\n  */\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n /**\n  * terminates the current Java process with a specific exit status, which can be used\n  * to indicate the reason for the termination.\n  * \n  * @param status value to be passed to the `System.exit()` method, which terminates\n  * the application and returns control to the operating system.\n  */\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":24,"insert":15,"offset":" ","indent":0,"comment":{"start":14,"end":23}},"item_type":"class","length":169,"docLength":9},{"id":"6ef76175-ef5a-92ab-784b-90256d3c142d","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"initializes display and GL resources, enters an infinite loop, and exits with a success code (0).","params":[{"name":"args","type_name":"String[]","description":"program's command-line arguments, which are passed to \nthe `main()` method when the program is executed.\n\n* Length: The `args` array has 0 or more elements, which are strings.\n* Elements: Each element in `args` is a string that represents an command-line argument passed to the program at runtime.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":39,"insert":26,"offset":"\t","indent":1,"comment":{"start":25,"end":38}},"item_type":"method","length":8,"docLength":13},{"id":"080585f1-63c1-1899-0a46-78ae70d8ced4","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"sets up a display mode with a resolution of 1920x1080, creates a GL context with forward compatibility and core profile support, and enables vsync. It also prints the GL version string using `glGetString`.","params":[],"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":60,"insert":55,"offset":"\t","indent":1,"comment":{"start":54,"end":59}},"item_type":"method","length":10,"docLength":5},{"id":"a4dd6d17-9fdb-7b9a-614b-ab01e1c4c8a0","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"initializes various GL settings for a 3D graphics program, including color, depth testing, and culling face. It also loads a shader, creates a texture, and initializes a camera and world objects.","params":[],"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":75,"insert":71,"offset":"\t","indent":1,"comment":{"start":70,"end":74}},"item_type":"method","length":41,"docLength":4},{"id":"0a5c7b0a-9803-7db4-2e41-a68c8206bcca","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"continuously runs a loop until the `Display.isCloseRequested()` or `Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)` is triggered. It updates the title and renders the scene using `GL11.glClear()` and `render()`.","params":[],"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":122,"insert":117,"offset":"\t","indent":1,"comment":{"start":116,"end":121}},"item_type":"method","length":21,"docLength":5},{"id":"2ffb3821-1c6e-bc88-a74d-20a4596b9638","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"updates the position of an object (`w`) based on input and transformation.","params":[{"name":"dt","type_name":"float","description":"time step for updating the objects' positions and is used to calculate the change in position over time.","complex_type":false}],"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":151,"insert":144,"offset":"\t","indent":1,"comment":{"start":143,"end":150}},"item_type":"method","length":4,"docLength":7},{"id":"8cd93dcb-92fd-319f-304a-07bdb920c6cd","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"renders a 3D model using a shader program and a camera object. It sets up the necessary uniforms and matrices for rendering, and then calls the `render` method on the camera object to produce the final image.","params":[],"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":161,"insert":156,"offset":"\t","indent":1,"comment":{"start":155,"end":160}},"item_type":"method","length":20,"docLength":5},{"id":"6f6a2894-028d-d5b5-0144-65d26d70d36f","ancestors":["88436e62-b37f-838d-9d45-3bc8a62f331f"],"type":"function","description":"terminates the Java process with the specified status code.","params":[{"name":"status","type_name":"int","description":"exit code that the `System.exit()` method will use to terminate the application.","complex_type":false}],"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":189,"insert":182,"offset":"\t","indent":1,"comment":{"start":181,"end":188}},"item_type":"method","length":3,"docLength":7}]}}}