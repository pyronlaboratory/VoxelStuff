{"name":"Timer.java","path":"src/com/ch/Timer.java","content":{"structured":{"description":"a `Timer` class with various methods for measuring time and updating frames per second (FPS). The class has static instance variables for `fps`, `lastFPS`, `lastFrame`, `delta`, `currentFPS`, and `time`. The `init()` method initializes these variables, while the `update()` method updates the FPS and calculates the delta time, then adds it to the `time` variable. The `getDelta()`, `getFPS()`, and `getTime()` methods provide access to these values. The code also includes a `calculateDelta()` method for calculating the delta time between two frames.","diagram":"digraph G {\n    label=\"com.ch.Timer\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"21f67b34-ff8b-5d94-e145-ef5710399976","ancestors":[],"type":"function","description":"is a Java package that provides functions for measuring time and updating frames per second (FPS). The class has several methods for calculating and storing time, FPS, and delta (the difference between the current time and the previous frame). These include `getTimeS()`, `init()`, `calculateDelta()`, `updateFPS()`, `getDelta()`, `getFPS()`, and `update()`.","name":"Timer","code":"public class Timer {\n\n\tprivate static float fps;\n\tprivate static long lastFPS;\n\tprivate static long lastFrame;\n\tpublic static float delta;\n\tpublic static float currentFPS;\n    public static float time;\n\n\t/**\n\t * calculates the current time in milliseconds using the `Sys.getTime()` and\n\t * `Sys.getTimerResolution()` methods, and returns the result as a long value.\n\t * \n\t * @returns a long value representing the current time in milliseconds, calculated\n\t * by multiplying the current system time in seconds by 1000 and dividing it by the\n\t * timer resolution.\n\t */\n\tprivate static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}\n\n\t/**\n\t * initializes a variable `lastFPS` with the current time value, captured using the\n\t * `getTimeS()` method.\n\t */\n\tpublic static void init() {\n\t\tlastFPS = getTimeS();\n\t}\n\n\t/**\n\t * calculates the time elapsed between two frames, represented by `time` and `lastFrame`,\n\t * respectively. It returns the elapsed time as a float value.\n\t * \n\t * @returns a floating-point value representing the time difference between two frames.\n\t */\n\tprivate static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}\n\n\t/**\n\t * updates the frames per second (FPS) metric by incrementing the current FPS value\n\t * and resetting a timer every 1000 milliseconds.\n\t */\n\tprivate static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}\n\n\t/**\n\t * returns the `delta` value, which is a static instance variable containing the\n\t * difference between two values.\n\t * \n\t * @returns a floating-point value representing the delta.\n\t */\n\tpublic static float getDelta() {\n\t\treturn delta;\n\t}\n\n\t/**\n\t * returns the current frame rate as a floating-point value.\n\t * \n\t * @returns the current frame rate of the application in floating-point format.\n\t */\n\tpublic static float getFPS() {\n\t\treturn currentFPS;\n\t}\n\n    /**\n     * returns the value of a `time` field, which is likely used to store the current\n     * time or date information.\n     * \n     * @returns a floating-point representation of the current time.\n     */\n    public static float getTime() {\n        return time;\n    }\n\n    /**\n     * updates frame rate, calculates delta time, and adds it to a variable `time`.\n     */\n    public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }\n\n}","location":{"start":12,"insert":5,"offset":" ","indent":0,"comment":{"start":4,"end":11}},"item_type":"class","length":95,"docLength":7},{"id":"b646067c-fadd-cdbc-954f-c2a8c80775c8","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"multiplies the current system time by 1000 and divides the result by the timer resolution to return a long value representing the elapsed time in milliseconds since the function was created.","params":[],"returns":{"type_name":"long","description":"a long value representing the current time in milliseconds, adjusted for timer resolution.","complex_type":false},"name":"getTimeS","code":"private static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}","location":{"start":29,"insert":21,"offset":"\t","indent":1,"comment":{"start":20,"end":28}},"item_type":"method","length":3,"docLength":8},{"id":"b2581215-1d7e-acbe-7c42-7e9045a47fb3","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"initializes a variable `lastFPS` with the current time.","params":[],"name":"init","code":"public static void init() {\n\t\tlastFPS = getTimeS();\n\t}","location":{"start":37,"insert":33,"offset":"\t","indent":1,"comment":{"start":32,"end":36}},"item_type":"method","length":3,"docLength":4},{"id":"12fd1ab4-ab03-3fb4-0d4a-07bdae5324f8","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"calculates the time difference between two points, represented by `time` and `lastFrame`, respectively. It returns the time difference as a float value.","params":[],"returns":{"type_name":"float","description":"a floating-point number representing the time difference between two frames.","complex_type":false},"name":"calculateDelta","code":"private static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}","location":{"start":47,"insert":41,"offset":"\t","indent":1,"comment":{"start":40,"end":46}},"item_type":"method","length":6,"docLength":6},{"id":"06c0316c-85cb-24ae-954a-3f4efa6646b3","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"updates the frames per second (FPS) metric by incrementing the current FPS and resetting a timer when a threshold is met.","params":[],"name":"updateFPS","code":"private static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}","location":{"start":58,"insert":54,"offset":"\t","indent":1,"comment":{"start":53,"end":57}},"item_type":"method","length":8,"docLength":4},{"id":"14352bf5-931d-c9b6-6b44-2f6fba18ffda","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"retrieves the value of the `delta` field, which is used to calculate the distance traveled by an object.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the difference between two values.","complex_type":false},"name":"getDelta","code":"public static float getDelta() {\n\t\treturn delta;\n\t}","location":{"start":73,"insert":67,"offset":"\t","indent":1,"comment":{"start":66,"end":72}},"item_type":"method","length":3,"docLength":6},{"id":"a0c662e2-5e33-999b-a649-6d8106db60ff","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"returns the current frame rate of a program in floating-point format.","params":[],"returns":{"type_name":"float","description":"the current frame rate of the application.","complex_type":false},"name":"getFPS","code":"public static float getFPS() {\n\t\treturn currentFPS;\n\t}","location":{"start":82,"insert":77,"offset":"\t","indent":1,"comment":{"start":76,"end":81}},"item_type":"method","length":3,"docLength":5},{"id":"b7f4ac4f-f661-5280-3a45-c49a9babcd99","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"returns the value of a field named `time`.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the current system time.","complex_type":false},"name":"getTime","code":"public static float getTime() {\n        return time;\n    }","location":{"start":92,"insert":86,"offset":" ","indent":4,"comment":{"start":85,"end":91}},"item_type":"method","length":3,"docLength":6},{"id":"0fefb356-d48d-a1a0-1a4d-4729b484cfe9","ancestors":["21f67b34-ff8b-5d94-e145-ef5710399976"],"type":"function","description":"updates the FPS, calculates and limits the delta time, and increments the time variable.","params":[],"name":"update","code":"public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }","location":{"start":99,"insert":96,"offset":" ","indent":4,"comment":{"start":95,"end":98}},"item_type":"method","length":6,"docLength":3}]}}}