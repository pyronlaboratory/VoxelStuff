{"name":"Vector2f.java","path":"src/com/ch/math/Vector2f.java","content":{"structured":{"description":"A `Vector2f` class that represents a 2D point in Cartesian coordinates. The class has getters and setters for x and y components, as well as methods for calculating absolute values, converting to a string, setting components, and comparing equality with other `Vector2f` objects. Additionally, the code provides methods for creating a new `Vector3f` object containing only the x, y, and z components, and a method for returning a reference to the same instance of the `Vector2f` class for chaining purposes.","diagram":"digraph G {\n    label=\"com.ch.math.Vector2f\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    Vector3f\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Vector2f [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    Vector2f -> Vector2f [style=\"dashed\"]\n    Vector3f -> Vector2f \n    Vector2f -> Vector2f \n}\n","items":[{"id":"21f1b037-dff8-c299-a645-d46cdb9c3d24","ancestors":[],"type":"function","description":"in Android:\n\nThe Vector2f class in Android represents a 2D point in homogeneous coordinates with x and y components. It provides various methods for scaling, absolute value calculation, division, and comparison with other vectors. The class also offers chaining capabilities for modifying its components within the same instance. Additionally, it provides toString() method for generating a string representation of the vector's coordinates.","name":"Vector2f","code":"public class Vector2f {\n\t\n\tprivate float x;\n\tprivate float y;\n\n\tpublic Vector2f(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, y);\n\t}\n\n\t/**\n\t * computes the dot product of a `Vector2f` object and another vector, returning the\n\t * result as a single float value.\n\t * \n\t * @param r 2D vector to be dot-producted with the `x` and `y` components of the\n\t * output vector.\n\t * \n\t * @returns a floating-point number representing the dot product of the input vector\n\t * and another vector.\n\t */\n\tpublic float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}\n\n\tpublic Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}\n\n\t/**\n\t * calculates the vector cross product between two vectors represented as `Vector2f`\n\t * objects, returning the result as a single floating-point value.\n\t * \n\t * @param r 2D vector to be multiplied with the current vector, resulting in the cross\n\t * product.\n\t * \n\t * @returns a scalar value representing the cross product of two vectors.\n\t */\n\tpublic float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}\n\n\t/**\n\t * calculates a vector that is a linear interpolation between two given vectors,\n\t * weighted by the specified factor.\n\t * \n\t * @param dest 2D destination point to which the current vector will be interpolated.\n\t * \n\t * @param lerpFactor 0.0 to 1.0 value that determines how much the destination vector\n\t * should be blended with the current vector during the linear interpolation process.\n\t * \n\t * @returns a vector that interpolates between two given vectors based on a specified\n\t * factor.\n\t */\n\tpublic Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\t/**\n\t * rotates a 2D vector by an angle in radians, returning the rotated vector in a new\n\t * coordinate system.\n\t * \n\t * @param angle angle of rotation in radians.\n\t * \n\t * @returns a new vector with x and y components that have been rotated by the provided\n\t * angle.\n\t */\n\tpublic Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}\n\n\t/**\n\t * takes a `r` parameter of type `Vector2f` and returns a new `Vector2f` instance\n\t * with the sum of the parameters' `x` and `y` coordinates.\n\t * \n\t * @param r 2D vector to be added to the current vector.\n\t * \n\t * @returns a new `Vector2f` object representing the sum of the input vector and the\n\t * provided vector.\n\t */\n\tpublic Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}\n\n\t/**\n\t * takes a single float argument `r` and returns a new `Vector2f` object with the sum\n\t * of the current vector's x-coordinate plus the `r` value, and the same y-coordinate.\n\t * \n\t * @param r addition value to be added to the existing coordinates of the vector.\n\t * \n\t * @returns a new `Vector2f` instance with the sum of the input `r` added to its `x`\n\t * and `y` components.\n\t */\n\tpublic Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}\n\n\n    /**\n     * takes two floating-point arguments `x` and `y`, returns a new `Vector2f` object\n     * representing the sum of the current object's `x` and `y` values with the given `x`\n     * and `y` values.\n     * \n     * @param x 2D coordinate to add to the current position of the vector.\n     * \n     * @param y 2nd component of the resulting vector.\n     * \n     * @returns a new `Vector2f` instance representing the sum of the input `x` and `y`\n     * values.\n     */\n    public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }\n\n /**\n  * takes a `Vector2f` object `r` as input and returns a new `Vector2f` object\n  * representing the difference between the current vector and `r`.\n  * \n  * @param r 2D vector to be subtracted from the original vector.\n  * \n  * \t- `x`: The first component of the vector, which represents the x-coordinate of\n  * the point.\n  * \t- `y`: The second component of the vector, which represents the y-coordinate of\n  * the point.\n  * \n  * @returns a new `Vector2f` object representing the difference between the input\n  * vector and the reference vector.\n  * \n  * The output is a new Vector2f instance with x and y components computed as the\n  * difference between the input vector's x and y components and the input vector itself.\n  */\n\tpublic Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}\n\n /**\n  * takes a single float argument `r` and returns a new `Vector2f` instance with the\n  * component-wise difference between the current vector and the given value.\n  * \n  * @param r 2D vector to subtract from the current vector.\n  * \n  * @returns a new `Vector2f` object representing the difference between the original\n  * vector and the given value.\n  * \n  * \t- The `Vector2f` object represents a 2D point in homogeneous coordinates.\n  * \t- The `x` and `y` fields represent the x- and y-coordinates of the point, respectively.\n  * \t- The `r` parameter represents the distance from the original point to be subtracted.\n  * \n  * The returned output is a new `Vector2f` object that represents the difference\n  * between the original point and the distance specified by the `r` parameter.\n  */\n\tpublic Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}\n\n /**\n  * takes a `Vector2f` argument `r` and returns a new `Vector2f` object with the product\n  * of the current object's `x` and `y` components multiplied by the corresponding\n  * components of the `r` argument.\n  * \n  * @param r 2D vector that multiplies with the current vector.\n  * \n  * \t- `x` and `y` are double values representing the coordinates of the vector.\n  * \n  * @returns a new vector with the product of the input vector's x and y components\n  * multiplied by the corresponding values of the argument vector.\n  * \n  * \t- The output is of type `Vector2f`, indicating that it represents a 2D vector\n  * with x and y components.\n  * \t- The x and y components of the output are calculated by multiplying the x and y\n  * components of the input vector `r` by the corresponding components of the input\n  * vector `this`.\n  * \t- The resulting output is a new vector object, which is returned as the function\n  * value.\n  */\n\tpublic Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}\n\n /**\n  * multiplies the vector's components by a given scalar value, resulting in a new\n  * vector with the same magnitude and direction as the original, but with the x and\n  * y coordinates scaled by the specified factor.\n  * \n  * @param r scalar value used to multiply the vector's x and y components.\n  * \n  * @returns a new `Vector2f` instance with the product of the input `r` multiplied\n  * by the corresponding component of the original vector.\n  * \n  * \t- The output is a `Vector2f` object that represents the result of multiplying the\n  * `x` and `y` components of the input parameter `r` by the same value.\n  * \t- The resulting vector has the same dimensions as the input vector, with the\n  * magnitude of each component being the product of the corresponding component of\n  * the input vector and the input parameter `r`.\n  * \t- The direction of the output vector is the same as that of the input vector,\n  * since the multiplication is commutative for vectors.\n  */\n\tpublic Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}\n\n /**\n  * takes a `Vector2f` argument `r` and returns a new `Vector2f` instance with x-axis\n  * divided by r.x and y-axis divided by r.y.\n  * \n  * @param r 2D vector to which the current vector is divided.\n  * \n  * \t- `x`: The real part of the input vector.\n  * \t- `y`: The imaginary part of the input vector.\n  * \n  * @returns a new vector with the same x-coordinates as the original vector, scaled\n  * by the ratio of the input vector's x-coordinate to its own x-coordinate.\n  * \n  * The output is a new Vector2f object with x and y components computed as the dividend\n  * divided by the divisor. Specifically, the x component is equal to the dividend x\n  * / divisor, while the y component is equal to the dividend y / divisor.\n  */\n\tpublic Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}\n\n /**\n  * takes a single float argument and returns a new `Vector2f` instance with scaled x\n  * and y components proportional to the input value.\n  * \n  * @param r scale factor used to divide the vector's components by.\n  * \n  * @returns a vector with a magnitude equal to the inverse of the input `r`, and a\n  * direction that is the same as the original vector.\n  * \n  * \t- The `Vector2f` class represents a 2D point in homogeneous coordinates, with x\n  * and y components.\n  * \t- The function returns a new instance of `Vector2f`, where both the x and y\n  * components are divided by the input parameter `r`.\n  * \t- The output has the same dimensions as the original input, i.e., it is a 2D point\n  * in homogeneous coordinates.\n  */\n\tpublic Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}\n\n /**\n  * calculates the absolute value of a `Vector2f` object's x and y components, returning\n  * a new `Vector2f` object with those values.\n  * \n  * @returns a new `Vector2f` instance containing the absolute values of its input parameters.\n  * \n  * \t- The `x` and `y` values represent the absolute value of the input vector's components.\n  * \t- The output is a new Vector2f object that contains the absolute values of the\n  * input vector's components.\n  * \t- The returned object has the same type as the input object, which in this case\n  * is Vector2f.\n  * \t- The function does not modify the original input vector.\n  */\n\tpublic Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}\n\n /**\n  * returns a string representation of a point (x,y) by combining the values of x and\n  * y into a single string.\n  * \n  * @returns a string representation of a point in coordinates, consisting of the\n  * values of `x` and `y` separated by a space.\n  */\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}\n\n /**\n  * sets the `x` and `y` components of a `Vector2f` object to the input values, returning\n  * the modified object for chaining.\n  * \n  * @param x 2D position of the vector in the x-axis.\n  * \n  * @param y 2nd component of the `Vector2f` object being modified, and its value is\n  * assigned to the `y` field of the object in the function.\n  * \n  * @returns a reference to the same instance of the `Vector2f` class with updated `x`\n  * and `y` values.\n  * \n  * The returned output is a reference to the same `Vector2f` instance. This means\n  * that the original object remains unchanged and the modified values of `x` and `y`\n  * are reflected in the returned output.\n  * \n  * The returned output has the same values for `x` and `y` as the input parameters,\n  * which are assignable to the member variables `x` and `y` respectively.\n  */\n\tpublic Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n /**\n  * sets the x and y components of the vector to the corresponding values of the given\n  * vector argument, and returns a reference to the modified vector object.\n  * \n  * @param r 2D vector to be set as the value of the `Vector2f` object returned by the\n  * function.\n  * \n  * \t- `getX()` and `getY()` represent the x-axis and y-axis coordinates of the vector,\n  * respectively.\n  * \n  * @returns a reference to the original vector instance with its components updated\n  * to match the values of the provided vector.\n  * \n  * \t- The output is a reference to the same Vector2f instance as the original input\n  * parameter.\n  * \t- The x and y coordinates of the output are set to the values passed in the r parameter.\n  */\n\tpublic Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}\n\n    /**\n     * returns a new `Vector3f` object containing the values of the current vector's `x`,\n     * `y`, and `z` components, where all components are set to zero except for the\n     * specified `x`, `y` components.\n     * \n     * @returns a vector with coordinates (x, y, 0).\n     * \n     * The returned object is a `Vector3f` instance, representing a 3D vector with three\n     * components: x, y, and z.\n     * Each component represents a floating-point value, indicating the magnitude and\n     * direction of the vector in the corresponding dimension.\n     * The vector is initialized to have an x-component of 0, y-component of 0, and\n     * z-component of 0, which means it points in the default \"up\" direction in 3D space.\n     */\n    public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }\n\n /**\n  * returns the value of the `x` field.\n  * \n  * @returns the value of `x`.\n  */\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n /**\n  * sets the value of the `x` field within the object to which it belongs.\n  * \n  * @param x float value that sets the field 'x' of the class to which the function belongs.\n  */\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n /**\n  * retuns the value of the `y` field.\n  * \n  * @returns the value of the `y` field.\n  */\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n /**\n  * sets the value of the member field `y` to the argument passed as a `float`.\n  * \n  * @param y 2D point's `y` coordinate that will be assigned to the `y` field of the\n  * 2D point object upon execution of the function.\n  */\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n /**\n  * compares two `Vector2f` objects based on their `x` and `y` components, returning\n  * `true` if they are equal, and `false` otherwise.\n  * \n  * @param r 2D vector to be compared with the current vector.\n  * \n  * \t- `x`: The `x` property of `r` represents the real-valued coordinate along the x-axis.\n  * \t- `y`: The `y` property of `r` represents the real-valued coordinate along the y-axis.\n  * \n  * @returns a boolean value indicating whether the object is equal to the provided vector.\n  */\n\tpublic boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}\n\t\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":400,"docLength":null},{"id":"80df2caf-4c0f-6eab-1c44-1c4268fb3643","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"calculates the Euclidean distance between a point and the origin, using the square root of the sum of the point's x and y coordinates squared.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of its input coordinates, expressed as a float value.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f v1 = new Vector2f(3, 4);\n        float length = v1.length();\n        System.out.println(\"Length of v1 is \" + length);\n    }\n}\n","description":"\nThis will output the value `5`, which is the distance between (3, 4) and the origin point (0, 0).\n\n[/DONE]\n[ACCORDION-END]\n\n[ACCORDION-BEGIN [Step 7: ](Create a method in Vector2f to calculate the angle with another vector)]\nIn this step you will create the `angle` method which calculates the angle between the current vector and another vector.\n\nOpen the file **`Vector2f.java`** located under **`<SAP Cloud Platform Developer Edition for SAP HANA, express edition instance>/tutorial/java-level01/src/main/java/com/sap/hana/hibernate/`**.\n\nThe method will calculate the angle between two vectors and return it as a `float`.\n\nThe calculation is done using the formula: θ = arccos (dot product of the two vectors / (length of vector1 * length of vector2))\n\nProvide an example of how to use this java method:\n"},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}","location":{"start":13,"insert":13,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"c0da3ce6-253d-7292-8c42-e09e48254c62","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"computes the maximum value of two floating-point arguments and returns it as a float value.","params":[],"returns":{"type_name":"float","description":"the larger of the two input values, `x` and `y`.","complex_type":false},"usage":{"language":"java","code":"public float max() {\n\treturn Math.max(x, y);\n}\n\npublic static void main(String[] args) {\n\tVector2f v = new Vector2f(5, 3);\n\tSystem.out.println(\"Max value: \" + v.max()); // prints 5\n}\n","description":"\nThis code creates a new vector with x and y values of 5 and 3 respectively, then calls the max method which returns the maximum value between the two components (in this case 5) and prints it out to the console."},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, y);\n\t}","location":{"start":17,"insert":17,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"6b4bcec2-730a-8fbc-4148-be47e4212355","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"computes the dot product of a vector `r` and a vector `x` or `y`, returning the result as a float value.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be multiplied with the object's `x` and `y` components, resulting in the dot product of the two vectors.\n\n* `r`: A `Vector2f` object that represents a two-dimensional point in the mathematical plane. It has two attributes: `x` and `y`, which represent the x-coordinate and y-coordinate of the point, respectively.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and a given vector `r`.","complex_type":false},"usage":{"language":"java","code":"// Declare two vectors\nVector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(-2, -1);\n\n// Calculate the dot product of these two vectors\nfloat result = v1.dot(v2); // result is -6\n","description":"\nIn this example, we created two `Vector2f` objects with x-component 3 and y-component 4 and -2 and -1 respectively. We then called the dot method on `v1` with `v2` as an argument and assigned the result to a float variable `result`. The resulting dot product is stored in the variable `result`. Note that this code will produce a negative value since we multiplied two negative numbers."},"name":"dot","code":"public float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}","location":{"start":31,"insert":21,"offset":"\t","indent":1,"comment":{"start":20,"end":30}},"item_type":"method","length":3,"docLength":10},{"id":"3a91fc5b-5bd0-678e-2049-0336f942b9a0","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"normalizes a `Vector2f` instance by dividing its components by their magnitude, resulting in a unitized vector.","params":[],"returns":{"type_name":"Vector2f","description":"a normalized vector with a length of 1.\n\nThe output is a new `Vector2f` object that represents the normalized form of the original vector.\n\nThe x-component of the output vector is calculated as the original x-component divided by the length of the original vector.\n\nThe y-component of the output vector is calculated as the original y-component divided by the length of the original vector.\n\nThe length of the output vector is always equal to 1, regardless of the length of the original vector.","complex_type":true},"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(3, 4);\nSystem.out.println(\"myVector: \" + myVector); // Output: (3, 4)\nVector2f normalizedMyVector = myVector.normalized();\nSystem.out.println(\"normalizedMyVector: \" + normalizedMyVector); // Output: (0.6, 0.8)\n","description":"\nIn this example, the vector is first defined as `(3, 4)`. The `normalized()` method is then called on it and its output is stored in a variable named `normalizedMyVector`. This variable's value is then printed using `System.out.println()`.\nThe output of both vectors should be very similar since the difference between them is small and can be neglected. However, the `normalized()` method will return slightly different values than the original vector because it uses floating-point arithmetic which may result in a slight loss of precision due to rounding errors.\nAs for your second question, I'm afraid that you are mistaken in what the output should be. The correct way to check whether two vectors are equal is by using their `equals()` method. This compares the values of both vectors component-wise and returns a boolean value indicating whether they are equal or not.\nThe reason for this is that floating-point arithmetic can result in rounding errors which may cause your vector's components to be slightly different when compared with another vector using `==` operator. Therefore, it is advised to use the `equals()` method to check if two vectors are equal instead of comparing them directly with the `==` operator.\nAlso, I would like to point out that the code you provided does not compile as `Vector2f` is a class name and it needs to be initialized before being used."},"name":"normalized","code":"public Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}","location":{"start":35,"insert":35,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"c54524ba-1a44-15aa-7744-fe8ed10c2e89","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"computes the vector product of two vectors, returning a floating-point value representing the dot product of the two vectors.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that the function will perform the cross product operation with.\n\n* `r` is a `Vector2f` object representing a 2D point with x and y coordinates.\n* `x` and `y` are the x and y coordinates of the point, respectively.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the cross product of two vectors.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f v1 = new Vector2f(3, 4);\n        Vector2f v2 = new Vector2f(-5, 8);\n        System.out.println(v1.cross(v2)); // Output: -70\n    }\n}\n","description":"\nIn this example, the `cross` method is used to calculate the cross product of two 2D vectors. The output is a real number representing the magnitude and direction of the resulting vector. In this case, the resulting vector is (-70)."},"name":"cross","code":"public float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}","location":{"start":50,"insert":41,"offset":"\t","indent":1,"comment":{"start":40,"end":49}},"item_type":"method","length":3,"docLength":9},{"id":"44dcc295-7cac-e09b-7e4c-0ae1d6c6ac96","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes two `Vector2f` arguments, `dest` and `lerpFactor`, and returns a new `Vector2f` object with a interpolated value between the two provided values.","params":[{"name":"dest","type_name":"Vector2f","description":"2D position to which the interpolation will be applied.\n\n`dest`: A `Vector2f` object that represents the destination point in 2D space.\n`lerpFactor`: A floating-point value representing the factor by which the current position is to be interpolated between the start and end positions.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"0 to 1 value that determines how much the source vector should be blended with the destination vector to produce the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the interpolated position between the original vector and the destination vector.\n\n* The output is a `Vector2f` object that represents the interpolated value between the original `Vector2f` parameter `this` and the destination `Vector2f` parameter `dest`.\n* The interpolation is performed by subtracting the `this` parameter from the `dest` parameter, multiplying the result by the `lerpFactor`, and then adding the resulting vector back to the `this` parameter.\n* The `lerpFactor` parameter represents the ratio of the distance between the `this` and `dest` parameters to be interpolated. A value of 1.0 results in a straight line interpolation, while a value less than 1.0 results in a slowing down of the interpolation, and a value greater than 1.0 speeds it up.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector2f a = new Vector2f(0, 0);\n\tVector2f b = new Vector2f(1, 1);\n\tfloat factor = 0.5f;\n\t\n\t// Call the lerp method on the vector objects, passing in the other vector and the linear interpolation factor as arguments.\n\ta.lerp(b, factor);\n}\n","description":"\nThis example will result in a new Vector2f object with components (0.5, 0.5)."},"name":"lerp","code":"public Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":66,"insert":54,"offset":"\t","indent":1,"comment":{"start":53,"end":65}},"item_type":"method","length":3,"docLength":12},{"id":"e008143e-1123-fdbd-f349-bb8ded362eba","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes a single argument `angle` representing the angle of rotation in radians and returns a new `Vector2f` instance with the rotated coordinates.","params":[{"name":"angle","type_name":"float","description":"2D angle of rotation in radians, which is multiplied by the vector's x and y components to produce the rotated vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new vector with x and y components rotated by the specified angle.\n\n* The vector is represented as a 2D point in homogeneous coordinates, where x and y represent the coordinates of the point in the original coordinate system, and w represents the magnitude or length of the point.\n* The rotation is performed around the origin, as indicated by the angle parameter passed to the function.\n* The rotation matrix is derived from the cosine and sine of the angle, which are calculated using the `Math.toRadians` method.\n* The resulting vector is a transformation of the original vector, with its coordinates rotated by the specified angle.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector2f vector = new Vector2f(1, 0);\n\tfloat angle = (float) Math.PI / 4;\n\n\tVector2f rotatedVector = vector.rotate(angle);\n\n\tSystem.out.println(\"The original vector is: \" + vector);\n\tSystem.out.println(\"The rotated vector is: \" + rotatedVector);\n}\n","description":"\nThis would print the following lines to the console:\n"},"name":"rotate","code":"public Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}","location":{"start":79,"insert":70,"offset":"\t","indent":1,"comment":{"start":69,"end":78}},"item_type":"method","length":7,"docLength":9},{"id":"ebb4e74d-bb91-1784-be45-d45789da4833","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"adds two `Vector2f` objects together by adding their corresponding x and y coordinates and returns a new `Vector2f` object with the result.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be added to the current vector.\n\n* `x`: A double value representing the X-coordinate of the input vector.\n* `y`: A double value representing the Y-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance representing the sum of the input vectors.\n\nThe returned output is a new Vector2f object that represents the sum of the input vectors' x-coordinate and y-coordinate. The x-coordinate is calculated by adding the input vector's x-coordinate to the current vector's x-coordinate, and similarly for the y-coordinate.","complex_type":true},"usage":{"language":"java","code":"public class Vector2fTest {\n    @Test\n    public void testAdd() {\n        Vector2f vector1 = new Vector2f(3, 4);\n        Vector2f vector2 = new Vector2f(5, 6);\n        Vector2f result = vector1.add(vector2);\n        \n        assertEquals(\"(8.0, 10.0)\", result.toString());\n    }\n}\n","description":"\nThis code tests the `Vector2f` class's add method by creating two vectors (3, 4) and (5, 6) and then adding them together using the method. The resulting vector is then converted to a string using the `toString()` function and compared with the expected result \"8.0, 10.0\".\nThe test passes if these two values match and fails otherwise."},"name":"add","code":"public Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}","location":{"start":96,"insert":87,"offset":"\t","indent":1,"comment":{"start":86,"end":95}},"item_type":"method","length":3,"docLength":9},{"id":"6baf16f3-a496-609a-fc4c-f69dfc4a9069","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"adds a floating-point value to a `Vector2f` object, returning a new `Vector2f` with the sum.","params":[{"name":"r","type_name":"float","description":"2D vector addition to be performed on the `Vector2f` instance being manipulated by the function.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the sum of the original vector and the provided float value.\n\nThe returned Vector2f object has an x-coordinate that is equal to the original x-coordinate plus the input r, and a y-coordinate that is equal to the original y-coordinate plus the input r. This means that the resulting vector's magnitude (length) is equal to the sum of the magnitudes of the original vector and the input r, and its direction is the same as the original vector's direction.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f v = new Vector2f();\n        float r = 5;\n        Vector2f v_plus = v.add(r);\n        \n        System.out.println(\"Vector addition result: \" + v_plus);\n    }\n}\n","description":"\nThis code creates a `Vector2f` object and assigns it to the variable `v`, then it sets the value of `r` to 5 and uses the add method to create a new `Vector2f` object with the sum of its components being the input parameter, which is assigned to the variable `v_plus`. Finally, it prints out the result using the toString method. The output would be:\n"},"name":"add","code":"public Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}","location":{"start":109,"insert":100,"offset":"\t","indent":1,"comment":{"start":99,"end":108}},"item_type":"method","length":3,"docLength":9},{"id":"24c33b38-8ebc-92b6-ff4a-e591a1c7a460","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes two floating-point arguments `x` and `y`, and returns a new `Vector2f` instance with the sum of the current instance's `x` and `y` components and the given `x` and `y` components.","params":[{"name":"x","type_name":"float","description":"2D coordinate that is added to the current position of the vector.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the sum of the current vector's components and the input parameters.\n\nThe returned vector is a new instance of `Vector2f`.\nThe x component of the returned vector is equal to the sum of the x components of the input vectors.\nThe y component of the returned vector is equal to the sum of the y components of the input vectors.","complex_type":true},"usage":{"language":"java","code":"// Create a vector with x=2 and y=3\nVector2f v1 = new Vector2f(2, 3);\n\n// Create another vector with x=4 and y=5\nVector2f v2 = new Vector2f(4, 5);\n\n// Add v1 to v2\nVector2f result = v1.add(v2);\n\n// Print the resulting vector\nSystem.out.println(\"The resulting vector is: \" + result);\n","description":"\nThis would create a vector with x=6 and y=8, since it adds 4 to 2 (the x component) and 5 to 3 (the y component)."},"name":"add","code":"public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }","location":{"start":126,"insert":114,"offset":" ","indent":4,"comment":{"start":113,"end":125}},"item_type":"method","length":3,"docLength":12},{"id":"dc4e9fee-fd72-e4aa-da4f-5fa45e19fcad","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes a `Vector2f` argument `r` and returns a new `Vector2f` object representing the difference between the input vector and the reference vector.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be subtracted from the original vector.\n\n* `x`: The first component of the vector (a double value).\n* `y`: The second component of the vector (also a double value).","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the difference between the input vector and the reference vector.\n\nThe returned Vector2f object has two components, x and y, which represent the difference between the original vector's coordinates and the given vector's coordinates. Specifically, the value of each component is equal to the corresponding coordinate of the original vector minus the coordinate of the given vector.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(5, 3);\nVector2f v2 = new Vector2f(4, 2);\nVector2f result = v1.sub(v2);\nSystem.out.println(\"The result of the subtraction is: \" + result.toString());\n","description":"\nHere's a breakdown of what happens when this code runs:\n\n1. `Vector2f v1` creates a new vector object with x=5 and y=3, which represents point (5, 3) in 2D space.\n2. `Vector2f v2` creates a new vector object with x=4 and y=2, which represents point (4, 2) in 2D space.\n3. `result = v1.sub(v2)` performs the subtraction operation on two vectors. The result of this operation is a new vector containing the difference between the two input vectors' x and y components, which is (1, 1).\n4. `System.out.println(\"The result of the subtraction is: \" + result.toString());` prints the result of the subtraction to the console as \"The result of the subtraction is: (1, 1)\".\n\nNote that this code only demonstrates one way of using the method. The method can also be used in other ways and with different inputs."},"name":"sub","code":"public Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}","location":{"start":147,"insert":130,"offset":"\t","indent":1,"comment":{"start":129,"end":146}},"item_type":"method","length":3,"docLength":17},{"id":"4aacf0ad-69b7-0c82-404b-06b5cb56fe14","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes a single floating-point argument `r` and returns a new `Vector2f` object representing the difference between the original vector's components and the given value.","params":[{"name":"r","type_name":"float","description":"2D vector to subtract from the current vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance representing the difference between the original vector and the given value.\n\nThe `Vector2f` object returned by the function has two components, x and y, which represent the subtracted values of the original vector's x and y components, respectively. These components have the same data type as the original vector's components, i.e., they are both float values. Therefore, the returned vector has the same magnitude and direction as the original vector, but with the values of its components shifted by the given value 'r'.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(5, 3);\nfloat number = 2;\nVector2f result = vector1.sub(number);\nSystem.out.println(result); // Output: (3, 1)\n","description":"\nThe above code creates a `Vector2f` instance with x and y coordinates of 5 and 3 respectively, and then uses the method sub to subtract the number 2 from it. The resulting Vector2f object is then printed using the `toString()` method, which results in the output \"(3, 1)\".\nNote that the value of 'r' passed as an argument to the method sub is a real-valued number, not another vector. Therefore, the result will be a Vector2f instance with coordinates (x - r, y - r)."},"name":"sub","code":"public Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}","location":{"start":167,"insert":151,"offset":"\t","indent":1,"comment":{"start":150,"end":166}},"item_type":"method","length":3,"docLength":16},{"id":"b0922208-dc06-0786-d343-ac4389a54ff1","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"multiplies its input vector by a scalar value, resulting in a new vector with the product of the corresponding components.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that the current vector will be multiplied by, resulting in a new 2D vector output.\n\n* `r.getX()` returns the x-coordinate of the input vector.\n* `r.getY()` returns the y-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new vector with the product of the input vectors' x and y components.\n\nThe returned value is a new Vector2f object with x and y components calculated by multiplying the current vector's x and y components with their corresponding counterparts in the passed-in argument vector r.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector1 = new Vector2f();\n        vector1.setX(3);\n        vector1.setY(4);\n        \n        Vector2f vector2 = new Vector2f();\n        vector2.setX(5);\n        vector2.setY(6);\n        \n        System.out.println(\"vector1 * vector2 = \" + vector1.mul(vector2));\n    }\n}\n","description":"\nThis code will output the following:\n"},"name":"mul","code":"public Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}","location":{"start":191,"insert":171,"offset":"\t","indent":1,"comment":{"start":170,"end":190}},"item_type":"method","length":3,"docLength":20},{"id":"e45c73c8-f809-eb8c-9a4d-6375a78e8c71","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"multiplies its input vector by a scalar value, returning a new vector with the product.","params":[{"name":"r","type_name":"float","description":"scalar value that is multiplied with the vector's X and Y components to produce the resultant vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a vector with the product of the input `r` and the corresponding component of the original vector.\n\n* The output is a `Vector2f` object, which represents a 2D point with x and y components.\n* The `x` and `y` components of the output are calculated by multiplying the original `x` and `y` components by the input parameter `r`.\n* The output has the same orientation as the original vector, meaning that it retains the original direction but is scaled by the factor `r`.","complex_type":true},"usage":{"language":"java","code":"public class Vector2f {\n\tfloat x, y;\n\n\t// constructor that takes two arguments x and y\n\tpublic Vector2f(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t/**\n\t * Multiplies each component of a vector by the input value 'r' \n\t * (represented as a float), returning the modified vector.\n\t * \n\t * @param r scale factor that multiplies all components of the vector.\n\t * @return modified vector with x and y values multiplied by the input argument 'r'.\n\t */\n\tpublic Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}\n\n\t// other methods...\n}\n","description":"\nNow consider a program that uses this method:\n"},"name":"mul","code":"public Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}","location":{"start":213,"insert":195,"offset":"\t","indent":1,"comment":{"start":194,"end":212}},"item_type":"method","length":3,"docLength":18},{"id":"4ea1151d-4adb-c196-cb45-d8bd46da91b2","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes a reference to another `Vector2f` object as input and returns a new `Vector2f` object with the component values scaled by the reciprocal of the input parameter.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to which the current vector is being divided.\n\n* `x`: The real component of the input vector.\n* `y`: The imaginary component of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new vector with the same x-coordinate as the original vector, scaled by the reciprocal of the input vector's x-coordinate.\n\nThe output is a new Vector2f object with the x-component set to the result of dividing the input parameter `x` by the r.getX() method, and the y-component set to the result of dividing the input parameter `y` by the r.getY() method.\n\nThe returned output has the same scale as the input parameter `r`.\n\nThe returned output has a consistent direction with the input parameter `r`.","complex_type":true},"usage":{"language":"java","code":"Vector2f r = new Vector2f(1, 1);\nVector2f result = new Vector2f().div(r);\nassertEquals(new Vector2f(1, 1), result);\n","description":"\nThis code is a unit test that verifies the behavior of the method div. It creates two instances of the class Vector2f: r and result. Then, it uses the instance method div of the result object to set its components to the results of dividing the components of the vector r by each component of itself. Finally, it compares the components of the resulting vector with the expected value (1, 1), which is the same as the original input vector, and asserts that the two vectors are equal.\nNote: The assertEquals method checks if the actual result of dividing a Vector2f instance by another one is equal to the expected result, which is also a Vector2f instance with components (1, 1). If the two vectors are not equal, the test fails and the code throws an AssertionError."},"name":"div","code":"public Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}","location":{"start":233,"insert":217,"offset":"\t","indent":1,"comment":{"start":216,"end":232}},"item_type":"method","length":3,"docLength":16},{"id":"c84ed60a-3df2-2194-3f4f-107cea7349b7","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"takes a float argument `r` and returns a new `Vector2f` instance with x-component divided by `r` and y-component divided by `r`.","params":[{"name":"r","type_name":"float","description":"scalar factor by which the `Vector2f` instance is to be divided.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a vector with x and y components scaled by the input parameter `r`.\n\nThe returned Vector2f object represents the division of the original Vector2f object by the input floating-point value r.\n\nThe x and y components of the returned Vector2f object have values that are equal to the original x and y components divided by the input r.\n\nThe returned Vector2f object has a length (or magnitude) that is equal to the original Vector2f object's length divided by the input r.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(5, 10);\nfloat divisor = 2;\nVector2f quotient = vector.div(divisor);\nSystem.out.println(\"The vector divided by the divisor is \" + quotient);\n","description":"\nThis code would output the following:\n"},"name":"div","code":"public Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}","location":{"start":253,"insert":237,"offset":"\t","indent":1,"comment":{"start":236,"end":252}},"item_type":"method","length":3,"docLength":16},{"id":"e1fd9422-d237-36be-3347-96bc42ea9a31","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"returns a new `Vector2f` object containing the absolute values of its input components, `x` and `y`.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object containing the absolute values of the input vector's `x` and `y` components.\n\n* The output is a new Vector2f instance, containing the absolute values of the original Vector2f's x and y components.\n* The returned Vector2f has the same scale as the original Vector2f.\n* The returned Vector2f preserves the original orientation of the Vector2f, meaning that its x-axis points in the same direction as the original Vector2f's x-axis.","complex_type":true},"usage":{"language":"java","code":"Vector2f vec1 = new Vector2f(-3, 4);\nSystem.out.println(vec1); // (-3, 4)\nVector2f absVec1 = vec1.abs();\nSystem.out.println(absVec1); // (3, 4)\n","description":"\nThe output should be:\n"},"name":"abs","code":"public Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}","location":{"start":270,"insert":257,"offset":"\t","indent":1,"comment":{"start":256,"end":269}},"item_type":"method","length":3,"docLength":13},{"id":"c068dce1-5bbc-2485-0b4f-351fa84d58ac","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"returns a string representation of its arguments, concatenating them with parentheses and space separators.","params":[],"returns":{"type_name":"String","description":"a string representation of a point in the Cartesian coordinate system, consisting of an open parenthesis, two numbers, and a closing parenthesis.","complex_type":false},"usage":{"language":"java","code":"public class Vector2f {\n\tprivate float x, y;\n\tpublic Vector2f(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\t\n\t/**\n\t* returns a string representation of the vector (x,y).\n\t* @return The String representation of this object.\n\t*/\n\tpublic String toString() {\n\t\treturn \"(\" + x + \", \" + y + \")\";\n\t}\n\t\n\t/**\n\t* Sets the x and y components of a Vector2f object to the input values, returning the modified object for chaining.\n\t* @param x 2D position of the vector in the x-axis.\n\t* @param y 2nd component of the Vector2f object being modified, and its value is assigned to the y field of the object in the function.\n\t* @return A reference to the same instance of the Vector2f class with updated x and y values.\n\t*/\n\tpublic Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\t\n\t/**\n\t* Sets the x and y components of the vector to the corresponding values of the given vector argument, and returns a reference to the modified vector object.\n\t* @param r 2D vector to be set as the value of the Vector2f object returned by the function.\n\t* @return A reference to the original vector instance with its components updated to match the values of the provided vector.\n\t*/\n\tpublic Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t}\n}\n","description":"\nYou can use this method in your code like this: \n"},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}","location":{"start":281,"insert":274,"offset":"\t","indent":1,"comment":{"start":273,"end":280}},"item_type":"method","length":3,"docLength":7},{"id":"35b063b8-f5e3-e593-6741-0d8563f5d0a6","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"modifies the instance fields `x` and `y` of the class `Vector2f` and returns a reference to the same modified instance.","params":[{"name":"x","type_name":"float","description":"2D coordinate of the point where the vector should be set to, and it is assigned the value passed in as an argument.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the `Vector2f` object being modified and is assigned the value provided by the caller.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a reference to the same `Vector2f` object, allowing it to be re-assigned with new values.\n\n* The `Vector2f` instance is updated with the new values of `x` and `y`.\n* The returned output is the same instance as the original input, with the updates applied.\n* The output has the same type and attributes as the original input.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\t// Creating a new instance of the Vector2f class\n\t\tVector2f vector = new Vector2f();\n\t\t// Setting the values of x and y components using the set method\n\t\tvector.set(3.5F, 10.6F);\n\t}\n}\n","description":"\nIn this example, we created a `new` instance of the `Vector2f` class and called its `set` method with two parameters: `3.5F` for x and `10.6F` for y. The `set` method then assigned these values to the `x` and `y` member variables, respectively, of the newly created vector instance.\n\nNote that if we had not included the return statement in the set method, it would have simply modified the member variables of the vector, but it would not have returned anything. This is why when we call the set method on a vector object and then print out the values of its x and y components using the getX() and getY() methods, we see the updated values:\n"},"name":"set","code":"public Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}","location":{"start":304,"insert":285,"offset":"\t","indent":1,"comment":{"start":284,"end":303}},"item_type":"method","length":5,"docLength":19},{"id":"89b4b9b8-bef8-94ad-2047-4bf19737cc94","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"sets the x and y components of the vector to the corresponding values of the argument vector.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be set as the new value of the `Vector2f` instance, and its `x` and `y` components are used to update the corresponding fields of the instance.\n\n* `getX()` and `getY()`: These methods are used to access the x- and y-coordinates of the vector, respectively.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a reference to the original vector with its components modified.\n\nThe output is a reference to the same vector instance as the input argument.\nThe x-component and y-component of the output vector are set to the corresponding components of the input argument.\nThe output vector has the same values as the input argument after the assignment.","complex_type":true},"usage":{"language":"java","code":"Vector2f v = new Vector2f(); // creating a new object\nv.set(new Vector2f(10, 20)); // setting the x and y components of the vector to 10 and 20 respectively\n","description":"\nThis will set the x component of the vector to 10, and the y component to 20. The returned output is a reference to the same Vector2f instance with updated x and y values. This means that the original object remains unchanged and the modified values of x and y are reflected in the returned output."},"name":"set","code":"public Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}","location":{"start":327,"insert":310,"offset":"\t","indent":1,"comment":{"start":309,"end":326}},"item_type":"method","length":4,"docLength":17},{"id":"303c6b59-0f80-21ba-9446-da87eb3fb5d3","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"converts a `Vector2f` object into a `Vector3f` object by adding an extra component representing the z-coordinate.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance containing the values `x`, `y`, and `0`.\n\n* `x`: The value of x in the vector, representing the x-coordinate.\n* `y`: The value of y in the vector, representing the y-coordinate.\n* `z`: The value of 0 in the vector, representing the z-coordinate.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(1, 0);\nVector3f v3 = v1.as3DVector();\nSystem.out.println(\"v3.x \" + v3.getX()); // output: v3.x 1\nSystem.out.println(\"v3.y \" + v3.getY()); // output: v3.y 0\nSystem.out.println(\"v3.z \" + v3.getZ()); // output: v3.z 0\n","description":"\nIn this example, we create an instance of Vector2f with coordinates (1,0). Then we call as3DVector on the instance and assign the resulting vector to v3. We then print out each coordinate of v3 to show that all components are initialized to zero except for x which is initialized to 1 and y which is initialized to 0."},"name":"as3DVector","code":"public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }","location":{"start":346,"insert":332,"offset":" ","indent":4,"comment":{"start":331,"end":345}},"item_type":"method","length":3,"docLength":14},{"id":"339c63de-c013-aaa2-bc4f-b82dbc8cfffe","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"returns the value of `x`, a `float` variable, as its output.","params":[],"returns":{"type_name":"float","description":"the value of `x`, which is a floating-point number representing the x-coordinate of an object.","complex_type":false},"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(3, 4);\nfloat xComponent = myVector.getX();\nSystem.out.println(xComponent); // prints 3\n","description":"\nIn the example above, we create a `Vector2f` instance with the `new` keyword and initialize it with `3` for its `x` component and `4` for its `y` component. We then assign the result of calling `getX()` on our `myVector` to the variable `xComponent`. Finally, we print out `xComponent`, which should output `3`. This is because `getX()` simply returns the value of the `x` field within the object that it belongs to, and in this case, the value of `x` for the given vector is indeed `3`."},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":355,"insert":350,"offset":"\t","indent":1,"comment":{"start":349,"end":354}},"item_type":"method","length":3,"docLength":5},{"id":"a8c1dc15-1831-d9aa-3142-aa77fc30c019","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"sets the value of a class instance variable `x` to the input `float` parameter.","params":[{"name":"x","type_name":"float","description":"new value of the `x` field in the object being manipulated by the function.","complex_type":false}],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector = new Vector2f();\n        vector.setX(10.5f);\n        \n        System.out.println(\"x: \" + vector.getX()); // prints 10.5f\n        System.out.println(\"y: \" + vector.getY()); // prints 0.0f\n    }\n}\n","description":""},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":364,"insert":359,"offset":"\t","indent":1,"comment":{"start":358,"end":363}},"item_type":"method","length":3,"docLength":5},{"id":"54dec817-8bbc-bf98-a64b-198f71828145","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"retrieves the value of the `y` field, which is a `float` variable.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the `y` coordinate of an object.","complex_type":false},"usage":{"language":"java","code":"// Declare vector and print its initial values for x and y\nVector2f vector = new Vector2f(1, 2);\nSystem.out.println(\"Initial values of vector:\");\nSystem.out.println(\"\\tX: \" + vector.getX());\nSystem.out.println(\"\\tY: \" + vector.getY());\n\n// Set the x and y components to new values\nvector.setX(3);\nvector.setY(4);\n\n// Print updated values for x and y\nSystem.out.println(\"Updated values of vector:\");\nSystem.out.println(\"\\tX: \" + vector.getX());\nSystem.out.println(\"\\tY: \" + vector.getY());\n","description":"\nThis would output the following:\n"},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":373,"insert":368,"offset":"\t","indent":1,"comment":{"start":367,"end":372}},"item_type":"method","length":3,"docLength":5},{"id":"ffbf7ab3-ab91-3086-3642-f9a501247819","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"sets the value of the member variable `y`.","params":[{"name":"y","type_name":"float","description":"value that will be assigned to the `y` field of the class instance being manipulated by the function.","complex_type":false}],"usage":{"language":"java","code":"Vector2f vector = new Vector2f(0, 0);\nvector.setY(5);\n","description":"\nIn this case, the method setY would set the y component of the vector to 5."},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":383,"insert":377,"offset":"\t","indent":1,"comment":{"start":376,"end":382}},"item_type":"method","length":3,"docLength":6},{"id":"0fecb08a-ba27-5aac-7c47-e938733054e5","ancestors":["21f1b037-dff8-c299-a645-d46cdb9c3d24"],"type":"function","description":"compares the `x` and `y` components of the current instance with those of the provided `Vector2f` instance, returning `true` if they are equal.","params":[{"name":"r","type_name":"Vector2f","description":"2D point to be compared with the current vector for equality.\n\nThe `Vector2f` class represents a two-dimensional vector in homogeneous coordinates. The `x` and `y` fields represent the x- and y-coordinates of the vector, respectively.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the object being compared to `r` has the same x and y coordinates as `r`.","complex_type":false},"usage":{"language":"java","code":"Vector2f p1 = new Vector2f(3, 4);\nVector2f p2 = new Vector2f(3, 4);\nSystem.out.println(p1.equals(p2)); // Outputs \"true\"\n","description":"\nThis is because the `x` and `y` components of `p1` are both equal to 3, which means they are compared as the same value, and since the `y` component of `p1` is also equal to 4, this also evaluates to true. This would then print \"true\" to the console."},"name":"equals","code":"public boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}","location":{"start":398,"insert":387,"offset":"\t","indent":1,"comment":{"start":386,"end":397}},"item_type":"method","length":3,"docLength":11}]}}}