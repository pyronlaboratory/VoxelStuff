{"name":"Vector3f.java","path":"src/com/ch/math/Vector3f.java","content":{"structured":{"description":"A `Vector3f` class that represents 3D vectors in the x, y, and z axes. The class provides methods for setting and retrieving the components of the vector, as well as comparing vectors for equality. Additionally, it includes methods for calculating the magnitude (length), dot product, and cross product of two vectors.","diagram":"digraph G {\n    label=\"com.ch.math.Vector3f\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"math\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            Vector3f [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n        Vector2f\n        Matrix4f\n        Quaternion\n    }\n    Transform\n    Camera3D\n    Quaternion -> Vector3f \n    Quaternion -> Vector3f [style=\"dashed\"]\n    Vector3f -> Quaternion \n    Vector3f -> Quaternion [style=\"dashed\"]\n    Vector3f -> Matrix4f \n    Vector3f -> Vector3f \n    Vector3f -> Transform \n    Vector3f -> Camera3D \n    Vector3f -> Matrix4f [style=\"dashed\"]\n    Vector3f -> Vector2f \n    Vector3f -> Vector3f [style=\"dashed\"]\n}\n","items":[{"id":"a1d007b2-e2f9-a783-fa41-666931ecc2df","ancestors":[],"type":"function","description":"is a data structure that represents a 3D point in the x, y, and z dimensions. It has fields for each component (x, y, and z) and provides methods for accessing and modifying those components. The class also includes methods for comparing equality with other vectors.","name":"Vector3f","code":"public class Vector3f {\n\n\tprivate float x;\n\tprivate float y;\n\tprivate float z;\n\n\tpublic Vector3f() {\n\t\tthis(0, 0, 0);\n\t}\n\t\n\tpublic Vector3f(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\t/**\n\t * calculates the Euclidean distance of a point from its origin using the Pythagorean\n\t * theorem.\n\t * \n\t * @returns the square root of the sum of the squares of the three Cartesian coordinates.\n\t */\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}\n\t\n\t/**\n\t * computes the length of a point in 3D space by squaring its coordinates and summing\n\t * them.\n\t * \n\t * @returns a value representing the length of the square of the input coordinates.\n\t */\n\tpublic float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}\n\n\t/**\n\t * computes and returns the maximum value of three input values `x`, `y`, and `z`.\n\t * \n\t * @returns the maximum value of `x`, `y`, or `z`.\n\t */\n\tpublic float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}\n\n\t/**\n\t * computes the dot product of a vector `r` and the input vector `x`, `y`, or `z`.\n\t * \n\t * @param r 3D vector that the dot product is being computed for.\n\t * \n\t * `r`: A `Vector3f` object representing a 3D vector with properties `x`, `y`, and `z`.\n\t * \n\t * @returns a floating-point number representing the dot product of the input vector\n\t * and the vector represented by the function parameters.\n\t */\n\tpublic float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}\n\n\t/**\n\t * computes the vector that is perpendicular to two given vectors in a three-dimensional\n\t * space.\n\t * \n\t * @param r 3D vector that is being crossed with the current vector, resulting in a\n\t * new 3D vector output.\n\t * \n\t * \t- `r` is a `Vector3f` object representing a 3D vector in homogeneous coordinates.\n\t * \t- `x`, `y`, and `z` are the components of the vector in the x, y, and z directions,\n\t * respectively.\n\t * \n\t * @returns a new vector with the cross product of the input vectors.\n\t * \n\t * \t- The output is a `Vector3f` object representing the cross product of the input\n\t * vectors.\n\t * \t- The components of the output vector are given by the equations x_, y_, and z_,\n\t * which are calculated using the dot product of the input vectors.\n\t * \t- The output vector has a magnitude equal to the product of the magnitudes of the\n\t * input vectors, and its direction is perpendicular to both input vectors.\n\t */\n\tpublic Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}\n\n\t/**\n\t * normalizes a `Vector3f` instance by dividing its components by the magnitude of\n\t * the vector, resulting in a unitized representation of the original vector.\n\t * \n\t * @returns a vector with the magnitude of the original vector and the direction unchanged.\n\t * \n\t * The output is a `Vector3f` object that represents the normalized version of the\n\t * input vector. The normalization is done by dividing each component of the input\n\t * vector by its corresponding length.\n\t * \n\t * The resulting vector has a length of 1, which means that it is a unit vector in\n\t * the coordinate system. This property makes it useful for various mathematical\n\t * operations and applications in computer graphics, physics, and other fields.\n\t */\n\tpublic Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}\n\n\t/**\n\t * rotates a 3D vector by an angle around a specified axis, based on the dot product\n\t * of the vector and the axis.\n\t * \n\t * @param axis 3D rotation axis around which the object will be rotated.\n\t * \n\t * \t- `axis`: A 3D vector representing the rotation axis. It has three components:\n\t * x, y, and z.\n\t * \n\t * @param angle 3D rotation angle of the vector around the specified axis.\n\t * \n\t * @returns a new vector that represents the rotation of the original vector along\n\t * the specified axis by the given angle.\n\t * \n\t * \t- The output is a vector representation of the rotated object.\n\t * \t- The vector components represent the position of the rotated object in 3D space\n\t * after applying the rotation.\n\t * \t- The axis of rotation is specified by the `axis` parameter, which determines the\n\t * direction of the rotation.\n\t * \t- The angle of rotation is specified by the `angle` parameter, which represents\n\t * the amount of rotation applied to the object.\n\t * \t- The function returns a new vector object that represents the rotated position,\n\t * based on the axis and angle parameters provided.\n\t */\n\tpublic Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}\n\n\t/**\n\t * rotates a `Vector3f` instance by the angle represented by the given `Quaternion`\n\t * rotation.\n\t * \n\t * @param rotation 3D rotation matrix that is applied to the `Vector3f` instance being\n\t * rotated.\n\t * \n\t * \t- Quaternion is an object that represents a 3D rotation, consisting of a scalar\n\t * component and a vector component.\n\t * \t- conjugate() returns the complex conjugate of the quaternion, which is used in\n\t * the multiplication operation.\n\t * \n\t * @returns a vector representing the rotated position of the original vector.\n\t * \n\t * \t- The output is a `Vector3f` object representing the rotated position of the\n\t * original input vector.\n\t * \t- The x, y, and z components of the output represent the rotated position in the\n\t * x, y, and z directions, respectively.\n\t * \t- The output is obtained by multiplying the rotation quaternion with the original\n\t * input vector using the `mul` method, then concatenating the result with the conjugate\n\t * of the rotation quaternion using the ` mul` method again.\n\t */\n\tpublic Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}\n\n\t/**\n\t * calculates the linear interpolation between two vectors, resulting in a new vector\n\t * that is the weighted sum of the original vectors.\n\t * \n\t * @param dest 3D vector to which the current vector will be interpolated, and its\n\t * value is used as the starting point for the interpolation.\n\t * \n\t * \t- The `Vector3f` class is used to represent a 3D vector with floating-point values.\n\t * \t- The `sub` method calculates the difference between two vectors by subtracting\n\t * one vector from another.\n\t * \t- The `mul` method multiplies a vector by a scalar value, which in this case is\n\t * `lerpFactor`.\n\t * \t- The `add` method adds a vector to another vector or a scalar value.\n\t * \n\t * @param lerpFactor factor by which the current vector is to be interpolated towards\n\t * the destination vector.\n\t * \n\t * @returns a vector that interpolates between the input `dest` and the current\n\t * position of the object.\n\t * \n\t * The `Vector3f` object returned by the function is a result of interpolating between\n\t * the input `Vector3f` objects using the provided `lerpFactor`.\n\t * \n\t * The resulting vector has the same direction and magnitude as the input vectors,\n\t * but its coordinates are adjusted according to the interpolation factor. Specifically,\n\t * the x, y, and z components of the output vector are calculated as follows:\n\t * \n\t * x = (dest.x * lerpFactor) + (this.x * (1 - lerpFactor));\n\t * y = (dest.y * lerpFactor) + (this.y * (1 - lerpFactor));\n\t * z = (dest.z * lerpFactor) + (this.z * (1 - lerpFactor));\n\t * \n\t * Therefore, the output vector has a smoothed value between the input vectors, with\n\t * the interpolation factor determining the degree of smoothing.\n\t */\n\tpublic Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\t/**\n\t * adds two `Vector3f` objects and returns a new vector with the sum of their components.\n\t * \n\t * @param r 3D vector to be added to the current vector.\n\t * \n\t * \t- `x`: The x-coordinate of the input vector.\n\t * \t- `y`: The y-coordinate of the input vector.\n\t * \t- `z`: The z-coordinate of the input vector.\n\t * \n\t * @returns a new `Vector3f` object representing the sum of the input vectors.\n\t * \n\t * The `Vector3f` object returned by the function represents a sum of two other\n\t * `Vector3f` objects. The x, y, and z components of the returned vector are calculated\n\t * by adding the corresponding components of the two input vectors.\n\t */\n\tpublic Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}\n\t\n\t/**\n\t * adds the components of a provided `Vector3f` object to the corresponding components\n\t * of the current object, resulting in an updated representation of the current object.\n\t * \n\t * @param r 3D vector to be added to the current position of the object, and its\n\t * values are used to increment the object's x, y, and z components.\n\t * \n\t * \t- `x`, `y`, and `z` are the coordinates of the vector, each representing a single\n\t * component of the vector in 3D space.\n\t */\n\tpublic void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}\n\n\t/**\n\t * takes a single float parameter and adds it to the vector's x, y, or z component,\n\t * returning a new Vector3f instance with the updated values.\n\t * \n\t * @param r 3D vector that is added to the current vector value of the object, resulting\n\t * in a new vector with the sum of the two values.\n\t * \n\t * @returns a new `Vector3f` object with the sum of the input vector's x, y, and z\n\t * components and the given scalar value.\n\t * \n\t * The return type of the `add` function is `Vector3f`, which represents a 3D vector\n\t * with floating-point values for x, y, and z components.\n\t * \n\t * The expression `x + r` generates an integer value representing the addition of the\n\t * float argument `r` to the component `x`. Similarly, `y + r` generates an integer\n\t * value representing the addition of `r` to the component `y`, and `z + r` generates\n\t * an integer value representing the addition of `r` to the component `z`.\n\t * \n\t * The resulting vector values are then assigned to a new `Vector3f` object using the\n\t * `new Vector3f()` constructor.\n\t */\n\tpublic Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}\n\t\n\t/**\n\t * takes a `Vector3f` and a scalar value as input, returns the result of adding the\n\t * scaled vector to the current vector.\n\t * \n\t * @param v 3D vector to be scaled and added to the current vector.\n\t * \n\t * \t- `v` is a Vector3f class instance representing a 3D vector with x, y, and z components.\n\t * \t- `scale` is an input float value representing the scaling factor applied to `v`.\n\t * \n\t * @param scale scalar value that is multiplied with the input `Vector3f` before\n\t * adding it to the current vector.\n\t * \n\t * @returns a new vector that is the result of adding the given `v` vector scaled by\n\t * `scale`.\n\t * \n\t * The output is a new `Vector3f` instance that represents the sum of the original\n\t * vector and the scaled version of the input vector.\n\t * The scale factor is applied to both components of the input vector before adding\n\t * them to the original vector.\n\t * The resulting vector has the same components as the original vector, but with the\n\t * scaled components.\n\t */\n\tpublic Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}\n\t\n\t/**\n\t * multiplies a `Vector3f` object by a scalar value and adds it to the current vector\n\t * representation of the object.\n\t * \n\t * @param v 3D vector to be scaled.\n\t * \n\t * \t- `v`: A `Vector3f` object representing a 3D vector with x, y, and z components.\n\t * \t- `scale`: A floating-point value representing the scalar factor to be applied\n\t * to the `v` vector.\n\t * \n\t * @param scale scalar value that is multiplied with the `Vector3f` output of the\n\t * `addSelf()` method, thereby scaling the result of the method call.\n\t */\n\tpublic void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}\n\n\t/**\n\t * calculates the vector difference between two `Vector3f` objects, returning a new\n\t * vector with the differences.\n\t * \n\t * @param r 3D vector to be subtracted from the input `Vector3f`.\n\t * \n\t * \t- `x`: an integer value representing the x-coordination of `r`.\n\t * \t- `y`: an integer value representing the y-coordination of `r`.\n\t * \t- `z`: an integer value representing the z-coordination of `r`.\n\t * \n\t * @returns a new `Vector3f` object representing the difference between the input\n\t * vector and the reference vector.\n\t * \n\t * \t- The returned value is a new Vector3f instance containing the difference between\n\t * the input vectors' x, y, and z components.\n\t * \t- The values of x, y, and z are calculated by subtracting the corresponding values\n\t * of the input vector r from those of the current vector.\n\t * \t- The resulting vector has the same orientation as the original vector, but it\n\t * moves in the opposite direction.\n\t */\n\tpublic Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}\n\n\t/**\n\t * takes a single floating-point value `r` and subtracts it from the corresponding\n\t * components of a `Vector3f` object, returning a new `Vector3f` object with the\n\t * resultant values.\n\t * \n\t * @param r 3D position from which to subtract the vector.\n\t * \n\t * @returns a new `Vector3f` instance representing the difference between the original\n\t * vector and the provided value.\n\t * \n\t * The `Vector3f` object returned by the function has three components: `x`, `y`, and\n\t * `z`. Each component represents the difference between the original value and the\n\t * input parameter `r`. For example, if `x` is 2.0 and `r` is 1.0, then the `x`\n\t * component of the output will be 1.0.\n\t * \n\t * The components of the output are in a specific order, with the `x`, `y`, and `z`\n\t * components corresponding to the x, y, and z axes of a 3D coordinate system.\n\t * \n\t * The output is a new instance of the `Vector3f` class, which means it has its own\n\t * memory location and can be used independently of the original input parameters.\n\t */\n\tpublic Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}\n\n\t/**\n\t * multiplies the components of a `Vector3f` object by the corresponding components\n\t * of another `Vector3f` object, and returns a new `Vector3f` object with the resulting\n\t * values.\n\t * \n\t * @param r 3D vector to which the current vector is multiplied, resulting in a new\n\t * 3D vector output.\n\t * \n\t * \t- `x`, `y`, and `z` are the components of `r`, which represent vectors in 3D space.\n\t * \t- `getX()`, `getY()`, and `getZ()` are methods that provide access to the individual\n\t * components of `r`.\n\t * \n\t * @returns a new vector with the product of the input vectors' coordinates.\n\t * \n\t * \t- The output is a new Vector3f object with the product of the input parameters.\n\t * \t- The x, y, and z components of the output are calculated by multiplying the\n\t * corresponding components of the input vectors.\n\t * \t- The resulting vector has the same semantic meaning as the multiplication of the\n\t * two input vectors in 3D space.\n\t */\n\tpublic Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}\n\n\t/**\n\t * takes a single float argument and multiplies it to the corresponding components\n\t * of a `Vector3f` object, returning a new `Vector3f` object with the result.\n\t * \n\t * @param r scalar value used to multiply each component of the `Vector3f` object.\n\t * \n\t * @returns a new vector with the product of the input vector's components and the\n\t * scalar value `r`.\n\t */\n\tpublic Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}\n\n\t/**\n\t * takes a reference to another `Vector3f` object and returns a new `Vector3f` object\n\t * with the componentwise result of dividing the input by the reference argument.\n\t * \n\t * @param r vector to be divided by, and it is used to calculate the output vector's\n\t * components.\n\t * \n\t * The `Vector3f` class represents a three-dimensional vector in homogeneous coordinates.\n\t * The `x`, `y`, and `z` attributes represent the component values of the vector.\n\t * \n\t * Therefore, when dividing a vector by another vector using this function, the output\n\t * vector will have component values computed as the ratio of the corresponding\n\t * components of the input vectors.\n\t * \n\t * @returns a new vector with the same components as the input vector, but scaled by\n\t * the reciprocal of the input value.\n\t * \n\t * \t- The output is a new `Vector3f` instance with scaled values based on the division\n\t * operation performed on the input vectors.\n\t * \t- The x, y, and z components of the output represent the scaled values of the\n\t * corresponding components of the input vectors.\n\t * \t- The scale factor in each component is calculated by dividing the corresponding\n\t * value of the input vector by the corresponding value of the input vector passed\n\t * as a parameter to the function.\n\t */\n\tpublic Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}\n\n\t/**\n\t * takes a single float argument `r` and returns a new `Vector3f` instance with x,\n\t * y, and z components scaled by the reciprocal of `r`.\n\t * \n\t * @param r scalar value that is used to divide each component of the `Vector3f`\n\t * object returned by the function.\n\t * \n\t * @returns a vector with x, y, and z components scaled by the input factor `r`.\n\t * \n\t * \t- The output is a new instance of the `Vector3f` class with the values of the\n\t * original input divided by the given scalar value.\n\t * \t- The output has the same dimensions as the input, with each component representing\n\t * the corresponding coordinate of the vector divided by the scalar value.\n\t * \t- The output is normalized to have a length of 1, ensuring that the resulting\n\t * vector is properly scaled.\n\t */\n\tpublic Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}\n\n\t/**\n\t * computes and returns a new vector with the absolute values of its component.\n\t * \n\t * @returns a new `Vector3f` instance with the absolute values of its components.\n\t * \n\t * The output is a new Vector3f object containing the absolute value of the input\n\t * vector's x, y, and z components.\n\t */\n\tpublic Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}\n\n\t/**\n\t * returns a string representation of a object by concatenating three values: `x`,\n\t * `y`, and `z`.\n\t * \n\t * @returns a string representation of a point in 3D space, consisting of three values\n\t * separated by spaces.\n\t */\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}\n\n\t/**\n\t * returns a `Vector2f` object containing the x and y coordinates of an entity.\n\t * \n\t * @returns a vector containing the x and y coordinates of a point.\n\t * \n\t * \t- `x`: The first component of the vector, representing the x-coordinate of the point.\n\t * \t- `y`: The second component of the vector, representing the y-coordinate of the\n\t * point.\n\t * \n\t * Both `x` and `y` are doubles, representing real numbers that represent the coordinates\n\t * of the point in a 2D space.\n\t */\n\tpublic Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}\n\n\t/**\n\t * returns a `Vector2f` object representing the y and z components of a point.\n\t * \n\t * @returns a `Vector2f` object containing the values of `y` and `z`.\n\t * \n\t * \t- `y`: This represents the y-component of the vector, which is a floating-point\n\t * value.\n\t * \t- `z`: This represents the z-component of the vector, which is also a floating-point\n\t * value.\n\t * \n\t * The vector itself is an instance of the `Vector2f` class, which is a part of the\n\t * Java Foundation Library (JFL). The `Vector2f` class provides methods for manipulating\n\t * 2D vectors and represents mathematical vectors in two dimensions using homogeneous\n\t * coordinates.\n\t */\n\tpublic Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}\n\n\t/**\n\t * returns a `Vector2f` object containing the `z` and `x` components of an unknown entity.\n\t * \n\t * @returns a `Vector2f` object representing the coordinate pair (z, x).\n\t * \n\t * \t- z is a double value representing the z-component of the vector.\n\t * \t- x is a double value representing the x-component of the vector.\n\t * \t- The vector is represented as a 2D object with two components (x and z).\n\t */\n\tpublic Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}\n\n\t/**\n\t * returns a `Vector2f` object representing the position (x and y coordinates) of an\n\t * object.\n\t * \n\t * @returns a `Vector2f` object containing the values of `x` and `y`.\n\t * \n\t * \t- The returned object is of type `Vector2f`, which represents a 2D point in\n\t * homogeneous coordinates.\n\t * \t- The `y` field of the object contains the Y-coordinate of the point, while the\n\t * `x` field contains the X-coordinate.\n\t * \t- The resulting object is a new instance of `Vector2f`, rather than modifying the\n\t * original input parameters.\n\t */\n\tpublic Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}\n\n\t/**\n\t * generates a vector with the values of z and y.\n\t * \n\t * @returns a `Vector2f` object containing the `z` and `y` coordinates of the point.\n\t * \n\t * \t- The returned Vector2f object represents a point in 2D space with coordinates z\n\t * and y.\n\t * \t- The z coordinate is a float value representing the vertical position of the\n\t * point, ranging from -1 to 1.\n\t * \t- The y coordinate is also a float value representing the horizontal position of\n\t * the point, ranging from -1 to 1.\n\t * \n\t * Overall, the `getZY` function returns a valid 2D coordinate point that can be used\n\t * in various applications.\n\t */\n\tpublic Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}\n\n\t/**\n\t * returns a `Vector2f` object containing the `x` and `z` coordinates of an entity.\n\t * \n\t * @returns a `Vector2f` object containing the `x` and `z` coordinates of a point.\n\t * \n\t * \t- The `Vector2f` object represents a 2D point with x-axis value `x` and z-axis\n\t * value `z`.\n\t * \t- The `Vector2f` class is a part of the Java Standard Library and provides\n\t * operations on 2D points.\n\t * \t- The returned object can be used in various contexts such as graphics, game\n\t * development, and mathematical calculations.\n\t */\n\tpublic Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}\n\n\t/**\n\t * modifies the components of a `Vector3f` object, assigning new values to `x`, `y`,\n\t * and `z`.\n\t * \n\t * @param x 3D position of the vector in the x-axis direction.\n\t * \n\t * @param y 2D position of the vector along the Y-axis.\n\t * \n\t * @param z 3rd component of the vector and sets its value to the provided float value.\n\t * \n\t * @returns a reference to the same `Vector3f` object, which now contains the new x,\n\t * y, and z values.\n\t * \n\t * The `Vector3f` object is modified to have new values for `x`, `y`, and `z`.\n\t * The returned object is itself, with the modifications applied.\n\t */\n\tpublic Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * sets the components of the `Vector3f` object to the corresponding values of the\n\t * provided `r` argument.\n\t * \n\t * @param r 3D vector to be set as the value of the `Vector3f` object.\n\t * \n\t * \t- `getX()`: Returns the x-coordinate of `r`.\n\t * \t- `getY()`: Returns the y-coordinate of `r`.\n\t * \t- `getZ()`: Returns the z-coordinate of `r`.\n\t * \n\t * @returns a reference to the modified vector instance.\n\t * \n\t * The function returns a reference to the original object, indicating that the state\n\t * of the object remains unchanged after modification. This is useful for chaining\n\t * methods together or avoiding unnecessary copies of objects.\n\t */\n\tpublic Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}\n\n\t/**\n\t * retrieves the value of the `x` field, which is a `float` variable.\n\t * \n\t * @returns a floating-point value representing the variable `x`.\n\t */\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\t/**\n\t * sets the value of the field `x` of its object to the provided float value.\n\t * \n\t * @param x float value that will be assigned to the `x` field of the class instance\n\t * being manipulated by the function.\n\t */\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\t/**\n\t * returns the value of the `y` field.\n\t * \n\t * @returns a floating-point value representing the y coordinate of the point.\n\t */\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\t/**\n\t * sets the value of the `y` field in the current object to the provided float value.\n\t * \n\t * @param y float value that will be assigned to the `y` field of the class instance\n\t * being manipulated by the function.\n\t */\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\t/**\n\t * retrieves the value of the `z` field in the provided object.\n\t * \n\t * @returns the value of the `z` field.\n\t */\n\tpublic float getZ() {\n\t\treturn z;\n\t}\n\n\t/**\n\t * sets the value of the field `z` to the provided float argument.\n\t * \n\t * @param z 3D coordinates of an object in the `x`, `y`, and `z` dimensions, which\n\t * is stored in the instance variable `this.z` after being assigned the value provided\n\t * by the caller.\n\t */\n\tpublic void setZ(float z) {\n\t\tthis.z = z;\n\t}\n\n\t/**\n\t * compares a `Vector3f` object with another vector by checking if its `x`, `y`, and\n\t * `z` components are equal.\n\t * \n\t * @param r 3D vector that is being compared to the current vector for equality.\n\t * \n\t * \t- `x`: The first coordinate of `r`, which represents the x-axis value of the vector.\n\t * \t- `y`: The second coordinate of `r`, which represents the y-axis value of the vector.\n\t * \t- `z`: The third coordinate of `r`, which represents the z-axis value of the vector.\n\t * \n\t * @returns a boolean value indicating whether the vector's coordinates are equal to\n\t * those of the provided vector.\n\t */\n\tpublic boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}\n\n}","location":{"start":10,"insert":3,"offset":" ","indent":0,"comment":{"start":2,"end":9}},"item_type":"class","length":687,"docLength":7},{"id":"e2ada3a1-a1cb-4ab3-7041-de83bb5c4970","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"calculates the Euclidean distance of a 3D point from its origin using the square root of the sum of the squares of the x, y, and z coordinates.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the coordinates of a point in 3D space.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat length = vector.length(); // returns 3.74\n","description":"\nThe example demonstrates how to calculate the length of a 3D vector using its coordinates and the method length(). The result is stored in a variable named length."},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}","location":{"start":32,"insert":26,"offset":"\t","indent":1,"comment":{"start":25,"end":31}},"item_type":"method","length":3,"docLength":6},{"id":"372931ee-3bd9-ffac-f140-784fa09ba6a8","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"computes the length of a point in three-dimensional space by squaring its coordinates and summing them.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the square of the length of the given vector.","complex_type":false},"usage":{"language":"java","code":"float lengthSquared = new Vector3f(1, 2, 3).squareLength();\n","description":"\nIn this example the method squareLength is called on a vector of (1, 2, 3), which calculates and returns the squared length of the vector.\nThe result is then stored in a float variable named lengthSquared."},"name":"squareLength","code":"public float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}","location":{"start":42,"insert":36,"offset":"\t","indent":1,"comment":{"start":35,"end":41}},"item_type":"method","length":3,"docLength":6},{"id":"27053bbd-697b-09bc-5946-b7c5d42bccd5","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"calculates the maximum value of three arguments: `x`, `y`, and `z`. It returns the maximum value using the `Math.max()` method.","params":[],"returns":{"type_name":"float","description":"the maximum of the input values `x`, `y`, and `z`.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    // Create a new vector and set its values to 3, -4, and 5.\n    Vector3f myVector = new Vector3f();\n    myVector.set(3, -4, 5);\n    \n    // Print the largest component of the vector using max().\n    System.out.println(\"The largest component of the vector is: \" + myVector.max());\n}\n","description":"\nThis code creates a new Vector3f object and sets its components to 3, -4, and 5. It then uses the max method to print the largest component (which in this case is 5) to the console."},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}","location":{"start":51,"insert":46,"offset":"\t","indent":1,"comment":{"start":45,"end":50}},"item_type":"method","length":3,"docLength":5},{"id":"a9e639d7-7c9f-0ea5-1e4f-108fcda8bab2","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"computes the dot product of a `Vector3f` object and another vector, returning the result as a float value.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be dot-producted with the current vector.\n\n* `x`, `y`, and `z` are variables of type `float` that represent the coordinates of the vector.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and the vector component.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(1, 2, 3);\n    Vector3f v2 = new Vector3f(4, 5, 6);\n    \n    float dotProduct = v1.dot(v2);\n    \n    System.out.println(dotProduct);\n}\n","description":"\nIn this example the user is given a vector of (1, 2, 3) and another vector of (4, 5, 6). Then they are asked to use the dot method to find the dot product between these two vectors. This result will be returned as a float value which will then be printed out for the user to see."},"name":"dot","code":"public float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}","location":{"start":65,"insert":55,"offset":"\t","indent":1,"comment":{"start":54,"end":64}},"item_type":"method","length":3,"docLength":10},{"id":"6c714558-f9d8-65b0-6047-fd6b9f9e12e7","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"computes the cross product between two vectors in a 3D space, returning a new vector with magnitude and direction based on the dot product of the input vectors.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to cross with the current vector.\n\n* `r` is a `Vector3f` object containing the values for the x, y, and z components.\n* `x`, `y`, and `z` are the individual component values of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the cross product of the input vectors.\n\n* The output is a new Vector3f object that represents the cross product of the input vectors.\n* The components of the output vector are calculated using the dot product formula for cross products, where x, y, and z are the components of the input vectors.\n* The output vector has the same magnitude as the input vectors, but its direction is perpendicular to both input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(5, 7, 9);\nVector3f v2 = new Vector3f(4, 6, 8);\nVector3f result = v1.cross(v2); // returns a new vector with x=15, y=-21, and z=57\n","description":"\nHere, we create two `Vector3f` objects, `v1` and `v2`, using the constructor that takes three float arguments to set their coordinates, then use the `cross()` method of v1 to compute their cross product. The result is a new vector with x=15, y=-21, and z=57, which is stored in the variable `result`."},"name":"cross","code":"public Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}","location":{"start":89,"insert":69,"offset":"\t","indent":1,"comment":{"start":68,"end":88}},"item_type":"method","length":7,"docLength":20},{"id":"76cb1701-1ad2-06b3-3944-2fdc7db64b21","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"normalizes a vector by dividing it by its magnitude, returning a new vector with the same direction but with a length equal to 1.","params":[],"returns":{"type_name":"Vector3f","description":"a normalized version of the input vector, with a length of 1.\n\n* The output is a `Vector3f` object representing a normalized version of the original vector.\n* The x, y, and z components of the output represent the normalized values of the corresponding components of the original vector, scaled by the length of the original vector.\n* The length of the output vector is always non-zero, since the normalization is done to ensure that the resulting vector has a non-zero magnitude.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nVector3f nv = v.normalize();\nSystem.out.println(\"nv is: \" + nv.getX() + \", \" + nv.getY() + \", \" + nv.getZ()); // Outputs: nv is: 0.26726, 0.53452, 0.80178\n","description":"\nThis code creates a new Vector3f object, sets its values to 1, 2, and 3, respectively and then uses the normalized() method to set those values to their corresponding components of the unit vector in that direction, which is computed by dividing each component by the length.\nThe output shows that the returned vector has a length of one (since the input vector has a length of sqrt(1^2 + 2^2 + 3^2) = sqrt(14) = 3.74166, but it still maintains its original x, y, and z coordinates relative to the direction of the original vector.\nThis example demonstrates how the normalized method can be used in practice by comparing the input vector with a unit vector in the same direction and showing that they are equivalent."},"name":"normalized","code":"public Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}","location":{"start":111,"insert":97,"offset":"\t","indent":1,"comment":{"start":96,"end":110}},"item_type":"method","length":5,"docLength":14},{"id":"96560a5e-62f0-4390-9541-814beff37616","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"rotates a 3D vector by an angle around a specified axis, based on the sin and cos of the angle.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotation axis around which the object will be rotated.\n\n* `float angle`: The angle of rotation in radians.\n* `Vector3f axis`: The axis of rotation, which can be any 3D vector representing a point in space.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle of the vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that represents the rotated version of the original vector.\n\n* The output is a `Vector3f` object, representing the rotated position of the original vector.\n* The axis parameter represents the direction of rotation, and the angle parameter represents the angle of rotation in radians.\n* The function first computes the sine and cosine of the angle of rotation using the `Math.sin()` and `Math.cos()` methods.\n* Then, it multiplies the original vector by the sine and cosine values to create two new vectors that represent the rotated position along the axis of rotation.\n* The function then adds the result of the multiplication of the `this` object (representing the original position) and the vector created by multiplying the axis vector by the dot product of the `this` vector and a vector representing the angle of rotation in radians.\n\nThe output of the `rotate` function can be further explained as follows:\n\n* The returned vector represents the rotated position of the original vector along the specified axis of rotation.\n* The magnitude of the returned vector is equal to the magnitude of the original vector, but its direction has been rotated by the specified angle.\n* The rotation is around the origin of the coordinate system, as specified by the axis parameter.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(0, 1, 2);\nfloat angle = (float) Math.PI / 4;\nVector3f axis = new Vector3f(0, 1, 0);\nvec.rotate(axis, angle); // returns the rotated vector\n","description":"\nIn this example, we created a `Vector3f` object with coordinates `(0, 1, 2)`, which is then passed into the method `rotate` along with an axis `Vector3f` object with coordinates `(0, 1, 0)` and an angle of `Math.PI / 4`, which rotates the vector by 45 degrees around the x-axis.\n\nThe output from this code would be a new `Vector3f` object with coordinates `(-0.7071067811865475, -0.7071067811865475, 2)`. This is the result of rotating the original vector by 45 degrees around the x-axis and then adding that rotation to the original vector's coordinates.\n\nThis method first computes the sine and cosine of the angle using `Math.sin` and `Math.cos`, which are passed into the function as arguments. It then cross-multiplies the axis by its sine and multiplies the original vector by its cosine, resulting in two new vectors with the rotated components. The two resulting vectors are then added together to form the final output vector.\n\nThe `rotate` method is a useful tool for rotating 3D vectors around an arbitrary axis in 3D space. By passing in an axis and angle as arguments, it can be used to rotate any given vector by a desired amount around that axis. The method works by first computing the sine and cosine of the angle, which are then used to compute the rotated components of the original vector. These two new vectors are then added together to form the final output vector, which represents the rotated version of the original vector."},"name":"rotate","code":"public Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}","location":{"start":141,"insert":117,"offset":"\t","indent":1,"comment":{"start":116,"end":140}},"item_type":"method","length":6,"docLength":24},{"id":"e4aaa8f4-2b8b-56b8-914c-6440f0a65316","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"takes a quaternion parameter and rotates a `Vector3f` object by that amount, returning the resultant vector.","params":[{"name":"rotation","type_name":"Quaternion","description":"4D quaternion of the rotation to be applied to the current vector, which is multiplied with the current vector's components to produce the new vector.\n\nThe `rotation` argument is of type `Quaternion`, which represents a 4D mathematical object used to describe rotations in 3D space. The `conjugate` property returns the conjugate of the quaternion, which is another quaternion that represents the inverse of the original quaternion.\n\nThe multiplication of `rotation` with its conjugate (`w`) results in a new quaternion `w` that represents the rotation of the input vector relative to the origin of the quaternion. The resulting quaternion `w` is then converted into a 3D vector `new Vector3f(w.getX(), w.getY(), w.getZ())`, which represents the rotated vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector representing the rotated position of the original vector.\n\n* The output is a `Vector3f` object representing the rotated position of the original input vector.\n* The x, y, and z components of the output represent the rotated position in the x, y, and z directions, respectively.\n* These components are derived from the multiplication of the rotation quaternion with the original input vector followed by the conjugate of the rotation quaternion.","complex_type":true},"usage":{"language":"java","code":"public class Test {\n\tpublic static void main(String[] args) {\n\t\tQuaternion rotation = new Quaternion();\n\t\tVector3f vector = new Vector3f();\n\t\tvector.rotate(rotation);\n\t}\n}\n","description":"\nThe output of this example is a Vector3f with the rotated coordinates."},"name":"rotate","code":"public Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}","location":{"start":170,"insert":148,"offset":"\t","indent":1,"comment":{"start":147,"end":169}},"item_type":"method","length":7,"docLength":22},{"id":"d5d58af8-f870-e2b9-3348-bf1566ccf58a","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"interpolates a vector between two given values, using a linear interpolation formula. The resulting vector is the sum of the intermediate vectors multiplied by the interpolation factor and added to the initial vector.","params":[{"name":"dest","type_name":"Vector3f","description":"3D vector that the current vector is being interpolated towards.\n\n* `dest` is a `Vector3f` instance representing the destination point in 3D space.\n* It has three components: `x`, `y`, and `z`, each representing the coordinate value of the destination point.\n* The `lerpFactor` argument is a floating-point number representing the interpolation factor between the current point and the destination point.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"0-1 value used to interpolate between the current position of the object and its destination position.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector that interpolates between two given vectors.\n\nThe `Vector3f` object that is generated represents a point in 3D space with x, y, and z components.\n\nThe `dest` parameter represents the target position towards which the current position is being interpolated.\n\nThe `lerpFactor` parameter represents the interpolation factor used to blend the current position with the target position.\n\nWhen the `lerpFactor` is applied to the current position, it results in a new position that is a weighted combination of the current position and the target position.","complex_type":true},"usage":{"language":"java","code":"Vector3f position = new Vector3f(5, 10, 20);\nVector3f targetPosition = new Vector3f(8, 16, 40);\nfloat lerpFactor = 0.5f;\nposition = position.lerp(targetPosition, lerpFactor);\n","description":"\nIn the above example we create two `Vector3f` objects, 'position' and 'targetPosition'. We also set a float value 'lerpFactor', which represents the amount of interpolation between the current position and target position. The method 'lerp' is then used to interpolate the position object with the target position using the lerp factor."},"name":"lerp","code":"public Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":212,"insert":178,"offset":"\t","indent":1,"comment":{"start":177,"end":211}},"item_type":"method","length":3,"docLength":34},{"id":"9cff23a8-dda4-7f90-1342-b72920d1c6c5","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"takes a `Vector3f` argument `r` and returns a new `Vector3f` object with the sum of the values of the current instance and the input `r`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current vector, resulting in a new 3D vector output.\n\nThe `Vector3f` class has three fields (`x`, `y`, and `z`) that represent the coordinates of a 3D vector in float format. Therefore, `r` is a `Vector3f` object with specific values assigned to its fields (`x`, `y`, and `z`).","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector instance with the sum of the input vectors' x, y, and z components.\n\n* The output is a `Vector3f` object that represents the sum of the input vectors.\n* The x-component of the output is equal to the sum of the x-components of the input vectors.\n* The y-component of the output is equal to the sum of the y-components of the input vectors.\n* The z-component of the output is equal to the sum of the z-components of the input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(1, 2, 3);\nVector3f vector2 = new Vector3f(4, 5, 6);\nvector1.add(vector2); // vector1 is now (5, 7, 9)\n","description":"\nThis example creates two instances of the `Vector3f` class and uses the add method to add them together. The resulting vector has values `(5, 7, 9)`."},"name":"add","code":"public Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","location":{"start":231,"insert":216,"offset":"\t","indent":1,"comment":{"start":215,"end":230}},"item_type":"method","length":3,"docLength":15},{"id":"4748ce23-24d1-639a-fc49-7bd8d5876555","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"adds the component-wise sum of a vector to the corresponding components of the object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that adds its components to the corresponding components of the current object, resulting in an updated position for the object.\n\n* `x`, `y`, and `z` represent the components of the vector in the 3D space, respectively.\n* The vector is a class representing a 3D point in the mathematical representation, which is used to perform mathematical operations on it.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector3f v1 = new Vector3f(0, 0, 0);\n\tVector3f v2 = new Vector3f(1, 2, 3);\n\tv1.addSelf(v2);\n}\n","description":"\nThis would set the x component of vector v1 to 1 and its y component to 2 after executing addSelf, making it equal to the provided vector v2."},"name":"addSelf","code":"public void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}","location":{"start":245,"insert":235,"offset":"\t","indent":1,"comment":{"start":234,"end":244}},"item_type":"method","length":5,"docLength":10},{"id":"cd82fbd8-a5b3-ddaf-914b-40f22d17f057","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"adds a scalar value to the components of a `Vector3f` object, returning a new `Vector3f` instance with the modified components.","params":[{"name":"r","type_name":"float","description":"3D vector to be added to the current vector's components.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the sum of the original vector's components and the given scalar value.\n\n* The `Vector3f` object returned by the function has an x-component that is equal to the sum of the original vector's x-component and the input value r.\n* The y-component of the returned vector is equal to the sum of the original vector's y-component and the input value r.\n* The z-component of the returned vector is equal to the sum of the original vector's z-component and the input value r.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(5, 2, 8);\nVector3f v2 = v1.add(4);\nSystem.out.println(v2); // prints (9, 6, 12)\n","description":"\nThe add method takes a float argument named r and returns a new Vector3f object with the sum of the corresponding components of the current vector and the given float value as its coordinates. In this example, v1 is created with the coordinate values (5, 2, 8), then the add method is called on v1 with an argument of 4, resulting in a new Vector3f object with the coordinates (9, 6, 12)."},"name":"add","code":"public Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}","location":{"start":272,"insert":251,"offset":"\t","indent":1,"comment":{"start":250,"end":271}},"item_type":"method","length":3,"docLength":21},{"id":"d8960800-e124-1692-f24c-c13ab9ffcdff","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"adds a scaled version of a `Vector3f` object to the current vector, scaling the components of the original vector by the specified float value.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled and added to the current vector.\n\n* `v`: A `Vector3f` object that contains the vector to be added with a scale factor.\n* `scale`: A float value representing the scaling factor applied to the `v` vector.","complex_type":true},{"name":"scale","type_name":"float","description":"scalar value by which the provided `Vector3f` instance is multiplied before being added to the current vector instance.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that is the result of adding the provided vector scaled by the given factor to the original vector.\n\nThe `addScaledVector` function takes two arguments - `v` and `scale`. It returns a new `Vector3f` object that represents the sum of the original input vector (`this`) multiplied by the given scale factor. The resulting vector has the same components as the original input vector, but with the magnitude increased by the specified scale factor.\n\nThe returned vector has the following properties:\n\n* Magnitude: The magnitude of the returned vector is equal to the product of the magnitudes of the original input vector and the scale factor.\n* Direction: The direction of the returned vector is the same as that of the original input vector, unchanged by the scaling operation.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\t\t// Creates two vectors with respective x, y and z components\n\t\tVector3f vector1 = new Vector3f(2.0f, 4.0f, 6.0f);\n\t\tVector3f vector2 = new Vector3f(4.0f, 8.0f, 12.0f);\n\n\t\t// Creates a scale factor of 2 and applies it to vector2\n\t\tfloat scaleFactor = 2.0f;\n\t\tvector2.addScaledVector(scaleFactor);\n}\n","description":""},"name":"addScaledVector","code":"public Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}","location":{"start":298,"insert":276,"offset":"\t","indent":1,"comment":{"start":275,"end":297}},"item_type":"method","length":3,"docLength":22},{"id":"3fb4382d-334b-dbba-f240-086cc0fdd02e","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"multiplies a `Vector3f` object by a scalar value and adds it to the current vector of the class, scaling the vector's components by the provided scale factor.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector that is being scaled, and it is multiplied by the `scale` parameter before being added to the current vector.\n\n* `v`: A Vector3f object representing a 3D vector with x, y, and z components.\n* `scale`: A scalar value indicating the scaling factor to be applied to the vector.","complex_type":true},{"name":"scale","type_name":"float","description":"3D vector multiplication factor applied to the `Vector3f` object passed as an argument to the function, which results in the scaling of the vector's components.","complex_type":false}],"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        Vector3f v1 = new Vector3f();\n        Vector3f v2 = new Vector3f();\n        \n        // Initialize the x, y, and z components of vectors v1 and v2\n        v1.setX(0);\n        v1.setY(1);\n        v1.setZ(2);\n        v2.setX(3);\n        v2.setY(4);\n        v2.setZ(5);\n        \n        // Add the scaled vector to itself, resulting in a new vector with \n        // x = 0 + (3 * 0), y = 1 + (4 * 0), and z = 2 + (5 * 0) = 2\n        v1.addSelfScaledVector(v2, 0);\n        \n        // Print the result\n        System.out.println(\"Result: \" + v1);\n    }\n}\n","description":"\nOutput:\n"},"name":"addSelfScaledVector","code":"public void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}","location":{"start":315,"insert":302,"offset":"\t","indent":1,"comment":{"start":301,"end":314}},"item_type":"method","length":3,"docLength":13},{"id":"0014ad5f-d34a-9584-b645-497e7cb05c4d","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"computes the vector difference between two `Vector3f` objects, returning a new `Vector3f` object representing the difference.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that the method will subtract from the original vector.\n\nThe `Vector3f` class represents a 3D vector with floating-point values. The instance variable `x`, `y`, and `z` represent the coordinates of the vector in the x, y, and z directions, respectively.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector representing the difference between the input vector and the given reference vector.\n\n* The Vector3f object represents the difference between the current vector and the reference vector in terms of its x, y, and z components.\n* Each component of the returned vector is calculated by subtracting the corresponding component of the reference vector.\n* The resulting vector has the same units as the original vectors.\n* The properties of the returned vector are independent of the reference vector's magnitude or direction.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vectorA = new Vector3f(1, 2, 3);\n        Vector3f vectorB = new Vector3f(4, 5, 6);\n        \n        // subtracting vectors\n        System.out.println(\"The result of the subtraction is: \" + vectorA.sub(vectorB));\n    }\n}\n","description":"\nThis code creates two `Vector3f` objects, one with values (1, 2, 3) and another with values (4, 5, 6). The `sub()` method is then called on the first object to subtract the second object from it. The result of this operation is printed to the console.\n\nThe output of this program would be:\n"},"name":"sub","code":"public Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","location":{"start":339,"insert":319,"offset":"\t","indent":1,"comment":{"start":318,"end":338}},"item_type":"method","length":3,"docLength":20},{"id":"b7978597-8f81-a3a1-4d40-c97111c0eff4","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"calculates the vector difference between the input vector and the reference vector.","params":[{"name":"r","type_name":"float","description":"3D vector offset to be subtracted from the current position of the `Vector3f` object, resulting in the new position after subtraction.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector with the difference of the input value `r` from the original vector's coordinates.\n\nThe `Vector3f` object returned by the function represents a point in 3D space, with x, y, and z components representing the differences between the original position and the subtraction of r from it.\n\nThe value of the x component represents the difference between the original x position and the subtraction of r from it.\n\nThe value of the y component represents the difference between the original y position and the subtraction of r from it.\n\nThe value of the z component represents the difference between the original z position and the subtraction of r from it.\n\nIn summary, the `sub` function returns a new `Vector3f` object that represents the difference between the original position and the subtraction of r from it.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tVector3f vector = new Vector3f(1, 2, 3);\n\t\tfloat r = 5;\n\t\tvector.sub(r); // Returns a new Vector3f object with coordinates (x - r), (y - r), and (z - r)\n\t}\n}\n","description":"\nThis would create a new vector with the same x, y, and z values as the original vector minus the value of 'r'."},"name":"sub","code":"public Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}","location":{"start":364,"insert":343,"offset":"\t","indent":1,"comment":{"start":342,"end":363}},"item_type":"method","length":3,"docLength":21},{"id":"2bba3d8b-ba86-1890-bf46-531bc7fc7228","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"takes a `Vector3f` argument `r` and returns a new `Vector3f` instance with the product of the component values of the input vector and the corresponding components of the current vector.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to multiply with the current vector.\n\n* `x`, `y`, and `z` are the components of the vector in question.\n* `getX()`, `getY()`, and `getZ()` are methods that retrieve the values of these components, respectively.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the product of the input vectors' coordinates.\n\n* The output is a new Vector3f object that represents the multiplication of the input vectors x, y, and z with their corresponding components in the r vector.\n* The return type of the function is a Vector3f object, which means that it can hold 3D vector values.\n* The function modifies the original input variables by assigning the result of the multiplication to them.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f a = new Vector3f(1, 2, 3);\n        Vector3f b = new Vector3f(4, 5, 6);\n        \n        // Multiply vector a with vector b\n        Vector3f c = a.mul(b);\n        \n        System.out.println(\"Vector c: (\" + c.getX() + \", \" + c.getY() + \", \" + c.getZ() + \")\");\n    }\n}\n","description":"\nThis example will print the following output on console:\n"},"name":"mul","code":"public Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}","location":{"start":388,"insert":368,"offset":"\t","indent":1,"comment":{"start":367,"end":387}},"item_type":"method","length":3,"docLength":20},{"id":"1c21fff5-6e40-0eb5-234c-cae3415c211d","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"multiplies its input vector by a scalar value and returns the result as a new vector.","params":[{"name":"r","type_name":"float","description":"scalar value used to multiply each component of the `Vector3f` instance being passed in.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the product of the component values and the input scalar value `r`.\n\nThe `Vector3f` object that is returned has three elements, each representing the product of the corresponding component of the input vector and the scalar value `r`.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nvector = vector.mul(5); // x = 5, y = 10, z = 15\n","description":"\nThis code will create a new `Vector3f` object with values of (5, 10, 15), which was produced by multiplying the original `Vector3f` object by the value 5."},"name":"mul","code":"public Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}","location":{"start":401,"insert":392,"offset":"\t","indent":1,"comment":{"start":391,"end":400}},"item_type":"method","length":3,"docLength":9},{"id":"e38432b0-5dd7-dc9e-a24b-889b2ab18922","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"divides its input vector by a given reference vector, returning a new vector with the result.","params":[{"name":"r","type_name":"Vector3f","description":"scalar value that divides the vector `x`, `y`, and `z`.\n\n`x`, `y`, and `z` are the components of the vector, which represent the magnitude or length of the vector in the corresponding directions. These components are used to calculate the resultant vector after division with another vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector with the same x, y, and z components as the input vector, scaled by the reciprocal of the input value.\n\n* The output is a new `Vector3f` instance with elements scaled by the reciprocals of the corresponding elements in the input vector `r`.\n* The scaling is done element-wise, meaning that each element of the output is calculated as the input element multiplied by the reciprocal of its corresponding element in `r`.\n* The resultant vector has the same magnitude as the input vector, but its direction is inverted, meaning that it points in the opposite direction of the input vector.","complex_type":true},"usage":{"language":"java","code":"// Create a vector object with the coordinates (2, 4, 6)\nVector3f v = new Vector3f(2, 4, 6);\n\n// Create another vector object with the coordinates (1, 1, 1)\nVector3f r = new Vector3f(1, 1, 1);\n\n// Divide vector v by vector r and store the result in a third vector object\nVector3f q = v.div(r);\n\n// Print the x-axis, y-axis, and z-axis values of the result vector q\nSystem.out.println(\"q.x: \" + q.getX());\nSystem.out.println(\"q.y: \" + q.getY());\nSystem.out.println(\"q.z: \" + q.getZ());\n","description":"\nThis code will produce the following output:\n"},"name":"div","code":"public Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}","location":{"start":430,"insert":405,"offset":"\t","indent":1,"comment":{"start":404,"end":429}},"item_type":"method","length":3,"docLength":25},{"id":"f5a826ab-403b-9f9e-304c-a2c25e35799a","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"takes a scalar value `r` and returns a vector with its components divided by `r`.","params":[{"name":"r","type_name":"float","description":"scalar value used to perform the division operation on the instance variables of the `Vector3f` class.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the same x, y, and z components scaled by the given factor `r`.\n\nThe output is a `Vector3f` object, which represents a 3D vector with x, y, and z components. The values of these components are calculated by dividing the corresponding variables of the input vector by the input parameter `r`.\n\nThe returned vector has the same direction as the input vector, but its magnitude is reduced by a factor of `r`. This means that the output vector represents a scaled-down version of the original vector.","complex_type":true},"usage":{"language":"java","code":"// Example 1:\nVector3f a = new Vector3f(2, 4, 6);\nfloat r = 2;\na.div(r).toString(); // Output: (1, 2, 3)\n","description":"\nIn this example, the `div` method is used to divide all three components of a vector by the constant `r`, which is `2`. The resulting vector is then converted into a string using its `toString()` method. It is expected that the output would be \"(1, 2, 3)\", since:\n"},"name":"div","code":"public Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}","location":{"start":450,"insert":434,"offset":"\t","indent":1,"comment":{"start":433,"end":449}},"item_type":"method","length":3,"docLength":16},{"id":"c323c0ee-613f-c1aa-2943-eaa3b01bbf3a","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"computes the absolute value of a vector, returning a new vector with the absolute values of its components.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance representing the absolute value of the original vector's components.\n\nThe output is a `Vector3f` object, representing a 3D vector with magnitude equal to the absolute value of the input vector's coordinates.\nThe coordinate values are in the range (-∞, +∞), where each component represents the magnitude of the corresponding component of the input vector.\nThe resulting vector has the same orientation as the input vector, i.e., its direction is unchanged.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(-2, -5, 8);\nv1 = v1.abs(); // v1 is now (2, 5, 8)\n","description":"\nIt returns a new vector with the absolute value of each component."},"name":"abs","code":"public Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}","location":{"start":462,"insert":454,"offset":"\t","indent":1,"comment":{"start":453,"end":461}},"item_type":"method","length":3,"docLength":8},{"id":"7e1b421b-3286-fda2-b740-3f7138567bb6","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a string representation of a given object, including its three component parts: `x`, `y`, and `z`.","params":[],"returns":{"type_name":"String","description":"a string representation of a point in 3D space, consisting of three numbers separated by spaces.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vector = new Vector3f();\n        System.out.println(\"Vector3f Object: \" + vector);\n    }\n}\n","description":"\nThe output should look like the following:\n"},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}","location":{"start":473,"insert":466,"offset":"\t","indent":1,"comment":{"start":465,"end":472}},"item_type":"method","length":3,"docLength":7},{"id":"a830aeb2-f44a-91a2-ef4e-036e2cea75e7","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object containing the x and y coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the x and y coordinates of the point.\n\n* The `Vector2f` object returned represents a 2D point in homogeneous coordinates, with x and y components representing the horizontal and vertical positions of the point, respectively.\n* The `x` and `y` components of the vector have real-valued attributes that represent the absolute values of the corresponding position coordinates.\n* As a result, the `getXY` function returns a valid 2D point with x and y components that can be used in various contexts within the code.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(1, 2, 3);\nVector2f xy = vec.getXY();\n\n// The returned vector (xy) has the coordinates of the original vector (vec), but with only two dimensions.\nSystem.out.println(xy); // Outputs: (1, 2)\n","description":"\nThis example shows how to use the getXY method on an instance of Vector3f and retrieve a new instance of Vector2f with only two dimensions containing the original vector's x and y coordinates."},"name":"getXY","code":"public Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}","location":{"start":489,"insert":477,"offset":"\t","indent":1,"comment":{"start":476,"end":488}},"item_type":"method","length":3,"docLength":12},{"id":"6b920820-d5a6-e095-b944-99981e6f25f0","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object representing the y and z coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the y- and z-coordinates of a point.\n\nThe `Vector2f` object returned represents a 2D point in homogeneous coordinates with two components, `y` and `z`, which represent the Y and Z coordinates, respectively.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n\tpublic static void main(String[] args) {\n\t\tVector3f vector = new Vector3f();\n\t\tvector.set(1, 2, 3);\n\t\tVector2f yz = vector.getYZ();\n\t\tSystem.out.println(\"y: \" + yz.getY() + \", z: \" + yz.getZ()); // Outputs: y: 2, z: 3\n\t}\n}\n","description":"\nThe above code creates a new instance of `Vector2f` from the values of `y` and `z` in the provided `Vector3f`. The returned vector is then printed out to the console."},"name":"getYZ","code":"public Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}","location":{"start":508,"insert":493,"offset":"\t","indent":1,"comment":{"start":492,"end":507}},"item_type":"method","length":3,"docLength":15},{"id":"d3fdafd2-6307-c489-ba4b-70a59cefae7d","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object representing the component values of z and x.","params":[],"returns":{"type_name":"Vector2f","description":"a vector object of type `Vector2f`, containing the values of `z` and `x`.\n\n* `z`: The z-coordinate of the point represented by the Vector2f object. It is a double value that represents the vertical component of the point in the xy plane.\n* `x`: The x-coordinate of the point represented by the Vector2f object. It is also a double value that represents the horizontal component of the point in the xy plane.\n\nThese values can be used to represent any point in the 2D space, with the z-coordinate representing the height and the x and y coordinates representing the position on the xy plane.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector2d = new Vector3f(0, 1, 0).getZX();\n","description":"\nThis code creates a new 2D vector that has the values of x and z from the original 3D vector. The created vector would have the coordinates (0, 0) in the x-axis direction and (0, 1) in the y-axis direction."},"name":"getZX","code":"public Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}","location":{"start":521,"insert":512,"offset":"\t","indent":1,"comment":{"start":511,"end":520}},"item_type":"method","length":3,"docLength":9},{"id":"d4d1a218-6b73-d3af-964d-1e0593dca54b","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object containing the `y` and `x` coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `y` and `x` coordinates of a point.\n\nThe output is a `Vector2f` object, which represents a 2D point with two elements - `y` and `x`. The values of these elements correspond to the x-coordinate and y-coordinate of the point, respectively.","complex_type":true},"usage":{"language":"java","code":"public Vector2f v = new Vector3f(1, 2, 3);\n\nVector2f yx = v.getYX();\nSystem.out.println(\"Y-component of vector: \" + yx.getY());\nSystem.out.println(\"X-component of vector: \" + yx.getX());\n","description":"\nThe above code will print out the following output to the console:\n"},"name":"getYX","code":"public Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}","location":{"start":538,"insert":525,"offset":"\t","indent":1,"comment":{"start":524,"end":537}},"item_type":"method","length":3,"docLength":13},{"id":"1d6bdd66-0bec-7697-4946-b32c5cda3074","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object representing the z-coordinate and y-coordinate of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the component values of z and y.\n\n* z: The y-coordinate value of the vector.\n* y: The x-coordinate value of the vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f zy = vector.getZY();\nSystem.out.println(\"X coordinate of the ZY component: \" + zy.getX());\nSystem.out.println(\"Y coordinate of the ZY component: \" + zy.getY());\n","description":"\nHere is an explanation of how to use the getZY method and why it works. The getZY() method returns a new Vector2f object with the coordinates from the 3D vector (x, y, z) in the order of z-component followed by y-component. The example uses the getX() and getY() methods to retrieve the coordinates of the ZY component."},"name":"getZY","code":"public Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}","location":{"start":557,"insert":542,"offset":"\t","indent":1,"comment":{"start":541,"end":556}},"item_type":"method","length":3,"docLength":15},{"id":"faf2b213-da04-63bd-2e4f-934f209303a9","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns a `Vector2f` object representing the x and z coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the x and z coordinates of a point.\n\n* `x`: The first component of the vector represents the x-coordinate of the point. It is a double value that ranges from -1 to 1.\n* `z`: The second component of the vector represents the z-coordinate of the point. It is a double value that ranges from -1 to 1.\n\nThe output of the function is a `Vector2f` object, which is a two-dimensional vector in the homogeneous coordinates format. This means that the x and z components are represented as separate values, rather than being combined into a single value as in other coordinate systems.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f vector = new Vector3f(1, 2, 3);\n    Vector2f xzVector = vector.getXZ();\n    System.out.println(\"x = \" + xzVector.getX());\n    System.out.println(\"y = \" + xzVector.getY());\n}\n","description":"\nIn this example, a new Vector3f instance is created with values 1, 2, and 3 in the x, y, and z components respectively. A method call to getXZ() is made on this instance, which returns a Vector2f object containing values for its x and z coordinates, while leaving the value of y unchanged. The resulting Vector2f object is then printed out using getters for its respective components (x and y)."},"name":"getXZ","code":"public Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}","location":{"start":573,"insert":561,"offset":"\t","indent":1,"comment":{"start":560,"end":572}},"item_type":"method","length":3,"docLength":12},{"id":"5876a14c-d2a4-3bae-f249-c709e056d18a","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"updates the components of a `Vector3f` object with the specified values, returning the modified object for further manipulation.","params":[{"name":"x","type_name":"float","description":"3D position of the vector along the x-axis.","complex_type":false},{"name":"y","type_name":"float","description":"2D position of the vector in the Y-axis.","complex_type":false},{"name":"z","type_name":"float","description":"3rd component of the `Vector3f` object, which is being set to the provided value.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a reference to the modified `Vector3f` object.\n\nThe `Vector3f` object is modified to have its `x`, `y`, and `z` components set to the input values `x`, `y`, and `z`, respectively.\n\nAfter modification, the returned object is a reference to the same instance of `Vector3f`. This means that any modifications made to the returned object will affect the original object as well.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec1 = new Vector3f(0, 0, 0);\nvec1.set(5, 10, 20); // Sets the x, y, and z components of vec1 to 5, 10, and 20, respectively.\n","description":"\nThe method set takes three arguments (x, y, and z) which are all floats. The method returns a reference to the same Vector3f object that is being modified by this call. This allows for chaining methods together or avoiding unnecessary copies of objects."},"name":"set","code":"public Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}","location":{"start":593,"insert":577,"offset":"\t","indent":1,"comment":{"start":576,"end":592}},"item_type":"method","length":6,"docLength":16},{"id":"008f1398-e258-86b8-e747-1183d4a182d1","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"sets the component values of this vector to the corresponding values of the provided reference object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to set the values of the `Vector3f` object.\n\nThe function takes in a `Vector3f` object `r`, which represents a 3D vector with three components: `x`, `y`, and `z`. Each component is a floating-point number that represents the magnitude and direction of the vector. The function sets each component of the receiver vector to the corresponding component of the input vector, updating the properties of the receiver object.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a reference to the original `Vector3f` instance, unchanged.\n\n* `Vector3f r`: This is the input parameter passed to the function, which represents a 3D vector in homogeneous coordinates.\n* `set(r.getX(), r.getY(), r.getZ())`: This line of code sets the components of the returned output vector to the corresponding values of the input vector `r`.","complex_type":true},"usage":{"language":"java","code":"// Create two vector objects with different values for x, y, and z\nVector3f v1 = new Vector3f(10, 20, 30);\nVector3f v2 = new Vector3f(40, 50, 60);\n\n// Set the first object's coordinates to those of the second vector\nv1.set(v2);\n","description":""},"name":"set","code":"public Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}","location":{"start":616,"insert":600,"offset":"\t","indent":1,"comment":{"start":599,"end":615}},"item_type":"method","length":4,"docLength":16},{"id":"f82bc069-9910-fa86-9843-69f3426e95f0","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"returns the value of the `x` field.","params":[],"returns":{"type_name":"float","description":"the value of the `x` field.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n\tpublic static void main(String[] args) {\n\t\tVector3f v = new Vector3f();\n\t\tv.set(1, 2, 3);\n\t\tSystem.out.println(v.getX()); // prints 1.0\n\t}\n}\n","description":"\nThe example code uses the getX() method to print the value of the variable x in the Vector3f object v, which is initially set to (1, 2, 3) using the constructor. The result is 1.0 because the x coordinate is represented as a floating-point number in Java."},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":626,"insert":621,"offset":"\t","indent":1,"comment":{"start":620,"end":625}},"item_type":"method","length":3,"docLength":5},{"id":"f28e65e3-42d6-aaac-ab44-9a2a8c10845a","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"sets the value of the object's `x` field to the provided float argument.","params":[{"name":"x","type_name":"float","description":"float value to be assigned to the instance variable `x` of the class on which the `setX()` method is defined.","complex_type":false}],"usage":{"language":"java","code":"public class Vector3f {\n    private float x;\n    private float y;\n    private float z;\n\n    public Vector3f(float x, float y, float z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    // getters and setters\n    public float getX() { return x; }\n    public void setX(float x) {\n        this.x = x;\n    }\n\n    public float getY() { return y; }\n    public void setY(float y) {\n        this.y = y;\n    }\n\n    public float getZ() { return z; }\n    public void setZ(float z) {\n        this.z = z;\n    }\n}\n\n// Example usage\nVector3f myVector = new Vector3f(0, 0, 0);\nmyVector.setX(12);\nSystem.out.println(\"x: \" + myVector.getX()); // prints x: 12\n","description":""},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":636,"insert":630,"offset":"\t","indent":1,"comment":{"start":629,"end":635}},"item_type":"method","length":3,"docLength":6},{"id":"1f32ef32-1cea-f48a-3e49-59740a831d94","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"retrieves the value of the `y` field, which is a `float` variable.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the y-coordinate of a point.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    Vector3f vector = new Vector3f();\n    float y = vector.getY();\n    System.out.println(\"Y: \" + y);\n  }\n}\n","description":"\nThis program creates a new `Vector3f` object and retrieves the value of its `y` component using the method getY(). The retrieved value is then printed to the console."},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":645,"insert":640,"offset":"\t","indent":1,"comment":{"start":639,"end":644}},"item_type":"method","length":3,"docLength":5},{"id":"7460cdc4-a12f-cb82-4e48-9268d2fbe4ed","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"sets the value of the object's `y` field to the provided float value.","params":[{"name":"y","type_name":"float","description":"new value of the `y` field in the object being modified by the `setY()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nv.setY(4);\nSystem.out.println(v); // prints \"(1.0, 4.0, 3.0)\"\n","description":"\nThe input for the method is a float value (y) and it sets the y-axis coordinate of the vector to that value. The output of the setY method will be the coordinates of the modified vector object."},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":655,"insert":649,"offset":"\t","indent":1,"comment":{"start":648,"end":654}},"item_type":"method","length":3,"docLength":6},{"id":"94155d1b-e100-de96-4546-7981f9ab3fca","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"retrieves the value of the variable `z`.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the z component of an object's position.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vec = new Vector3f();\n        System.out.println(\"X: \" + vec.getX());\n        System.out.println(\"Y: \" + vec.getY());\n        System.out.println(\"Z: \" + vec.getZ());\n    }\n}\n","description":"\nThis example creates a new `Vector3f` object and prints the values of its x, y, and z components. The output should be something like this:\n"},"name":"getZ","code":"public float getZ() {\n\t\treturn z;\n\t}","location":{"start":664,"insert":659,"offset":"\t","indent":1,"comment":{"start":658,"end":663}},"item_type":"method","length":3,"docLength":5},{"id":"9db8eff2-f68c-fdaf-1341-f2bc8a051d67","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"sets the value of the `z` field of an object to the provided float value.","params":[{"name":"z","type_name":"float","description":"3D coordinate of the object in the x, y, and z dimensions, and its value is assigned to the `z` field of the class instance.","complex_type":false}],"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    Vector3f vector = new Vector3f();\n    float zValue = 5;\n    vector.setZ(zValue);\n    System.out.println(vector.getZ()); // Outputs: 5\n  }\n}\n","description":""},"name":"setZ","code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","location":{"start":675,"insert":668,"offset":"\t","indent":1,"comment":{"start":667,"end":674}},"item_type":"method","length":3,"docLength":7},{"id":"80a5d69f-93db-01aa-774d-36279c008c51","ancestors":["a1d007b2-e2f9-a783-fa41-666931ecc2df"],"type":"function","description":"compares the `x`, `y`, and `z` components of two `Vector3f` objects and returns `true` if they are equal, otherwise `false`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to which the current vector is compared for equality.\n\n* `x`: The first component of the `Vector3f` object, which corresponds to the x-coordinate of the vector.\n* `y`: The second component of the `Vector3f` object, which corresponds to the y-coordinate of the vector.\n* `z`: The third component of the `Vector3f` object, which corresponds to the z-coordinate of the vector.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the vector's components are equal to those of the provided vector.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tVector3f v1 = new Vector3f(0, 0, 0);\n\t\tVector3f v2 = new Vector3f(0, 0, 0);\n\t\tSystem.out.println(\"v1 and v2 are equal: \" + v1.equals(v2)); // Output: v1 and v2 are equal: true\n\t}\n}\n","description":""},"name":"equals","code":"public boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}","location":{"start":692,"insert":679,"offset":"\t","indent":1,"comment":{"start":678,"end":691}},"item_type":"method","length":3,"docLength":13}]}}}