{"name":"Vector3f.java","path":"src/com/ch/math/Vector3f.java","content":{"structured":{"description":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector.","items":[{"id":"0a64a8e0-c71d-d284-6142-e88e9166a00a","ancestors":[],"type":"function","description":"is a mathematical representation of a 3D vector in Java. It has three fields (x, y, and z) that represent the component values of the vector, and various methods for performing mathematical operations on the vector such as addition, subtraction, multiplication, division, and more. Additionally, it provides methods for normalizing the vector and rotating it around a given axis.","name":"Vector3f","code":"public class Vector3f {\n\n\tprivate float x;\n\tprivate float y;\n\tprivate float z;\n\n\tpublic Vector3f() {\n\t\tthis(0, 0, 0);\n\t}\n\t\n\tpublic Vector3f(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}\n\t\n\tpublic float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}\n\n\tpublic float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}\n\n\tpublic Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}\n\n\tpublic Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}\n\n\tpublic Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}\n\n\tpublic Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}\n\n\tpublic Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}\n\t\n\tpublic void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}\n\n\tpublic Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}\n\t\n\tpublic Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}\n\t\n\tpublic void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}\n\n\tpublic Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}\n\n\tpublic Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}\n\n\tpublic Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}\n\n\tpublic Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}\n\n\tpublic Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}\n\n\tpublic Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}\n\n\tpublic Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}\n\n\tpublic Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}\n\n\tpublic Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}\n\n\tpublic Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}\n\n\tpublic Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}\n\n\tpublic Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}\n\n\tpublic Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}\n\n\tpublic Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\tpublic Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic float getZ() {\n\t\treturn z;\n\t}\n\n\tpublic void setZ(float z) {\n\t\tthis.z = z;\n\t}\n\n\tpublic boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}\n\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":184,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"00068067-821b-1bab-9249-f41c4e508a7d","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"calculates the Euclidean distance of a point from its origin using the Pythagorean theorem.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the three Cartesian coordinates.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(2, 3, 4);\nfloat length = vector.length(); // returns 5.0\n","description":""},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}","location":{"start":19,"insert":19,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"5aa2c14b-d91c-9aa4-8c42-de29156de4af","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"computes the length of a point in 3D space by squaring its coordinates and summing them.","params":[],"returns":{"type_name":"float","description":"a value representing the length of the square of the input coordinates.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nSystem.out.println(\"The length squared is \" + vector.squareLength());\n","description":"\nIn this example, we first create a new Vector3f object and then print the value returned by the squareLength method which is a float variable that represents the length of the vector (x^2 + y^2 + z^2)."},"name":"squareLength","code":"public float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}","location":{"start":23,"insert":23,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"a6515af8-d4c2-feb7-d347-99a0b0d0c4bd","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"computes and returns the maximum value of three input values `x`, `y`, and `z`.","params":[],"returns":{"type_name":"float","description":"the maximum value of `x`, `y`, or `z`.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector3f vector = new Vector3f(1, 2, 3);\n\tSystem.out.println(\"Max value of the vector is \" + vector.max());\n}\n","description":""},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}","location":{"start":27,"insert":27,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"4417acc8-01ee-f1a2-7d4d-543925747faf","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"computes the dot product of a vector `r` and the input vector `x`, `y`, or `z`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that the dot product is being computed for.\n\n`r`: A `Vector3f` object representing a 3D vector with properties `x`, `y`, and `z`.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and the vector represented by the function parameters.","complex_type":false},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 0, 0); //Creates a vector with the coordinates (1, 0, 0).\nVector3f w = new Vector3f(0, 1, 0); //Creates a vector with the coordinates (0, 1, 0).\nfloat dotProduct = v.dot(w); //Calculates and returns the dot product of v and w, which is equal to 0.\n","description":""},"name":"dot","code":"public float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}","location":{"start":31,"insert":31,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"0561f7ea-012c-32a6-b140-c7cad2fa523b","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"computes the vector that is perpendicular to two given vectors in a three-dimensional space.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that is being crossed with the current vector, resulting in a new 3D vector output.\n\n* `r` is a `Vector3f` object representing a 3D vector in homogeneous coordinates.\n* `x`, `y`, and `z` are the components of the vector in the x, y, and z directions, respectively.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the cross product of the input vectors.\n\n* The output is a `Vector3f` object representing the cross product of the input vectors.\n* The components of the output vector are given by the equations x_, y_, and z_, which are calculated using the dot product of the input vectors.\n* The output vector has a magnitude equal to the product of the magnitudes of the input vectors, and its direction is perpendicular to both input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(1, 0, 0); // Vector1\nVector3f v2 = new Vector3f(0, 1, 0); // Vector2\nVector3f result; // Resultant vector.\nresult = v1.cross(v2); // Calculates the cross product of v1 and v2.\n","description":"\nThe resulting vector `result` would be (0, 0, 1)."},"name":"cross","code":"public Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}","location":{"start":35,"insert":35,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":7,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"fbb24195-109f-5a92-f248-59602a055402","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"normalizes a `Vector3f` instance by dividing its components by the magnitude of the vector, resulting in a unitized representation of the original vector.","params":[],"returns":{"type_name":"Vector3f","description":"a vector with the magnitude of the original vector and the direction unchanged.\n\nThe output is a `Vector3f` object that represents the normalized version of the input vector. The normalization is done by dividing each component of the input vector by its corresponding length.\n\nThe resulting vector has a length of 1, which means that it is a unit vector in the coordinate system. This property makes it useful for various mathematical operations and applications in computer graphics, physics, and other fields.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(5, 10, 15);\nvector.normalize();\n","description":"\nThis will return the normalized vector with a length of 1 and the same direction as the original vector."},"name":"normalized","code":"public Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}","location":{"start":43,"insert":43,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"11b07ac5-47ad-76b3-bc4b-416de1daf43d","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"rotates a 3D vector by an angle around a specified axis, based on the dot product of the vector and the axis.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotation axis around which the object will be rotated.\n\n* `axis`: A 3D vector representing the rotation axis. It has three components: x, y, and z.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle of the vector around the specified axis.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that represents the rotation of the original vector along the specified axis by the given angle.\n\n* The output is a vector representation of the rotated object.\n* The vector components represent the position of the rotated object in 3D space after applying the rotation.\n* The axis of rotation is specified by the `axis` parameter, which determines the direction of the rotation.\n* The angle of rotation is specified by the `angle` parameter, which represents the amount of rotation applied to the object.\n* The function returns a new vector object that represents the rotated position, based on the axis and angle parameters provided.","complex_type":true},"usage":{"language":"java","code":"Vector3f vectorToRotate = new Vector3f(0, 1, 0); // The vector that needs to be rotated\nVector3f axisOfRotation = new Vector3f(1, 0, 0); // The rotation axis\nfloat angleOfRotation = 90; // The rotation angle in degrees\n\n// Rotate the vector by the given angle around the rotation axis\nvectorToRotate.rotate(axisOfRotation, angleOfRotation);\n","description":""},"name":"rotate","code":"public Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}","location":{"start":49,"insert":49,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"27471998-ceab-ceb8-a341-8f648da31e58","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"rotates a `Vector3f` instance by the angle represented by the given `Quaternion` rotation.","params":[{"name":"rotation","type_name":"Quaternion","description":"3D rotation matrix that is applied to the `Vector3f` instance being rotated.\n\n* Quaternion is an object that represents a 3D rotation, consisting of a scalar component and a vector component.\n* conjugate() returns the complex conjugate of the quaternion, which is used in the multiplication operation.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector representing the rotated position of the original vector.\n\n* The output is a `Vector3f` object representing the rotated position of the original input vector.\n* The x, y, and z components of the output represent the rotated position in the x, y, and z directions, respectively.\n* The output is obtained by multiplying the rotation quaternion with the original input vector using the `mul` method, then concatenating the result with the conjugate of the rotation quaternion using the ` mul` method again.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(2, 4, 7);\nQuaternion rot = new Quaternion(1, 2, 3, 4);\nvec.rotate(rot);\n","description":"\nExplanation:\nThe rotate method takes in a Quaternion object as a parameter called rotation and returns a Vector3f object. The method first uses the conjugate() function to find the conjugate of the Quaternion rotation object. Then it uses the mul() function to multiply the rotation by itself, then by the conjugate, resulting in the returned vector. Finally, the result is used to create a new Vector3f object and returned. The example input 'rotation' represents a Quaternion and 'vec' represents a Vector3f that will be rotated by the Quaternion."},"name":"rotate","code":"public Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}","location":{"start":56,"insert":56,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":7,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"e1fa4198-1c0e-ffa3-8642-15211e504397","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"calculates the linear interpolation between two vectors, resulting in a new vector that is the weighted sum of the original vectors.","params":[{"name":"dest","type_name":"Vector3f","description":"3D vector to which the current vector will be interpolated, and its value is used as the starting point for the interpolation.\n\n* The `Vector3f` class is used to represent a 3D vector with floating-point values.\n* The `sub` method calculates the difference between two vectors by subtracting one vector from another.\n* The `mul` method multiplies a vector by a scalar value, which in this case is `lerpFactor`.\n* The `add` method adds a vector to another vector or a scalar value.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"factor by which the current vector is to be interpolated towards the destination vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector that interpolates between the input `dest` and the current position of the object.\n\nThe `Vector3f` object returned by the function is a result of interpolating between the input `Vector3f` objects using the provided `lerpFactor`.\n\nThe resulting vector has the same direction and magnitude as the input vectors, but its coordinates are adjusted according to the interpolation factor. Specifically, the x, y, and z components of the output vector are calculated as follows:\n\nx = (dest.x * lerpFactor) + (this.x * (1 - lerpFactor));\ny = (dest.y * lerpFactor) + (this.y * (1 - lerpFactor));\nz = (dest.z * lerpFactor) + (this.z * (1 - lerpFactor));\n\nTherefore, the output vector has a smoothed value between the input vectors, with the interpolation factor determining the degree of smoothing.","complex_type":true},"usage":{"language":"java","code":"Vector3f start = new Vector3f(0, 0, 0);\nVector3f end = new Vector3f(10, 10, 10);\nfloat factor = 0.5;\n\n// Calculate the lerp between the two vectors\nVector3f lerped = start.lerp(end, factor);\n","description":"\nIn this example, we are creating two Vector3f objects to represent the starting and ending positions of a movement, respectively. The method takes in a float value representing the interpolation factor between 0 and 1. By calling the lerp method with these values as inputs, we can find out the position that is halfway between the start and end positions."},"name":"lerp","code":"public Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":64,"insert":64,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"01624e6c-899d-04ae-e34a-c48733fb6299","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"adds two `Vector3f` objects and returns a new vector with the sum of their components.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current vector.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.\n* `z`: The z-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` object representing the sum of the input vectors.\n\nThe `Vector3f` object returned by the function represents a sum of two other `Vector3f` objects. The x, y, and z components of the returned vector are calculated by adding the corresponding components of the two input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(2, 4, 8);\nVector3f vector2 = new Vector3f(7, 6, 5);\n\nVector3f result = vector1.add(vector2);\nSystem.out.println(result); // (9, 10, 13)\n","description":""},"name":"add","code":"public Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","location":{"start":68,"insert":68,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"7493dd25-402f-e09c-0c47-860e3d610ee0","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"adds the components of a provided `Vector3f` object to the corresponding components of the current object, resulting in an updated representation of the current object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current position of the object, and its values are used to increment the object's x, y, and z components.\n\n* `x`, `y`, and `z` are the coordinates of the vector, each representing a single component of the vector in 3D space.","complex_type":true}],"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nVector3f otherVector = new Vector3f(4, 5, 6);\nmyVector.addSelf(otherVector);\nSystem.out.println(myVector); // Output: (5,7,9)\n","description":""},"name":"addSelf","code":"public void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}","location":{"start":72,"insert":72,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"e33489b4-469a-c6ae-794e-13971b4ddc3c","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a single float parameter and adds it to the vector's x, y, or z component, returning a new Vector3f instance with the updated values.","params":[{"name":"r","type_name":"float","description":"3D vector that is added to the current vector value of the object, resulting in a new vector with the sum of the two values.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` object with the sum of the input vector's x, y, and z components and the given scalar value.\n\nThe return type of the `add` function is `Vector3f`, which represents a 3D vector with floating-point values for x, y, and z components.\n\nThe expression `x + r` generates an integer value representing the addition of the float argument `r` to the component `x`. Similarly, `y + r` generates an integer value representing the addition of `r` to the component `y`, and `z + r` generates an integer value representing the addition of `r` to the component `z`.\n\nThe resulting vector values are then assigned to a new `Vector3f` object using the `new Vector3f()` constructor.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3); // Create a vector with initial values (1, 2, 3)\nVector3f anotherVector = new Vector3f(4, 5, 6); // Create another vector with initial values (4, 5, 6)\nmyVector.add(anotherVector); // Add the two vectors together\nSystem.out.println(myVector.getX() + \" \" + myVector.getY() + \" \" + myVector.getZ()); // Output the sum of both vectors' coordinates\n","description":"\nThis code would output: 5 7 9"},"name":"add","code":"public Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}","location":{"start":78,"insert":78,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"354a16a3-def7-9bb2-7b4e-6f444b2918c1","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a `Vector3f` and a scalar value as input, returns the result of adding the scaled vector to the current vector.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled and added to the current vector.\n\n* `v` is a Vector3f class instance representing a 3D vector with x, y, and z components.\n* `scale` is an input float value representing the scaling factor applied to `v`.","complex_type":true},{"name":"scale","type_name":"float","description":"scalar value that is multiplied with the input `Vector3f` before adding it to the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that is the result of adding the given `v` vector scaled by `scale`.\n\nThe output is a new `Vector3f` instance that represents the sum of the original vector and the scaled version of the input vector.\nThe scale factor is applied to both components of the input vector before adding them to the original vector.\nThe resulting vector has the same components as the original vector, but with the scaled components.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\t\tVector3f vectorA = new Vector3f(1, 2, 3);\n\t\tVector3f vectorB = new Vector3f(4, 5, 6);\n\t\tfloat scaleFactor = 0.5f; // Scaling factor for vectorB\n\t\t\n\t\t// Use the method to add a scaled version of vectorB to vectorA\n\t\tVector3f resultVector = vectorA.addScaledVector(vectorB, scaleFactor);\n\t\t\n\t\tSystem.out.println(\"The resultant vector is \" + resultVector);\n}\n","description":""},"name":"addScaledVector","code":"public Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}","location":{"start":82,"insert":82,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"83112cf5-c879-0ebe-b34d-834bfd8950db","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"multiplies a `Vector3f` object by a scalar value and adds it to the current vector representation of the object.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled.\n\n* `v`: A `Vector3f` object representing a 3D vector with x, y, and z components.\n* `scale`: A floating-point value representing the scalar factor to be applied to the `v` vector.","complex_type":true},{"name":"scale","type_name":"float","description":"scalar value that is multiplied with the `Vector3f` output of the `addSelf()` method, thereby scaling the result of the method call.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\n    vector.addSelfScaledVector(new Vector3f(4, 5, 6), 0.5);\n","description":"\nThis code will create a Vector3f object with values 1, 2, and 3 respectively. It then uses the addSelfScaledVector method on the vector object to add a scaled version of another Vector3f object to it (in this case with a scale factor of 0.5). The resulting vector would have values 6, 9, and 12 respectively after the operation."},"name":"addSelfScaledVector","code":"public void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}","location":{"start":86,"insert":86,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"62f0bf30-5b61-e09c-a742-c3d743ca7b09","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"calculates the vector difference between two `Vector3f` objects, returning a new vector with the differences.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be subtracted from the input `Vector3f`.\n\n* `x`: an integer value representing the x-coordination of `r`.\n* `y`: an integer value representing the y-coordination of `r`.\n* `z`: an integer value representing the z-coordination of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` object representing the difference between the input vector and the reference vector.\n\n* The returned value is a new Vector3f instance containing the difference between the input vectors' x, y, and z components.\n* The values of x, y, and z are calculated by subtracting the corresponding values of the input vector r from those of the current vector.\n* The resulting vector has the same orientation as the original vector, but it moves in the opposite direction.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(2, 4, 6);\nVector3f vector2 = new Vector3f(7, 8, 9);\nVector3f vector3 = vector1.sub(vector2);\nSystem.out.println(vector3); // prints (-5, -4, -5)\n","description":""},"name":"sub","code":"public Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","location":{"start":90,"insert":90,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"a15bb38e-9f82-cdbc-404f-b10c7564001e","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a single floating-point value `r` and subtracts it from the corresponding components of a `Vector3f` object, returning a new `Vector3f` object with the resultant values.","params":[{"name":"r","type_name":"float","description":"3D position from which to subtract the vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance representing the difference between the original vector and the provided value.\n\nThe `Vector3f` object returned by the function has three components: `x`, `y`, and `z`. Each component represents the difference between the original value and the input parameter `r`. For example, if `x` is 2.0 and `r` is 1.0, then the `x` component of the output will be 1.0.\n\nThe components of the output are in a specific order, with the `x`, `y`, and `z` components corresponding to the x, y, and z axes of a 3D coordinate system.\n\nThe output is a new instance of the `Vector3f` class, which means it has its own memory location and can be used independently of the original input parameters.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(4, 5, 6);\nfloat value = 2;\n\nVector3f vector2 = vector1.sub(value);\n\nSystem.out.println(\"vector2 is \" + vector2);\n","description":"\nThis code creates a new vector object (vector1) and sets its x, y, and z values to 4, 5, and 6 respectively. It then subtracts the value 2 from all three components of vector1 and stores the result in a new vector object (vector2). Finally, it prints the string representation of vector2."},"name":"sub","code":"public Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}","location":{"start":94,"insert":94,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"2b564229-7cb2-65a5-5e49-5972975de6f8","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"multiplies the components of a `Vector3f` object by the corresponding components of another `Vector3f` object, and returns a new `Vector3f` object with the resulting values.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to which the current vector is multiplied, resulting in a new 3D vector output.\n\n* `x`, `y`, and `z` are the components of `r`, which represent vectors in 3D space.\n* `getX()`, `getY()`, and `getZ()` are methods that provide access to the individual components of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the product of the input vectors' coordinates.\n\n* The output is a new Vector3f object with the product of the input parameters.\n* The x, y, and z components of the output are calculated by multiplying the corresponding components of the input vectors.\n* The resulting vector has the same semantic meaning as the multiplication of the two input vectors in 3D space.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(1, 2, 3);\nVector3f result = vec.mul(new Vector3f(4, 5, 6));\nSystem.out.println(result); // Outputs (4, 10, 18)\n","description":""},"name":"mul","code":"public Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}","location":{"start":98,"insert":98,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"5302bb3d-8042-7bab-8441-629568d529e5","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a single float argument and multiplies it to the corresponding components of a `Vector3f` object, returning a new `Vector3f` object with the result.","params":[{"name":"r","type_name":"float","description":"scalar value used to multiply each component of the `Vector3f` object.","complex_type":false}],"returns":{"type_name":"float","description":"a new vector with the product of the input vector's components and the scalar value `r`.","complex_type":false},"usage":{"language":"java","code":"Vector3f myVec = new Vector3f(2, 4, 6);\nVector3f result = myVec.mul(5);\nSystem.out.println(result);\n","description":"\nIn this code the vector (2, 4, 6) is multiplied by a float value of 5, resulting in a new vector with values (10, 20, 30). This would be an example of how to use the method mul() in the Vector3f class."},"name":"mul","code":"public Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}","location":{"start":102,"insert":102,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"a1049d7d-bdcc-5397-784c-63b42e92b6ae","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a reference to another `Vector3f` object and returns a new `Vector3f` object with the componentwise result of dividing the input by the reference argument.","params":[{"name":"r","type_name":"Vector3f","description":"vector to be divided by, and it is used to calculate the output vector's components.\n\nThe `Vector3f` class represents a three-dimensional vector in homogeneous coordinates. The `x`, `y`, and `z` attributes represent the component values of the vector.\n\nTherefore, when dividing a vector by another vector using this function, the output vector will have component values computed as the ratio of the corresponding components of the input vectors.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the same components as the input vector, but scaled by the reciprocal of the input value.\n\n* The output is a new `Vector3f` instance with scaled values based on the division operation performed on the input vectors.\n* The x, y, and z components of the output represent the scaled values of the corresponding components of the input vectors.\n* The scale factor in each component is calculated by dividing the corresponding value of the input vector by the corresponding value of the input vector passed as a parameter to the function.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n\tpublic static void main(String[] args) {\n\t\tVector3f v1 = new Vector3f(2, 4, 6);\n\t\tVector3f v2 = new Vector3f(1, 2, 3);\n\t\tVector3f result = v1.div(v2);\n\t\tSystem.out.println(\"Result: \" + result.toString());\n\t}\n}\n","description":""},"name":"div","code":"public Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}","location":{"start":106,"insert":106,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"cb889185-5f16-3aa4-5e4a-4da6a98d7eb2","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"takes a single float argument `r` and returns a new `Vector3f` instance with x, y, and z components scaled by the reciprocal of `r`.","params":[{"name":"r","type_name":"float","description":"scalar value that is used to divide each component of the `Vector3f` object returned by the function.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with x, y, and z components scaled by the input factor `r`.\n\n* The output is a new instance of the `Vector3f` class with the values of the original input divided by the given scalar value.\n* The output has the same dimensions as the input, with each component representing the corresponding coordinate of the vector divided by the scalar value.\n* The output is normalized to have a length of 1, ensuring that the resulting vector is properly scaled.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n        // Create a Vector3f object with x, y and z components\n\tVector3f vector = new Vector3f(10.5, 20.8, 30.9);\n        \n        // Divide the vector's components by a scalar value of 2.5\n\tVector3f result = vector.div(2.5);\n        \n        // Print the results\n\tSystem.out.println(\"Original Vector: \" + vector);\n\tSystem.out.println(\"Divided Vector: \" + result);\n}\n","description":"\nThe output should be:\n"},"name":"div","code":"public Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}","location":{"start":110,"insert":110,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"578b5d09-23cb-3aac-4c4d-1e48ee930706","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"computes and returns a new vector with the absolute values of its component.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the absolute values of its components.\n\nThe output is a new Vector3f object containing the absolute value of the input vector's x, y, and z components.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(-5, -10, -15);\nv.abs();\nSystem.out.println(v.getX() + \" \" + v.getY() + \" \" + v.getZ());\n","description":"\nOutput: 5 10 15"},"name":"abs","code":"public Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}","location":{"start":114,"insert":114,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"2db1e23b-e02e-b8bc-1b49-4396b06d8060","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a string representation of a object by concatenating three values: `x`, `y`, and `z`.","params":[],"returns":{"type_name":"String","description":"a string representation of a point in 3D space, consisting of three values separated by spaces.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nvector.set(1, 2, 3);\nSystem.out.println(vector.toString()); // Outputs (1 2 3)\n","description":""},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}","location":{"start":118,"insert":118,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"e74e6e13-c0a0-fd92-7646-00802ab02689","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a `Vector2f` object containing the x and y coordinates of an entity.","params":[],"returns":{"type_name":"Vector2f","description":"a vector containing the x and y coordinates of a point.\n\n* `x`: The first component of the vector, representing the x-coordinate of the point.\n* `y`: The second component of the vector, representing the y-coordinate of the point.\n\nBoth `x` and `y` are doubles, representing real numbers that represent the coordinates of the point in a 2D space.","complex_type":true},"usage":{"language":"java","code":"public class Test {\n   public static void main(String[] args) {\n      Vector3f vector = new Vector3f(1, 2, 3);\n      Vector2f xy = vector.getXY();\n      \n      // The x and y values of the Vector3f are used to create a new Vector2f object, xy\n      System.out.println(\"The X value is: \" + xy.x);\n      System.out.println(\"The Y value is: \" + xy.y);\n   }\n}\n","description":""},"name":"getXY","code":"public Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}","location":{"start":122,"insert":122,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"d94e8c2b-bc04-1091-6443-b56ce8048926","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a `Vector2f` object representing the y and z components of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the values of `y` and `z`.\n\n* `y`: This represents the y-component of the vector, which is a floating-point value.\n* `z`: This represents the z-component of the vector, which is also a floating-point value.\n\nThe vector itself is an instance of the `Vector2f` class, which is a part of the Java Foundation Library (JFL). The `Vector2f` class provides methods for manipulating 2D vectors and represents mathematical vectors in two dimensions using homogeneous coordinates.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(0, 1, 2);\nVector2f yz = vector.getYZ();\n\n// yz will now contain the values (1, 2)\nSystem.out.println(\"The y value of the vector is \" + yz.y); // prints \"The y value of the vector is 1\"\n","description":""},"name":"getYZ","code":"public Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}","location":{"start":126,"insert":126,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"e6e0c7e8-81bc-c592-e14b-fe37b2ef9d20","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a `Vector2f` object containing the `z` and `x` components of an unknown entity.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the coordinate pair (z, x).\n\n* z is a double value representing the z-component of the vector.\n* x is a double value representing the x-component of the vector.\n* The vector is represented as a 2D object with two components (x and z).","complex_type":true},"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    Vector3f vec = new Vector3f();\n    \n    // Initialize the vector to (1, 2, 3)\n    vec.set(1, 2, 3);\n    \n    // Get a Vector2f object representing the z and x components of the vector\n    Vector2f zx = vec.getZX();\n    \n    // Output the components of the Vector2f object\n    System.out.println(\"z component: \" + zx.getZ());\n    System.out.println(\"x component: \" + zx.getX());\n  }\n}\n","description":""},"name":"getZX","code":"public Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}","location":{"start":130,"insert":130,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"705e8eed-a0ba-fab8-bb4f-ed901462d41a","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a `Vector2f` object representing the position (x and y coordinates) of an object.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the values of `x` and `y`.\n\n* The returned object is of type `Vector2f`, which represents a 2D point in homogeneous coordinates.\n* The `y` field of the object contains the Y-coordinate of the point, while the `x` field contains the X-coordinate.\n* The resulting object is a new instance of `Vector2f`, rather than modifying the original input parameters.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(10, 20, 30);\nVector2f yxCoordinates = vector.getYX();\nSystem.out.println(\"yx coordinates: \" + yxCoordinates); // Output: yx coordinates: (20, 10)\n","description":""},"name":"getYX","code":"public Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}","location":{"start":134,"insert":134,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"15f20ac4-9cc3-77ae-8947-66f29345158f","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"generates a vector with the values of z and y.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `z` and `y` coordinates of the point.\n\n* The returned Vector2f object represents a point in 2D space with coordinates z and y.\n* The z coordinate is a float value representing the vertical position of the point, ranging from -1 to 1.\n* The y coordinate is also a float value representing the horizontal position of the point, ranging from -1 to 1.\n\nOverall, the `getZY` function returns a valid 2D coordinate point that can be used in various applications.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f zy = vector.getZY();\n","description":"\nIn this example, a new instance of the Vector3f class is created and its x, y, and z components are set to 1, 2, and 3 respectively. The getZY method is then called on the vector object, which returns a new instance of the Vector2f class with the x and y components of the original vector swapped, resulting in the zy variable being set to (3, 2)."},"name":"getZY","code":"public Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}","location":{"start":138,"insert":138,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"547bb5c9-1a27-9eb3-0d4f-12b59c9df2fb","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns a `Vector2f` object containing the `x` and `z` coordinates of an entity.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `x` and `z` coordinates of a point.\n\n* The `Vector2f` object represents a 2D point with x-axis value `x` and z-axis value `z`.\n* The `Vector2f` class is a part of the Java Standard Library and provides operations on 2D points.\n* The returned object can be used in various contexts such as graphics, game development, and mathematical calculations.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    Vector3f vector = new Vector3f(1.0, 2.0, 3.0);\n    Vector2f xzVector = vector.getXZ(); // returns a new Vector2f with values (1.0, 3.0)\n    System.out.println(xzVector); // prints \"(1.0, 3.0)\"\n  }\n}\n","description":""},"name":"getXZ","code":"public Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}","location":{"start":142,"insert":142,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"b788896e-f194-b8b3-7149-3712b588fce7","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"modifies the components of a `Vector3f` object, assigning new values to `x`, `y`, and `z`.","params":[{"name":"x","type_name":"float","description":"3D position of the vector in the x-axis direction.","complex_type":false},{"name":"y","type_name":"float","description":"2D position of the vector along the Y-axis.","complex_type":false},{"name":"z","type_name":"float","description":"3rd component of the vector and sets its value to the provided float value.","complex_type":false}],"returns":{"type_name":"instance","description":"a reference to the same `Vector3f` object, which now contains the new x, y, and z values.\n\nThe `Vector3f` object is modified to have new values for `x`, `y`, and `z`.\nThe returned object is itself, with the modifications applied.","complex_type":true},"usage":{"language":"java","code":"// Create a vector object with the values 0, 0, 0\nVector3f v = new Vector3f();\n\n// Set the x value of the vector to 1.0\nv.set(1.0);\n\n// Print the updated vector\nSystem.out.println(v); // Output: (1.0, 0.0, 0.0)\n","description":""},"name":"set","code":"public Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}","location":{"start":146,"insert":146,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"008c9d8b-8d36-319b-b340-82e60bb1bd27","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"sets the components of the `Vector3f` object to the corresponding values of the provided `r` argument.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be set as the value of the `Vector3f` object.\n\n* `getX()`: Returns the x-coordinate of `r`.\n* `getY()`: Returns the y-coordinate of `r`.\n* `getZ()`: Returns the z-coordinate of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a reference to the modified vector instance.\n\nThe function returns a reference to the original object, indicating that the state of the object remains unchanged after modification. This is useful for chaining methods together or avoiding unnecessary copies of objects.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(0, 0, 0);\nVector3f otherVector = new Vector3f(5, 10, 20);\nmyVector.set(otherVector);\nSystem.out.println(\"X: \" + myVector.getX() + \", Y: \" + myVector.getY() + \", Z: \" + myVector.getZ()); // Outputs X: 5, Y: 10, Z: 20\n","description":""},"name":"set","code":"public Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}","location":{"start":153,"insert":153,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"8e224073-5ef9-03ba-2c43-b104f85acc10","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"retrieves the value of the `x` field, which is a `float` variable.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the variable `x`.","complex_type":false},"usage":{"language":"java","code":"public void printVectorValues(Vector3f vector) {\n\tSystem.out.println(\"x = \" + vector.getX());\n\tSystem.out.println(\"y = \" + vector.getY());\n\tSystem.out.println(\"z = \" + vector.getZ());\n}\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":158,"insert":158,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"f541eb5c-7a03-7e80-d447-22e9fb9d5e76","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"sets the value of the field `x` of its object to the provided float value.","params":[{"name":"x","type_name":"float","description":"float value that will be assigned to the `x` field of the class instance being manipulated by the function.","complex_type":false}],"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nmyVector.setX(4); // sets the x-component of the vector to 4.\nSystem.out.println(myVector); // prints \"(4, 2, 3)\"\n","description":""},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":162,"insert":162,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"4f9cf660-c577-a58d-c14a-001a520b3068","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"returns the value of the `y` field.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the y coordinate of the point.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vector = new Vector3f(1, 2, 3);\n        System.out.println(vector.getY()); // Outputs \"2\"\n    }\n}\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":166,"insert":166,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"d9456e6a-191d-7991-4746-c85f6ca82b67","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"sets the value of the `y` field in the current object to the provided float value.","params":[{"name":"y","type_name":"float","description":"float value that will be assigned to the `y` field of the class instance being manipulated by the function.","complex_type":false}],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vector = new Vector3f();\n        vector.setY(10);\n        System.out.println(vector.getY()); \n    }\n}\n","description":""},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":170,"insert":170,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"a9180c7c-7e30-19b6-ce4d-62a72b6acd79","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"retrieves the value of the `z` field in the provided object.","params":[],"returns":{"type_name":"float","description":"the value of the `z` field.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat z = vector.getZ();\nSystem.out.println(z); // prints \"3\" to the console\n","description":""},"name":"getZ","code":"public float getZ() {\n\t\treturn z;\n\t}","location":{"start":174,"insert":174,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"17c5595d-c5bb-ab81-1547-56379ec64fdd","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"sets the value of the field `z` to the provided float argument.","params":[{"name":"z","type_name":"float","description":"3D coordinates of an object in the `x`, `y`, and `z` dimensions, which is stored in the instance variable `this.z` after being assigned the value provided by the caller.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nvector.setZ(5.0);\n","description":"\nIn this example, we create a new instance of the Vector3f class and then use the setZ method to set its z value to 5.0."},"name":"setZ","code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","location":{"start":178,"insert":178,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."},{"id":"9882f191-38d8-0ba1-f34a-0a1f35d9af3d","ancestors":["0a64a8e0-c71d-d284-6142-e88e9166a00a"],"type":"function","description":"compares a `Vector3f` object with another vector by checking if its `x`, `y`, and `z` components are equal.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that is being compared to the current vector for equality.\n\n* `x`: The first coordinate of `r`, which represents the x-axis value of the vector.\n* `y`: The second coordinate of `r`, which represents the y-axis value of the vector.\n* `z`: The third coordinate of `r`, which represents the z-axis value of the vector.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the vector's coordinates are equal to those of the provided vector.","complex_type":false},"usage":{"language":"java","code":"Vector3f vectorOne = new Vector3f(1,2,3);\nVector3f vectorTwo = new Vector3f(1,2,3);\n\nboolean areEqual = vectorOne.equals(vectorTwo);\n\nSystem.out.println(\"The vectors are equal: \" + areEqual); // Outputs \"The vectors are equal: true\"\n","description":""},"name":"equals","code":"public boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}","location":{"start":182,"insert":182,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A `Vector3f` class that represents 3D vectors in homogeneous coordinate form. It provides various methods for vector arithmetic operations such as addition, subtraction, multiplication, and dot product. Additionally, it offers functions for normalizing and rotating vectors using quaternions. The class also provides getters and setters for the x, y, and z components of the vector."}]}}}